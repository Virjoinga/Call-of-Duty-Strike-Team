using System;
using System.Collections;
using UnityEngine;

public class ActivateWatcher : SingletonMonoBehaviour
{
	public enum ActivateCloudSaveStatus
	{
		CLOUD_SAVE_SUCCESS = 0,
		CLOUD_SAVE_FAIL = 1,
		CLOUD_SAVE_RETRY = 2,
		CLOUD_SAVE_UNKNOWN = 3
	}

	private const float START_SECONDS_BETWEEN_RETRIES = 2f;

	private const float MAX_SECONDS_BETWEEN_RETRIES = 60f;

	private const float MIN_SECONDS_CONSIDERED_FAIL = 5f;

	private static readonly ILogger _log = LogBuilder.Instance.GetLogger(typeof(ActivateWatcher), LogLevel.Debug);

	public UIButton m_InputBlocker;

	private Bedrock.brUserConnectionStatus m_LastUserConnectionStatus;

	private Bedrock.brUserConnectionStatus m_LastNonTransitionConnectionStatus;

	private bool m_IsResolvingConflict;

	private bool m_HasImportantSaveData;

	private Bedrock.MakeGoodRewardInfo m_MakeGoodRewardInfo;

	private bool m_MakeGoodRewardPending;

	private string m_EmergencyMessageContent;

	private bool m_EmergencyMessagePending;

	private bool m_MessageInProgress;

	private bool m_ActivateUIOpen;

	private int m_ScreenHeightOnAwake;

	private ActivateCloudSaveStatus m_CloudSaveStatus;

	private float m_CloudSaveWaitTime = 2f;

	public bool ActivateUIOpen
	{
		get
		{
			return m_ActivateUIOpen;
		}
	}

	public ActivateCloudSaveStatus CloudSaveSatus
	{
		get
		{
			return m_CloudSaveStatus;
		}
	}

	public static ActivateWatcher Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<ActivateWatcher>();
		}
	}

	public Bedrock.brUserConnectionStatus LastNonTransitionConnectionStatus
	{
		get
		{
			return m_LastNonTransitionConnectionStatus;
		}
	}

	public Bedrock.brUserConnectionStatus LastUserConnectionStatus
	{
		get
		{
			return m_LastUserConnectionStatus;
		}
	}

	public static event EventHandler<ConnectionStatusChangeEventArgs> ConnectionStatusChange;

	public static event EventHandler<LogOnEventArgs> UserLoggedOn;

	public static event EventHandler<EventArgs> UserLoggedOff;

	public static event EventHandler<EventArgs> EliteAccountLinked;

	public static event EventHandler<EventArgs> DataLoadedAfterLogin;

	public static event EventHandler<EventArgs> ActivateUILaunched;

	protected override void AwakeOnce()
	{
		base.AwakeOnce();
		m_ScreenHeightOnAwake = Screen.height;
		m_LastUserConnectionStatus = Bedrock.brUserConnectionStatus.BR_LOGGED_OUT;
		m_IsResolvingConflict = false;
		m_MakeGoodRewardPending = false;
		m_EmergencyMessagePending = false;
		m_MessageInProgress = false;
		m_CloudSaveStatus = ActivateCloudSaveStatus.CLOUD_SAVE_SUCCESS;
		m_CloudSaveWaitTime = 2f;
		UnityEngine.Object.DontDestroyOnLoad(this);
	}

	private void OnEnable()
	{
		ActivateWatcher.UserLoggedOn = (EventHandler<LogOnEventArgs>)Delegate.Combine(ActivateWatcher.UserLoggedOn, new EventHandler<LogOnEventArgs>(HandleUserLoggedOn));
		ActivateWatcher.UserLoggedOff = (EventHandler<EventArgs>)Delegate.Combine(ActivateWatcher.UserLoggedOff, new EventHandler<EventArgs>(HandleUserLoggedOff));
		ActivateWatcher.ConnectionStatusChange = (EventHandler<ConnectionStatusChangeEventArgs>)Delegate.Combine(ActivateWatcher.ConnectionStatusChange, new EventHandler<ConnectionStatusChangeEventArgs>(HandleConnectionStatusChange));
		Bedrock.UserConnectionStatusChanged += HandleConnectionStatusChanged;
		Bedrock.UserVarCloudConflict += ShouldShowConflictDialog;
		Bedrock.UserVarUserChanged += HandleUserVarUserChanged;
		Bedrock.UserVarUpdatedFromCloud += HandleUserVarUpdatedFromCloud;
		Bedrock.BedrockUIClosed += HandleActivateUIClosed;
		Bedrock.RemoteNotificationReceived += HandleBedrockRemoteNotificationReceived;
		Bedrock.MakeGoodRewardAvailable += HandleBedrockMakeGoodRewardAvailable;
		Bedrock.EmergencyMessageAvailable += HandleBedrockEmergencyMessageAvailable;
		Bedrock.EmergencyMessageInvalid += HandleBedrockEmergencyMessageAvailable;
		SecureStorage.OnLoad += OnLoad;
		m_InputBlocker.gameObject.SetActive(false);
	}

	private void HandleConnectionStatusChange(object sender, ConnectionStatusChangeEventArgs e)
	{
		Debug.Log(string.Concat("ACTIVATE LOG IN MESSAGE ", Bedrock.getUserConnectionStatus(), ",", m_LastUserConnectionStatus));
		if (Bedrock.getUserConnectionStatus() == Bedrock.brUserConnectionStatus.BR_LOGGING_IN_REGISTERED && m_LastUserConnectionStatus == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_ANONYMOUSLY_ONLINE)
		{
			StartCoroutine(DoActivateLoggedInWarning());
		}
	}

	private IEnumerator WaitForScreenToSettle()
	{
		int timeout = 500;
		while (Screen.height != m_ScreenHeightOnAwake && timeout > 0)
		{
			timeout--;
			yield return null;
		}
	}

	private IEnumerator DoActivateLoggedInWarning()
	{
		yield return StartCoroutine(WaitForScreenToSettle());
		MessageBoxController.Instance.DoActivateLoggedInWarning();
	}

	private IEnumerator DoActivateLoggedOffWarning()
	{
		yield return StartCoroutine(WaitForScreenToSettle());
		MessageBoxController.Instance.DoActivateLoggedOffWarning();
	}

	private IEnumerator ShowMigrateDialog()
	{
		yield return StartCoroutine(WaitForScreenToSettle());
		MessageBoxController.Instance.ShowMigrateDialog(this, "DoMigrate", "DontMigrate");
	}

	private IEnumerator DoCloudConflictDialog(SecureStorageMetadata localData, SecureStorageMetadata onlineData)
	{
		yield return StartCoroutine(WaitForScreenToSettle());
		MessageBoxController.Instance.DoCloudConflictDialog(this, "onlineButtonHit", "localButtonHit", localData, onlineData);
	}

	private IEnumerator DoEliteAccountLinkDialogue()
	{
		yield return StartCoroutine(WaitForScreenToSettle());
		MessageBoxController.Instance.DoEliteAccountLinkDialogue(this, "EliteReward");
	}

	private void OnDisable()
	{
		if (BedrockWorker.Instance != null)
		{
			BedrockWorker.Instance.InvalidateEliteStatusCallback();
		}
		ActivateWatcher.UserLoggedOn = (EventHandler<LogOnEventArgs>)Delegate.Remove(ActivateWatcher.UserLoggedOn, new EventHandler<LogOnEventArgs>(HandleUserLoggedOn));
		ActivateWatcher.UserLoggedOff = (EventHandler<EventArgs>)Delegate.Remove(ActivateWatcher.UserLoggedOff, new EventHandler<EventArgs>(HandleUserLoggedOff));
		ActivateWatcher.ConnectionStatusChange = (EventHandler<ConnectionStatusChangeEventArgs>)Delegate.Remove(ActivateWatcher.ConnectionStatusChange, new EventHandler<ConnectionStatusChangeEventArgs>(HandleConnectionStatusChange));
		Bedrock.UserConnectionStatusChanged -= HandleConnectionStatusChanged;
		Bedrock.UserVarCloudConflict -= ShouldShowConflictDialog;
		Bedrock.UserVarUserChanged -= HandleUserVarUserChanged;
		Bedrock.UserVarUpdatedFromCloud -= HandleUserVarUpdatedFromCloud;
		Bedrock.BedrockUIClosed -= HandleActivateUIClosed;
		Bedrock.RemoteNotificationReceived -= HandleBedrockRemoteNotificationReceived;
		Bedrock.MakeGoodRewardAvailable -= HandleBedrockMakeGoodRewardAvailable;
		Bedrock.EmergencyMessageAvailable -= HandleBedrockEmergencyMessageAvailable;
		Bedrock.EmergencyMessageInvalid -= HandleBedrockEmergencyMessageAvailable;
		SecureStorage.OnLoad -= OnLoad;
	}

	private void OnLoad(object sender, EventArgs args)
	{
		m_HasImportantSaveData = SecureStorage.Instance.HasImportantSaveData();
	}

	private void OnApplicationPause(bool pause)
	{
		if (!pause)
		{
			Bedrock.Reconnect();
			SetActivateUIClosedLocalState();
		}
	}

	private void ShowNotification(string message)
	{
		NotificationPanel.Instance.Display(message);
	}

	private void HandleConnectionStatusChanged(object sender, EventArgs e)
	{
		m_CloudSaveWaitTime = 2f;
		_log.LogDebug("HandleConnectionStatusChanged(...)");
		Bedrock.brUserConnectionStatus userConnectionStatus = Bedrock.getUserConnectionStatus();
		_log.LogDebug("Connection status is now {0}", userConnectionStatus);
		if (userConnectionStatus != m_LastUserConnectionStatus)
		{
			_log.LogDebug("New ConnectionStatus ({0}) doesn't match last status ({1}) last non transition status ({2})", userConnectionStatus, m_LastUserConnectionStatus, m_LastNonTransitionConnectionStatus);
			if (ActivateWatcher.ConnectionStatusChange != null)
			{
				ActivateWatcher.ConnectionStatusChange(this, new ConnectionStatusChangeEventArgs(m_LastUserConnectionStatus, userConnectionStatus));
			}
			if (m_LastUserConnectionStatus.IsAnonymous() && userConnectionStatus.IsRegistered())
			{
				if (ActivateWatcher.UserLoggedOff != null)
				{
					ActivateWatcher.UserLoggedOff(this, new EventArgs());
				}
			}
			else if (m_LastUserConnectionStatus.IsRegistered() && userConnectionStatus.IsAnonymous())
			{
				if (ActivateWatcher.UserLoggedOff != null)
				{
					ShowNotification(Language.Get("S_ACTIVATE_NOTIFICATION_LOGGED_OFF"));
					ActivateWatcher.UserLoggedOff(this, new EventArgs());
				}
			}
			else if (m_LastUserConnectionStatus.IsLoggedIn() && !userConnectionStatus.IsLoggedIn() && ActivateWatcher.UserLoggedOff != null)
			{
				ActivateWatcher.UserLoggedOff(this, new EventArgs());
			}
			if (userConnectionStatus.IsLoggedIn() && ActivateWatcher.UserLoggedOn != null)
			{
				Debug.Log(string.Concat("STATUS: ", userConnectionStatus, " ANON: ", Bedrock.isDeviceAnonymouslyLoggedOn()));
				ActivateWatcher.UserLoggedOn(this, new LogOnEventArgs(Bedrock.isDeviceAnonymouslyLoggedOn(), Bedrock.GetFirstLogOnRewardEarned()));
			}
		}
		m_LastUserConnectionStatus = userConnectionStatus;
		if (userConnectionStatus != Bedrock.brUserConnectionStatus.BR_LOGGING_IN_ANONYMOUSLY && userConnectionStatus != Bedrock.brUserConnectionStatus.BR_LOGGING_IN_REGISTERED)
		{
			m_LastNonTransitionConnectionStatus = userConnectionStatus;
			Debug.Log("Setting m_LastNonTransitionConnectionStatus to " + m_LastNonTransitionConnectionStatus);
		}
	}

	private void HandleUserLoggedOn(object sender, LogOnEventArgs e)
	{
		Debug.Log(":::::: Handle user logged on " + Bedrock.getUsername() + " FirstTime = " + e.FirstTime + " LastNonTransitionConnectionStatus " + m_LastNonTransitionConnectionStatus);
		_log.LogDebug("HandleUserLoggedOn(...)");
		if (!e.AnonymousLogOn)
		{
			if (e.FirstTime && Bedrock.getUserConnectionStatus() != Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_OFFLINE)
			{
				SwrveEventsUI.ActivateFirstSignIn();
				if (m_HasImportantSaveData)
				{
					_log.Log("[HandleUserLoggedOn] User had important save data, showing migrate dialog ...");
					StartCoroutine(ShowMigrateDialog());
				}
				else
				{
					_log.Log("[HandleUserLoggedOn] User did not have important save data, NOT showing migrate dialog ... " + Bedrock.getUserConnectionStatus());
					SecureStorage.Instance.ResetAllData();
					GiveFirstTimeReward();
				}
			}
			if (Bedrock.getUserConnectionStatus() == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_OFFLINE)
			{
				ShowNotification(Language.GetFormatString("S_ACTIVATE_OFFLINE_NOTIFICATION", Bedrock.getUsername()));
			}
			else if (Bedrock.getUserConnectionStatus() == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_ONLINE)
			{
				if (m_LastNonTransitionConnectionStatus != Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_OFFLINE && m_LastNonTransitionConnectionStatus != Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_ONLINE)
				{
					Debug.Log("LOAD1");
					SecureStorage.Instance.ResetAllData();
					SecureStorage.Instance.LoadAllData();
					ShowNotification(Language.GetFormatString("S_ACTIVATE_ONLINE_NOTIFICATION", Bedrock.getUsername()));
				}
				else
				{
					SecureStorage.Instance.PushToCloud();
				}
			}
		}
		else
		{
			if (e.FirstTime)
			{
				_log.Log("First time user logged on");
			}
			if (m_LastNonTransitionConnectionStatus != Bedrock.brUserConnectionStatus.BR_LOGGED_IN_ANONYMOUSLY_OFFLINE && m_LastNonTransitionConnectionStatus != Bedrock.brUserConnectionStatus.BR_LOGGED_IN_ANONYMOUSLY_ONLINE)
			{
				SecureStorage.Instance.ResetAllData();
				SecureStorage.Instance.LoadAllData();
			}
		}
	}

	private void DoMigrate()
	{
		Debug.Log("Moving anonymous user cache data to user");
		Bedrock.MoveAnonymousUserCacheDataToUser();
		GiveFirstTimeReward();
		SecureStorage.Instance.ResetAllData();
		SecureStorage.Instance.LoadAllData();
		SecureStorage.Instance.PushToCloud();
	}

	private void DontMigrate()
	{
		Debug.Log("Did not migrate");
		SecureStorage.Instance.ResetAllData();
		SecureStorage.Instance.LoadAllData();
	}

	private void HandleUserLoggedOff(object sender, EventArgs e)
	{
		m_HasImportantSaveData = SecureStorage.Instance.HasImportantSaveData();
		_log.LogDebug(string.Concat("HandleUserLoggedOff(...) ", Bedrock.getUserConnectionStatus(), " m_HasImportantSaveData ", m_HasImportantSaveData));
		if (Bedrock.getUserConnectionStatus() == Bedrock.brUserConnectionStatus.BR_LOGGING_IN_ANONYMOUSLY && m_LastUserConnectionStatus != Bedrock.brUserConnectionStatus.BR_LOGGED_IN_ANONYMOUSLY_OFFLINE && m_LastUserConnectionStatus != Bedrock.brUserConnectionStatus.BR_LOGGED_IN_ANONYMOUSLY_ONLINE)
		{
			StartCoroutine(DoActivateLoggedOffWarning());
		}
	}

	private void GiveFirstTimeReward()
	{
		StatsManager.Instance.AchievementManager().UpdateYoureOnTheTeam();
	}

	private void ShouldShowConflictDialog(object sender, EventArgs e)
	{
		if (!m_IsResolvingConflict)
		{
			m_IsResolvingConflict = true;
			SecureStorage.Instance.CloudPushingDisabled = true;
			StartCoroutine(ResolvingConflict());
		}
	}

	private IEnumerator ResolvingConflict()
	{
		_log.Log("Begin Resolving Cloud Conflicts");
		while (Bedrock.getUserConnectionStatus() != Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_ONLINE || ActStructure.Instance.MissionInProgress)
		{
			if (Bedrock.getUserConnectionStatus() == Bedrock.brUserConnectionStatus.BR_LOGGING_IN_REGISTERED || Bedrock.getUserConnectionStatus() == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_ONLINE)
			{
				yield return new WaitForEndOfFrame();
				continue;
			}
			SecureStorage.Instance.CloudPushingDisabled = false;
			m_IsResolvingConflict = false;
			yield break;
		}
		Debug.Log("Connection status is " + Bedrock.getUserConnectionStatus());
		Bedrock.CloudConflictInfo cloudConflictInfo = Bedrock.GetUserCacheVariablesCloudConflictInfo();
		_log.Log("Cloud Storage Conflict: " + cloudConflictInfo.fileConflictStatus);
		if (Bedrock.isDeviceAnonymouslyLoggedOn() || cloudConflictInfo.fileConflictStatus == Bedrock.brCloudStorageFileConflictStatus.BR_CLOUDSTORAGE_FILECONFLICT_ONLY_EXISTS_ON_LOCAL)
		{
			SecureStorage.Instance.CloudPushingDisabled = false;
			SecureStorage.Instance.PushToCloud();
			m_IsResolvingConflict = false;
			yield break;
		}
		if (cloudConflictInfo.fileConflictStatus == Bedrock.brCloudStorageFileConflictStatus.BR_CLOUDSTORAGE_FILECONFLICT_ONLY_EXISTS_ON_CLOUD)
		{
			_log.LogDebug("Conflict status is {0} - pulling automatically.", cloudConflictInfo.fileConflictStatus);
			PullFromTheCloud();
			yield return StartCoroutine(DoActivateLoggedInWarning());
			yield break;
		}
		SecureStorageMetadata localData = default(SecureStorageMetadata);
		SecureStorageMetadata onlineData = default(SecureStorageMetadata);
		Debug.Log("LOCAL: " + SecureStorage.Instance.GetString(SecureStorage.CloudMetaDataKey));
		Debug.Log("ONLINE: " + cloudConflictInfo.metaData);
		SecureStorage.Instance.DecodeMetadata(SecureStorage.Instance.GetString(SecureStorage.CloudMetaDataKey), ref localData);
		SecureStorage.Instance.DecodeMetadata(cloudConflictInfo.metaData, ref onlineData);
		if (localData.Tag == onlineData.Tag)
		{
			_log.LogDebug("Local data tag matches online data tag - pulling automatically.");
			PullFromTheCloud();
			yield return StartCoroutine(DoActivateLoggedInWarning());
			yield break;
		}
		if (Convert.ToInt32(onlineData.TotalXP) >= Convert.ToInt32(localData.TotalXP) && Convert.ToInt32(onlineData.HardCurrencyPurchased) >= Convert.ToInt32(localData.HardCurrencyPurchased))
		{
			_log.LogDebug("XP and purchased hard currency is higher in the cloud data - pulling automatically.");
			PullFromTheCloud();
			yield return StartCoroutine(DoActivateLoggedInWarning());
			yield break;
		}
		_log.LogDebug("XP in the cloud " + onlineData.TotalXP + " XP local " + localData.TotalXP);
		yield return StartCoroutine(DoCloudConflictDialog(localData, onlineData));
	}

	private void localButtonHit()
	{
		SecureStorage.Instance.CloudPushingDisabled = false;
		StartCoroutine(PushToCloud());
	}

	private IEnumerator PushToCloud()
	{
		SecureStorage.Instance.PushToCloud();
		m_IsResolvingConflict = false;
		yield return null;
	}

	private void onlineButtonHit()
	{
		PullFromTheCloud();
	}

	private void HandleUserVarUserChanged(object sender, EventArgs e)
	{
		UserVarUpdatedFromCloud();
	}

	private void HandleUserVarUpdatedFromCloud(object sender, EventArgs e)
	{
		UserVarUpdatedFromCloud();
	}

	private void UserVarUpdatedFromCloud()
	{
		if (ActivateWatcher.DataLoadedAfterLogin != null)
		{
			ActivateWatcher.DataLoadedAfterLogin(this, new EventArgs());
		}
		SecureStorage.Instance.LoadAllData();
	}

	private void HandleBedrockRemoteNotificationReceived(object sender, Bedrock.RemoteNotificationEventArgs e)
	{
		_log.LogDebug("HandleBedrockRemoteNotificationReceived(...)");
		NotificationPanel.Instance.Display(e._message);
	}

	public void PullFromTheCloud()
	{
		_log.LogDebug("PullFromTheCloud");
		if (!Bedrock.ResolveUserCacheVariablesWithCloud(false))
		{
			_log.LogWarning("ResolveUserCacheVariablesWithCloud returned failed to start");
		}
		SecureStorage.Instance.CloudPushingDisabled = false;
		m_IsResolvingConflict = false;
	}

	private void HandleActivateUIClosed(object sender, Bedrock.brUserInterfaceReasonForCloseEventArgs e)
	{
		_log.LogDebug("HandleActivateUIClosed " + e.Reason);
		SetActivateUIClosedLocalState();
		if (Bedrock.getUserConnectionStatus() == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_ONLINE && !SecureStorage.Instance.EliteAccountLinked)
		{
			CheckForEliteLink();
		}
		SoundManager.Instance.ActivateUIClosed();
	}

	private void SetActivateUIClosedLocalState()
	{
		if (m_ActivateUIOpen)
		{
			Time.timeScale = 1f;
			UIManager.instance.blockInput = false;
			m_InputBlocker.gameObject.SetActive(false);
			m_ActivateUIOpen = false;
		}
	}

	private void CheckForEliteLink()
	{
		Debug.Log("2 Starting check for Elite link: Connection status = " + Bedrock.getUserConnectionStatus());
		if (!SecureStorage.Instance.EliteAccountLinked)
		{
			BedrockWorker.Instance.VerifyEliteStatus(EliteStatusUpdate);
		}
	}

	public void EliteStatusUpdate(bool linked)
	{
		if (linked && !SecureStorage.Instance.EliteAccountLinked)
		{
			SwrveEventsUI.LinkedAccountDone();
			StartCoroutine(DoEliteAccountLinkDialogue());
		}
	}

	private void EliteReward()
	{
		SecureStorage.Instance.EliteAccountLinked = true;
		ActStructure.Instance.OnEliteAccountLinked();
		if (ActivateWatcher.EliteAccountLinked != null)
		{
			ActivateWatcher.EliteAccountLinked(this, new EventArgs());
		}
	}

	private void ShowActivateUI(Bedrock.brUserInterfaceScreen userInterface)
	{
		_log.LogDebug("ShowActivateUI " + userInterface);
		if (FrontEndController.Instance.ActiveScreen == ScreenID.MissionOverview)
		{
			Time.timeScale = 0f;
		}
		if (!Bedrock.displayUserInterface(userInterface))
		{
			m_ActivateUIOpen = false;
			UIManager.instance.blockInput = false;
			m_InputBlocker.gameObject.SetActive(false);
		}
		else
		{
			SoundManager.Instance.ActivateUIOpened();
		}
	}

	public void LaunchActivate(Bedrock.brUserInterfaceScreen screen)
	{
		if (!Application.isEditor)
		{
			m_ActivateUIOpen = true;
			UIManager.instance.blockInput = true;
			m_InputBlocker.gameObject.SetActive(true);
			if (ActivateWatcher.ActivateUILaunched != null)
			{
				ActivateWatcher.ActivateUILaunched(this, new EventArgs());
			}
			StartCoroutine(ReclaimMemoryThenLaunchActivate(screen));
		}
	}

	private IEnumerator ReclaimMemoryThenLaunchActivate(Bedrock.brUserInterfaceScreen screen)
	{
		yield return Resources.UnloadUnusedAssets();
		GC.Collect();
		if (!Application.isEditor)
		{
			Instance.ShowActivateUI(screen);
		}
	}

	private void Update()
	{
		if (m_MessageInProgress)
		{
			return;
		}
		if (m_EmergencyMessagePending)
		{
			m_MessageInProgress = true;
			StartCoroutine(ShowEmergencyMessage());
		}
		else if (m_MakeGoodRewardPending && ActStructure.Instance != null && !ActStructure.Instance.MissionInProgress)
		{
			if (m_MakeGoodRewardInfo.RewardType < 1 || m_MakeGoodRewardInfo.RewardType > 2)
			{
				Debug.Log("Invalid reward type");
				m_MakeGoodRewardPending = false;
			}
			else
			{
				m_MessageInProgress = true;
				StartCoroutine(ShowMakeGood());
			}
		}
	}

	private IEnumerator ShowMakeGood()
	{
		yield return new WaitForSeconds(2f);
		while (MessageBoxController.Instance.IsAnyMessageActive)
		{
			yield return new WaitForEndOfFrame();
		}
		MessageBoxController.Instance.MakeGoodMessage(m_MakeGoodRewardInfo, this, "OnRewardCollected");
	}

	private IEnumerator ShowEmergencyMessage()
	{
		yield return new WaitForSeconds(2f);
		MessageBoxController.Instance.EmergencyMessage(m_EmergencyMessageContent, this, "OnEmergencyMessageDismissed");
	}

	private void HandleBedrockEmergencyMessageAvailable(object sender, EventArgs e)
	{
		Debug.Log(string.Concat("Language: '", Language.CurrentLanguage(), "'"));
		if (Bedrock.TryGetEmergencyMessage(Language.CurrentLanguage().ToString(), out m_EmergencyMessageContent))
		{
			Debug.Log("EMERGENCY MESSAGE: " + m_EmergencyMessageContent);
			m_EmergencyMessagePending = true;
		}
	}

	private void HandleBedrockMakeGoodRewardAvailable(object sender, EventArgs e)
	{
		if (Bedrock.GetMakeGoodReward(out m_MakeGoodRewardInfo) && m_MakeGoodRewardInfo.TimeStamp != 0)
		{
			Debug.Log("MAKE GOOD REWARD: Type " + m_MakeGoodRewardInfo.RewardType + " Value " + m_MakeGoodRewardInfo.Value + " Time: " + m_MakeGoodRewardInfo.TimeStamp);
			m_MakeGoodRewardPending = true;
		}
		Bedrock.ClearMakeGoodReward();
	}

	private void OnEmergencyMessageDismissed()
	{
		m_EmergencyMessagePending = false;
		m_MessageInProgress = false;
	}

	private void OnRewardCollected()
	{
		int value = m_MakeGoodRewardInfo.Value;
		switch (m_MakeGoodRewardInfo.RewardType)
		{
		case 1:
			GameSettings.Instance.PlayerCash().AdjustHardCash(value);
			break;
		case 2:
			StatsManager.Instance.PlayerStats().AddRewardXP(value);
			break;
		}
		m_MakeGoodRewardPending = false;
		m_MessageInProgress = false;
	}

	public void QueueCloudSave()
	{
		if (m_CloudSaveStatus != ActivateCloudSaveStatus.CLOUD_SAVE_RETRY)
		{
			m_CloudSaveStatus = ActivateCloudSaveStatus.CLOUD_SAVE_RETRY;
			m_CloudSaveWaitTime = 2f;
			StartCoroutine(RetryCloudSave());
		}
	}

	public void CancelQueuedCloudSaveOnSuccess()
	{
		StopAllCoroutines();
		m_CloudSaveStatus = ActivateCloudSaveStatus.CLOUD_SAVE_SUCCESS;
	}

	private IEnumerator RetryCloudSave()
	{
		while (m_CloudSaveStatus == ActivateCloudSaveStatus.CLOUD_SAVE_RETRY)
		{
			yield return StartCoroutine(CoroutineUtils.WaitForWallTime(m_CloudSaveWaitTime));
			if (SecureStorage.Instance.CloudPushingDisabled)
			{
				m_CloudSaveStatus = ActivateCloudSaveStatus.CLOUD_SAVE_FAIL;
			}
			else if (Bedrock.getUserConnectionStatus().IsOnline() && Bedrock.ResolveUserCacheVariablesWithCloud(true))
			{
				m_CloudSaveStatus = ActivateCloudSaveStatus.CLOUD_SAVE_SUCCESS;
				Debug.Log("Cloud save success.... " + Time.time);
			}
		}
	}

	public bool ShowCloudSaveSuccess()
	{
		if (m_CloudSaveStatus == ActivateCloudSaveStatus.CLOUD_SAVE_SUCCESS || m_CloudSaveStatus == ActivateCloudSaveStatus.CLOUD_SAVE_UNKNOWN)
		{
			return true;
		}
		if (m_CloudSaveStatus == ActivateCloudSaveStatus.CLOUD_SAVE_RETRY && m_CloudSaveWaitTime < 5f)
		{
			return true;
		}
		return false;
	}
}
