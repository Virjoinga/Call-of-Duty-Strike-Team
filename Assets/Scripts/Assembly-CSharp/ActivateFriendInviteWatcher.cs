using System;
using System.Collections;
using UnityEngine;

public class ActivateFriendInviteWatcher : SingletonMonoBehaviour
{
	private const int MaxRetries = 10;

	private static readonly ILogger _log = LogBuilder.Instance.GetLogger(typeof(ActivateFriendInviteWatcher), LogLevel.Warning);

	public float friendInvitePollInterval = 30f;

	public uint friendInviteCount;

	public bool debugMode;

	public static ActivateFriendInviteWatcher Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<ActivateFriendInviteWatcher>();
		}
	}

	public uint NumFriendInvites
	{
		get
		{
			return friendInviteCount;
		}
	}

	public static event EventHandler<FriendInviteCountEventArgs> FriendInviteCountUpdated;

	protected override void AwakeOnce()
	{
		base.AwakeOnce();
		UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
	}

	private void Start()
	{
		StartCoroutine(TimerCoroutine());
	}

	private void OnEnable()
	{
		ActivateWatcher.UserLoggedOff += HandleActivateWatcherUserLoggedOff;
	}

	private void HandleActivateWatcherUserLoggedOff(object sender, EventArgs e)
	{
		friendInviteCount = 0u;
		OnFriendInviteCountUpdated();
	}

	private void OnDisable()
	{
		ActivateWatcher.UserLoggedOff -= HandleActivateWatcherUserLoggedOff;
	}

	private IEnumerator TimerCoroutine()
	{
		while (true)
		{
			if (!debugMode)
			{
				Bedrock.brUserConnectionStatus connectionStatus = ChallengeManager.ConnectionStatus;
				if (!connectionStatus.IsRegistered())
				{
					_log.Log("Skipping update - Connection status is {0}, not logged in to activate.", connectionStatus);
				}
				else if (!connectionStatus.IsOnline())
				{
					_log.Log("Skipping update - Connection status is {0}, not online enough for us.", connectionStatus);
				}
				else
				{
					short taskHandle = Bedrock.StartGetIncomingFriendInvites(99u);
					if (taskHandle != -1)
					{
						BedrockTask task = new BedrockTask(taskHandle);
						uint tmpFriendInviteCount = 0u;
						using (task)
						{
							_log.LogDebug("Checking for friend invites...");
							yield return StartCoroutine(task.WaitForTaskToCompleteOrTimeoutCoroutine());
							Bedrock.GetNumIncomingFriendInvites(taskHandle, true, out tmpFriendInviteCount);
							friendInviteCount = tmpFriendInviteCount;
							_log.LogDebug("{0} Friend invites available!", friendInviteCount);
							OnFriendInviteCountUpdated();
						}
					}
				}
			}
			else
			{
				friendInviteCount++;
				if (friendInviteCount > 5)
				{
					friendInviteCount = 0u;
				}
				OnFriendInviteCountUpdated();
			}
			yield return new WaitForSeconds(friendInvitePollInterval);
		}
	}

	private void OnFriendInviteCountUpdated()
	{
		if (ActivateFriendInviteWatcher.FriendInviteCountUpdated != null)
		{
			ActivateFriendInviteWatcher.FriendInviteCountUpdated(this, new FriendInviteCountEventArgs(friendInviteCount));
		}
	}
}
