using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class NotificationPanel : SingletonMonoBehaviour
{
	private class NotificationMessage
	{
		public string Message;

		public float DisplayTime;

		public NotificationMessage(string msg, float time)
		{
			Message = msg;
			DisplayTime = time;
		}
	}

	private const float DEFAULT_MESSAGE_TIME = 5f;

	private const float TRANSITION_TIME = 0.3f;

	private const float SCALE = 1.3f;

	private const float BORDER = 10f;

	private const float HEIGHT_OFFSET = 64f;

	private const float Z = -9f;

	public Scale9Grid Background;

	public SpriteText MsgSprite;

	private Vector3 mStartPos;

	private Vector3 mEndPos;

	private float mTimeout;

	private float mBorder;

	private float mHeightOffset;

	private bool m_DisplayingMessage;

	private Queue<NotificationMessage> m_Messages = new Queue<NotificationMessage>();

	public static NotificationPanel Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<NotificationPanel>();
		}
	}

	protected override void Awake()
	{
		m_DisplayingMessage = false;
		m_Messages.Clear();
		UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
		base.Awake();
	}

	public void Display(string msg)
	{
		Display(msg, 5f);
	}

	private void Display(string msg, float messageTime)
	{
		NotificationMessage item = new NotificationMessage(msg, 5f);
		m_Messages.Enqueue(item);
	}

	private void Update()
	{
		if (!m_DisplayingMessage && m_Messages.Count > 0)
		{
			NotificationMessage message = m_Messages.Dequeue();
			StartDisplay(message);
		}
	}

	private void StartDisplay(NotificationMessage message)
	{
		m_DisplayingMessage = true;
		if (StartCoroutine(DoDisplay(message.Message, message.DisplayTime)) == null)
		{
			UnityEngine.Object.Destroy(base.gameObject);
		}
	}

	private IEnumerator DoDisplay(string msg, float messageTime)
	{
		if (!(MsgSprite != null) || !(Background != null))
		{
			yield break;
		}
		float pixelSize = CommonHelper.CalculatePixelSizeInWorldSpace(base.transform);
		float multiplier = 1f;
		if (TBFUtils.IsRetinaHdDevice())
		{
			multiplier = 2f;
		}
		mBorder = 10f * multiplier;
		mHeightOffset = 64f * multiplier;
		MsgSprite.Text = msg;
		float width2 = 0f;
		float height2 = 0f;
		string[] splitUp = MsgSprite.Text.Split(new string[2] { "\\n", "\n" }, StringSplitOptions.None);
		if (MsgSprite.RenderCamera == null)
		{
			MsgSprite.RenderCamera = Camera.main;
		}
		for (int count = 0; count < splitUp.Length; count++)
		{
			float pixelLength = MsgSprite.GetScreenWidth(splitUp[count]);
			if (pixelLength > width2)
			{
				width2 = pixelLength;
			}
		}
		width2 += mBorder * 2f;
		height2 = MsgSprite.BaseHeight / pixelSize * MsgSprite.lineSpacing * (float)splitUp.Length + mBorder * 2f;
		Background.size.x = width2;
		Background.size.y = height2;
		Background.Resize();
		Vector3 screenPosition = new Vector3((float)Screen.width - width2 * 0.6f, (float)Screen.height - (mHeightOffset + height2), -9f);
		mEndPos = Camera.main.ScreenToWorldPoint(screenPosition);
		screenPosition.x += width2 * 2f;
		mStartPos = Camera.main.ScreenToWorldPoint(screenPosition);
		mTimeout = messageTime + 0.3f;
		base.transform.position = mStartPos;
		base.gameObject.MoveTo(mEndPos, 0.3f, 0f, EaseType.linear);
		float startTime2 = Time.realtimeSinceStartup;
		while (Time.realtimeSinceStartup - startTime2 < mTimeout)
		{
			yield return null;
		}
		base.gameObject.MoveTo(mStartPos, 0.3f, 0f, EaseType.linear);
		startTime2 = Time.realtimeSinceStartup;
		while (Time.realtimeSinceStartup - startTime2 < 0.3f)
		{
			yield return null;
		}
		m_DisplayingMessage = false;
	}
}
