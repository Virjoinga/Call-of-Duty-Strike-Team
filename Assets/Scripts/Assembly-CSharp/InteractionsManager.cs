using System.Collections.Generic;
using UnityEngine;

public class InteractionsManager : SingletonMonoBehaviour
{
	private enum Status
	{
		CurrentlyPlaying_MustSee = 0,
		CurrentlyPlaying_Preferred = 1,
		CurrentlyPlaying_Nothing = 2
	}

	public enum TransState
	{
		None = 0,
		Into_Skip = 1,
		Out_Of_Skip = 2,
		Into_Solid = 3,
		Out_Of_Solid = 4
	}

	private const float kTransitionTime = 1.25f;

	private const float kTransitionSolidTime = 0f;

	public bool IsSkipping;

	private Status mState = Status.CurrentlyPlaying_Nothing;

	private Interaction mCurrentMustSee;

	private GameObject mLastSkippedGO;

	private Interaction mCurrentPreferSee;

	private TransState mTransState;

	private float mTimeSinceTransition;

	private float mTransScale = 1f;

	private List<Interaction> mActionList = new List<Interaction>();

	private List<Interaction> mQueuedActions = new List<Interaction>();

	public static InteractionsManager Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<InteractionsManager>();
		}
	}

	public static bool HasInstance
	{
		get
		{
			return SingletonMonoBehaviour.GetSingletonInstance<InteractionsManager>() != null;
		}
	}

	public TransState TransitionState
	{
		get
		{
			return mTransState;
		}
	}

	public float TimeSinceTransition
	{
		get
		{
			return mTimeSinceTransition;
		}
	}

	public List<Interaction> QueuedActions
	{
		get
		{
			return mQueuedActions;
		}
	}

	public List<Interaction> CurrentActions
	{
		get
		{
			return mActionList;
		}
	}

	public Interaction CurrentMustSeeAction
	{
		get
		{
			return mCurrentMustSee;
		}
	}

	public Interaction CurrentPreferSeeAction
	{
		get
		{
			return mCurrentPreferSee;
		}
	}

	public string StateString
	{
		get
		{
			return mState.ToString();
		}
	}

	public void SkipCurrentMustSeeAction()
	{
		if (!IsSkipping && mCurrentMustSee != null && mTransState == TransState.None && mCurrentMustSee.bSkippable)
		{
			mTimeSinceTransition = 1.25f;
			mTransState = TransState.Into_Skip;
			VolumeGroupFader volumeGroupFader = base.gameObject.AddComponent<VolumeGroupFader>();
			volumeGroupFader.VolumeGroupToFade = SoundFXData.VolumeGroup.Cutscene;
			volumeGroupFader.TimeToFade = 1.25f;
			volumeGroupFader.DesiredVolume = 0f;
			IsSkipping = true;
		}
	}

	public void TransitionToSolid(float transitionTime)
	{
		if (mTransState == TransState.None)
		{
			mTransScale = 1.25f / transitionTime;
			mTimeSinceTransition = 1.25f;
			mTransState = TransState.Into_Solid;
		}
	}

	public void TransitionFromSolid(float transitionTime)
	{
		if (mTransState == TransState.None)
		{
			mTransScale = 1.25f / transitionTime;
			mTimeSinceTransition = 0f;
			mTransState = TransState.Out_Of_Solid;
			if (EffectsController.Instance != null)
			{
				EffectsController.Instance.Effects.CameraTransitionRamp.Evaluate(0f);
			}
		}
	}

	private void OnSkipPressed()
	{
		if (mState == Status.CurrentlyPlaying_MustSee && mCurrentMustSee != null)
		{
			SkipCurrentMustSeeAction();
		}
	}

	private void LateUpdate()
	{
		switch (mTransState)
		{
		case TransState.Into_Skip:
		case TransState.Into_Solid:
			mTimeSinceTransition -= Time.deltaTime * mTransScale;
			if (mTimeSinceTransition <= 0f)
			{
				mTimeSinceTransition = 0f;
				if (GameController.Instance != null)
				{
					GameController.Instance.UpdateTransitionEffect();
				}
				if (mTransState == TransState.Into_Skip)
				{
					InternalSkip();
				}
				else
				{
					mTransState = TransState.None;
				}
			}
			break;
		case TransState.Out_Of_Skip:
		case TransState.Out_Of_Solid:
			mTimeSinceTransition += Time.deltaTime * mTransScale;
			if (mTimeSinceTransition >= 1.25f)
			{
				if (GameController.Instance != null)
				{
					GameController.Instance.UpdateTransitionEffect();
				}
				IsSkipping = false;
				if (mTransState == TransState.Out_Of_Skip)
				{
					SoundManager.Instance.SetVolumeGroup(SoundFXData.VolumeGroup.Cutscene, 1f);
				}
				mTransState = TransState.None;
			}
			break;
		}
	}

	public bool CanIControlTheCamera(GameObject go, Task task, Actor actor)
	{
		bool result = true;
		ActionComponent.ActionType actionType = ActionComponent.ActionType.Ignore;
		if (go != null)
		{
			ActionComponent componentInChildren = go.GetComponentInChildren<ActionComponent>();
			if (componentInChildren != null)
			{
				actionType = componentInChildren.Type;
			}
			else
			{
				SetPieceModule componentInChildren2 = go.GetComponentInChildren<SetPieceModule>();
				if (componentInChildren2 != null)
				{
					actionType = componentInChildren2.ActionType;
				}
			}
		}
		if (IsCurrentlyPlaying(go, task))
		{
			result = true;
		}
		else
		{
			switch (mState)
			{
			case Status.CurrentlyPlaying_MustSee:
				result = true;
				break;
			case Status.CurrentlyPlaying_Preferred:
				if (actionType == ActionComponent.ActionType.PreferToSee)
				{
					result = true;
				}
				break;
			case Status.CurrentlyPlaying_Nothing:
				result = true;
				break;
			}
		}
		return result;
	}

	private bool IsTheCorrectUnitSelected(Actor actor, bool isAMustSee)
	{
		if (actor == null)
		{
			return false;
		}
		if (isAMustSee)
		{
			return true;
		}
		if (GameController.Instance.IsFirstPerson && actor != GameController.Instance.mFirstPersonActor)
		{
			return false;
		}
		return GameplayController.instance.IsSelected(actor);
	}

	public bool CanIPlayAction(GameObject go, Task task)
	{
		bool result = true;
		ActionComponent componentInChildren = go.GetComponentInChildren<ActionComponent>();
		if (componentInChildren != null)
		{
			switch (mState)
			{
			case Status.CurrentlyPlaying_MustSee:
				if (componentInChildren.Type == ActionComponent.ActionType.MustSee)
				{
					Interaction item = new Interaction(go, task, componentInChildren);
					mQueuedActions.Add(item);
				}
				result = false;
				break;
			case Status.CurrentlyPlaying_Preferred:
			case Status.CurrentlyPlaying_Nothing:
				result = true;
				break;
			}
		}
		return result;
	}

	public bool IsPlayingCutscene()
	{
		if (mCurrentMustSee != null)
		{
			GameObject gameObj = mCurrentMustSee.GameObj;
			if (gameObj != null)
			{
				SetPieceModule componentInChildren = gameObj.GetComponentInChildren<SetPieceModule>();
				if (componentInChildren != null)
				{
					return true;
				}
			}
		}
		if (CinematicHelper.IsInCinematic)
		{
			return true;
		}
		return false;
	}

	public bool AllowFirstPersonAnims()
	{
		if (CinematicHelper.IsInCinematic && CinematicHelper.AllowFirstPersonAnims)
		{
			return true;
		}
		return !IsPlayingCutscene();
	}

	public void RegisterAction(GameObject go, ActionComponent.ActionType actType)
	{
		AddInteraction(go, null, null, actType);
	}

	public void RegisterAction(GameObject go, Task task)
	{
		ActionComponent componentInChildren = go.GetComponentInChildren<ActionComponent>();
		AddInteraction(go, task, componentInChildren, ActionComponent.ActionType.Ignore);
	}

	public bool ChangeActionType(GameObject go, Task task, ActionComponent.ActionType actType)
	{
		if (task != null)
		{
			if (task.TaskActionType == actType)
			{
				return true;
			}
			task.TaskActionType = actType;
		}
		Interaction interaction = FindInteraction(go, task);
		if (interaction == null)
		{
			if (mCurrentMustSee != null && actType == ActionComponent.ActionType.MustSee)
			{
				return false;
			}
			AddInteraction(go, task, null, ActionComponent.ActionType.Ignore);
		}
		else if (actType == ActionComponent.ActionType.Ignore)
		{
			RemoveInteraction(interaction);
		}
		return true;
	}

	public void FinishedAction(GameObject go, Task task)
	{
		Interaction interAct = FindInteraction(go, task);
		RemoveInteraction(interAct);
	}

	public static bool IsBusy()
	{
		if (Instance != null && Instance.CurrentMustSeeAction != null)
		{
			return true;
		}
		return false;
	}

	private Interaction FindInteraction(GameObject go, Task task)
	{
		foreach (Interaction mAction in mActionList)
		{
			if (mAction.GameObj != null && go != null && mAction.GameObj == go)
			{
				return mAction;
			}
			if (mAction.GameTask != null && task != null && mAction.GameTask == task)
			{
				return mAction;
			}
		}
		return null;
	}

	private void AddInteraction(GameObject go, Task task, ActionComponent ac, ActionComponent.ActionType forcedActionType)
	{
		ActionComponent.ActionType actionType = ActionComponent.ActionType.Ignore;
		bool flag = true;
		if (task != null && task.TaskActionType == ActionComponent.ActionType.Ignore)
		{
			flag = false;
		}
		if (ac == null && task == null && forcedActionType == ActionComponent.ActionType.Ignore)
		{
			flag = false;
		}
		if (!flag)
		{
			return;
		}
		Interaction item = new Interaction(go, task, ac);
		if (forcedActionType != ActionComponent.ActionType.Ignore)
		{
			actionType = forcedActionType;
		}
		else if (ac != null)
		{
			actionType = ac.Type;
		}
		else if (task != null)
		{
			actionType = task.TaskActionType;
		}
		else
		{
			SetPieceModule componentInChildren = GetComponentInChildren<SetPieceModule>();
			if (componentInChildren != null)
			{
				actionType = componentInChildren.ActionType;
			}
		}
		switch (actionType)
		{
		case ActionComponent.ActionType.MustSee:
			mCurrentMustSee = item;
			mState = Status.CurrentlyPlaying_MustSee;
			break;
		case ActionComponent.ActionType.PreferToSee:
			if (mCurrentPreferSee == null)
			{
				mCurrentPreferSee = item;
				mState = Status.CurrentlyPlaying_Preferred;
			}
			break;
		}
		mActionList.Add(item);
	}

	private void RemoveInteraction(Interaction interAct)
	{
		if (interAct != null)
		{
			mActionList.Remove(interAct);
			if (interAct == mCurrentMustSee)
			{
				mCurrentMustSee = null;
				mState = Status.CurrentlyPlaying_Nothing;
			}
			else if (interAct == mCurrentPreferSee)
			{
				mCurrentPreferSee = null;
				mState = Status.CurrentlyPlaying_Nothing;
			}
		}
	}

	private void InternalSkip()
	{
		if (mCurrentMustSee != null)
		{
			GameObject gameObj = mCurrentMustSee.GameObj;
			if (gameObj != null)
			{
				SetPieceModule componentInChildren = gameObj.GetComponentInChildren<SetPieceModule>();
				if (componentInChildren != null)
				{
					componentInChildren.Skip();
				}
			}
			mLastSkippedGO = gameObj;
		}
		mTimeSinceTransition = 0f;
		mTransState = TransState.Out_Of_Skip;
		InternalPostSkip();
	}

	private void InternalPostSkip()
	{
		if (mLastSkippedGO != null)
		{
			SetPieceModule componentInChildren = mLastSkippedGO.GetComponentInChildren<SetPieceModule>();
			if (componentInChildren != null)
			{
				componentInChildren.PostSkip();
			}
			mLastSkippedGO = null;
		}
	}

	private bool IsCurrentlyPlaying(GameObject go, Task task)
	{
		if (mState == Status.CurrentlyPlaying_MustSee)
		{
			if (CurrentMustSeeAction.GameObj == go || CurrentMustSeeAction.GameTask == task)
			{
				return true;
			}
		}
		else if (mState == Status.CurrentlyPlaying_Preferred && (CurrentPreferSeeAction.GameObj == go || CurrentPreferSeeAction.GameTask == task))
		{
			return true;
		}
		return false;
	}
}
