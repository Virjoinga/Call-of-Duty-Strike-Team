using System;
using System.Collections.Generic;
using UnityEngine;

public class GlobalUnrestController : SingletonMonoBehaviour, iSwrveUpdatable, ISaveLoad
{
	public enum League
	{
		Iron = 0,
		Bronze = 1,
		Silver = 2,
		Gold = 3,
		Platinum = 4,
		Master = 5
	}

	private const string kGMGTimerName = "GMGTimerName";

	private const string kGMGReminderName = "GMGReminder";

	private const string GlobalUnrestKey = "Flashpoint.GlobalUnrest";

	public const int MaxFlashpointMissions = 8;

	public const int CriticalAge = 900;

	public const uint LeaderboardResetInterval = 604800u;

	private const int PLAYER_AWARD = 10;

	public static bool DebugOn;

	private float m_GlobalUnrest;

	public int UpdateIntervalInSeconds = 60;

	public float UnreastIncreaseOnSuccessfulMission = 1.5f;

	public float UnreastDecreaseRate = 0.01f;

	public int MinTimeToStayActiveInSeconds = 1800;

	public int MaxTimeToStayActiveInSeconds = 3600;

	public int MinFlashpointMissionsActive = 1;

	public int MaxFlashpointMissionsActive = 3;

	private int m_SecondsToNextReset;

	private FlashpointData[] m_FlashPoints = new FlashpointData[8];

	private GMGPlayerData m_GMGPlayerData = new GMGPlayerData();

	private int[] LeagueScoreThreshold = new int[6] { 0, 20000, 40000, 80000, 120000, 200000 };

	private float[] LeagueScoreMultiplier = new float[6] { 1f, 1f, 1.5f, 2f, 2.5f, 3f };

	public int NumLeagues
	{
		get
		{
			return Enum.GetNames(typeof(League)).Length;
		}
	}

	public static GlobalUnrestController Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<GlobalUnrestController>();
		}
	}

	public int SecondsToNextReset
	{
		get
		{
			return m_SecondsToNextReset;
		}
	}

	public int CurrentLeague
	{
		get
		{
			return (int)m_GMGPlayerData.League;
		}
	}

	public int CurrentScore
	{
		get
		{
			return m_GMGPlayerData.Score;
		}
	}

	public float CurrentScoreMultiplier
	{
		get
		{
			return LeagueScoreMultiplier[CurrentLeague];
		}
	}

	protected override void Awake()
	{
		base.Awake();
	}

	private void Start()
	{
		UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
		for (int i = 0; i < 8; i++)
		{
			m_FlashPoints[i] = new FlashpointData();
		}
		for (MissionListings.eMissionID eMissionID = MissionListings.eMissionID.MI_MISSION_01; eMissionID < MissionListings.MI_MISSION_MAX; eMissionID++)
		{
			MissionData missionData = MissionListings.Instance.Mission(eMissionID);
			if (missionData != null && missionData.FlashPointIndex >= 0)
			{
				m_FlashPoints[missionData.FlashPointIndex].Mission = missionData;
			}
		}
		if (m_GMGPlayerData.NextReset == 0)
		{
			m_GMGPlayerData.NextReset = (int)CalculateNextReset(604800u);
		}
	}

	public static uint CalculateNextReset(uint resetInterval)
	{
		uint secondsSinceUnixEpoch = TimeUtils.GetSecondsSinceUnixEpoch(new DateTime(2013, 11, 18, 8, 0, 0, DateTimeKind.Utc));
		uint secondsSinceUnixEpoch2 = TimeUtils.GetSecondsSinceUnixEpoch();
		uint num = (secondsSinceUnixEpoch2 - secondsSinceUnixEpoch) / resetInterval;
		uint num2 = resetInterval * (1 + num);
		return secondsSinceUnixEpoch + num2;
	}

	private League CalculateLeagueFromScore(int score)
	{
		for (int num = LeagueScoreThreshold.Length - 1; num >= 0; num--)
		{
			if (score >= LeagueScoreThreshold[num])
			{
				return (League)num;
			}
		}
		return League.Iron;
	}

	private void OnEnable()
	{
		if (EventHub.Instance != null)
		{
			EventHub.Instance.OnEndMission += MissionComplete;
		}
	}

	private void OnDisable()
	{
		if (EventHub.Instance != null)
		{
			EventHub.Instance.OnEndMission -= MissionComplete;
		}
	}

	private void Update()
	{
	}

	private void ActivateNewFlashpointMission()
	{
		int[] array = new int[8];
		int[] array2 = new int[8];
		for (int i = 0; i < 8; i++)
		{
			MissionData mission = m_FlashPoints[i].Mission;
			if (mission != null)
			{
				array[i] = m_FlashPoints[i].timeLastMadeActive;
				array2[i] = i;
			}
			else
			{
				array[i] = int.MaxValue;
				array2[i] = -1;
			}
		}
		Array.Sort(array, array2);
		int num = UnityEngine.Random.Range(0, 2);
		int num2 = array2[num];
		if (num2 >= 0)
		{
			FlashpointData flashpointData = m_FlashPoints[num2];
			flashpointData.isActive = true;
			flashpointData.timeLastMadeActive = (int)TimeUtils.GetSecondsSinceUnixEpoch();
			flashpointData.timeToStayActive = UnityEngine.Random.Range(MinTimeToStayActiveInSeconds, MaxTimeToStayActiveInSeconds);
			int num3 = -1;
			int count = flashpointData.Mission.Sections.Count;
			do
			{
				num3 = UnityEngine.Random.Range(0, count);
			}
			while (num3 == flashpointData.selectedSection && count > 1);
			flashpointData.selectedSection = num3;
			MissionManager.Instance.SetFlashpointMissionActive(num2, true);
			EventHub.Instance.Report(new Events.NewFlashpointActive(num2));
		}
	}

	public void MissionComplete(object sender, Events.EndMission args)
	{
		int flashPointIndex = MissionListings.Instance.Mission(args.MissionId).FlashPointIndex;
		int score = StatsHelper.CurrentMissionScore();
		OnFlashpointMissionComplete(flashPointIndex, score);
	}

	private void OnFlashpointMissionComplete(int flashpointIndex, int score)
	{
		if (flashpointIndex >= 0)
		{
			m_FlashPoints[flashpointIndex].isActive = false;
			m_GlobalUnrest += UnreastIncreaseOnSuccessfulMission;
			m_GMGPlayerData.Score += score;
		}
	}

	public int GetTimeRemainingInSeconds(int index)
	{
		if (index >= 0 && m_FlashPoints[index].isActive)
		{
			int num = (int)TimeUtils.GetSecondsSinceUnixEpoch() - m_FlashPoints[index].timeLastMadeActive;
			int timeToStayActive = m_FlashPoints[index].timeToStayActive;
			if (timeToStayActive > num)
			{
				return timeToStayActive - num;
			}
		}
		return 0;
	}

	public MissionData GetMissionData(int index)
	{
		MissionData result = null;
		if (index >= 0 && m_FlashPoints[index].isActive)
		{
			result = m_FlashPoints[index].Mission;
		}
		return result;
	}

	public int SectionToPlay(MissionData data)
	{
		if (data.FlashPointIndex >= 0)
		{
			return m_FlashPoints[data.FlashPointIndex].selectedSection;
		}
		return -1;
	}

	public void UpdateFromSwrve()
	{
		UpdateIntervalInSeconds = Bedrock.GetRemoteVariableAsInt("GlobalUnrest.UpdateInterval", UpdateIntervalInSeconds);
		UnreastIncreaseOnSuccessfulMission = Bedrock.GetRemoteVariableAsFloat("GlobalUnrest.UnreastIncrease", UnreastIncreaseOnSuccessfulMission);
		UnreastDecreaseRate = Bedrock.GetRemoteVariableAsFloat("GlobalUnrest.UnreastDecrease", UnreastDecreaseRate);
		MinTimeToStayActiveInSeconds = Bedrock.GetRemoteVariableAsInt("GlobalUnrest.MinTimeToStayActive", MinTimeToStayActiveInSeconds);
		MaxTimeToStayActiveInSeconds = Bedrock.GetRemoteVariableAsInt("GlobalUnrest.MaxTimeToStayActive", MaxTimeToStayActiveInSeconds);
		MinFlashpointMissionsActive = Bedrock.GetRemoteVariableAsInt("GlobalUnrest.MinFlashpointMissionsActive", MinFlashpointMissionsActive);
		MaxFlashpointMissionsActive = Bedrock.GetRemoteVariableAsInt("GlobalUnrest.MaxFlashpointMissionsActive", MaxFlashpointMissionsActive);
		Dictionary<string, string> resourceDictionary;
		if (!Bedrock.GetRemoteUserResources("GMGLeagues", out resourceDictionary))
		{
			return;
		}
		foreach (int value in Enum.GetValues(typeof(League)))
		{
			LeagueScoreThreshold[value] = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "Threshold_" + (League)value, LeagueScoreThreshold[value]);
			LeagueScoreMultiplier[value] = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "ScoreMultiplier_" + (League)value, LeagueScoreMultiplier[value]);
		}
	}

	public void Save()
	{
		SecureStorage.Instance.SetFloat("Flashpoint.GlobalUnrest", m_GlobalUnrest);
		SaveLoadHelper.SaveArray("Flash", m_FlashPoints);
		m_GMGPlayerData.Save();
	}

	public void Load()
	{
		SecureStorage.Instance.GetFloat("Flashpoint.GlobalUnrest", ref m_GlobalUnrest);
		SaveLoadHelper.LoadArray("Flash", m_FlashPoints);
		m_GMGPlayerData.Load();
	}

	public void Reset()
	{
		m_GlobalUnrest = 0f;
		SaveLoadHelper.ResetArray(m_FlashPoints);
		m_GMGPlayerData.Reset();
	}
}
