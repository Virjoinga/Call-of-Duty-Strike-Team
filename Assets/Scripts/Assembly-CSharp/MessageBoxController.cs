using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using UnityEngine;

public class MessageBoxController : SingletonMonoBehaviour
{
	private class MessageBoxQueueData
	{
		public MessageBox Box;

		public MonoBehaviour CallbackScript;

		public string Title;

		public string Body;

		public string OkAction;

		public string CancelAction;

		public string FacebookAction;

		public string TwitterAction;

		public bool Hint;

		public bool Translated;
	}

	public MessageBox MsgBoxPrefab;

	public MessageBox LevelUpMsgBoxPrefab;

	public MessageBox HintMsgBoxPrefab;

	public MessageBox ActivateMsgBoxPrefab;

	public MessageBox DailyRewardMsgBoxPrefab;

	public MessageBox CloudConflictMsgBoxPrefab;

	public MessageBox ChallengeMsgBoxPrefab;

	public MessageBox ImageListMessageBoxPrefab;

	public MessageBox UnsupportedMsgBoxPrefab;

	public MessageBox GlobalLeagueMsgBoxPrefab;

	public MessageBox TBFInfoMsgBoxPrefab;

	public Vector2 MinSize = new Vector2(-1f, -1f);

	public bool AutoSize = true;

	private static bool m_HasSeenAppUpdateDialogueThisBoot;

	private List<MessageBoxQueueData> mMessageQueue;

	private MessageBox mCurrentMessageBox;

	private NumberFormatInfo mNfi;

	private MonoBehaviour mCallbackScript;

	private GameObject mMessageScript;

	private string mMessage;

	private string mOkAction;

	private string mCancelAction;

	private string mTwitterAction;

	private string mFacebookAction;

	private bool mMessageActive;

	private bool mHintBox;

	private bool mDoingShareDialogue;

	private bool mShareOptionDoneFacebook;

	private bool mShareOptionDoneTwitter;

	private string m_ShownDeviceMessage = "None";

	public static MessageBoxController Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<MessageBoxController>();
		}
	}

	public bool IsAnyMessageActive
	{
		get
		{
			return mMessageActive;
		}
	}

	protected override void AwakeOnce()
	{
		base.AwakeOnce();
		mNfi = GlobalizationUtils.GetNumberFormat(0);
		mMessageQueue = new List<MessageBoxQueueData>();
		UnityEngine.Object.DontDestroyOnLoad(this);
	}

	private void OnEnable()
	{
		ActStructure.OnMissionStart += MissionStarted;
	}

	private void OnDisable()
	{
		ActStructure.OnMissionStart -= MissionStarted;
	}

	private void MissionStarted(object sender, EventArgs args)
	{
	}

	public void DoUnsupportedDeviceDialogue()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(UnsupportedMsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_LOW_SPEC_TITLE", "S_LOW_SPEC_BODY_IPHONE4", false);
		}
	}

	public void DoRateAppDialogue()
	{
		if (!mMessageActive)
		{
			SwrveEventsUI.SeenRateUs();
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_RATE_APP_BUTTON_POSITIVE", "S_RATE_APP_BUTTON_NEGATIVE");
			messageBox.Results = SetUpResultsForTwoButtons();
			SecureStorage.Instance.ResetActivateDialogMissionCounter();
			DoMessageBox(messageBox, this, "MessageBoxResultRateApp", string.Empty, string.Empty, string.Empty, "S_RATE_APP_TITLE", "S_RATE_APP_BODY", false);
		}
	}

	public void DoKInviteDialogue()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_KINVITE_BUTTON_POSITIVE", "S_KINVITE_BUTTON_NEGATIVE");
			messageBox.Results = SetUpResultsForTwoButtons();
			DoMessageBox(messageBox, this, "MessageBoxResultKInvite", "MessageBoxResultKInviteDeclined", string.Empty, string.Empty, "S_KINVITE_TITLE", "S_KINVITE_BODY", false);
		}
	}

	public void DoKInviteDeclinedDialog()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_KINVITE_DECLINED_TITLE", "S_KINVITE_DECLINED_BODY", false);
		}
	}

	public void DoActivateDialogue()
	{
		if (!mMessageActive)
		{
			SwrveEventsUI.SeenPromo();
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(ActivateMsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_ACTI_PROMO_ACCEPT", "S_ACTI_PROMO_DECLINE");
			messageBox.Results = SetUpResultsForTwoButtons();
			DoMessageBox(messageBox, this, "SignupForActivate", string.Empty, string.Empty, string.Empty, "S_ACTI_PROMO_TITLE", "S_ACTI_PROMO_BODY", false);
			SecureStorage.Instance.LogActivateDialogShown();
			SecureStorage.Instance.ResetActivateDialogMissionCounter();
		}
	}

	public void DoActivateLoggedOffWarning()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_ACTIVATE_LOGGEDIN_TITLE", "S_ACTIVATE_LOGGEDOFF_WARNING", false);
		}
	}

	public void DoActivateLoggedInWarning()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, Language.Get("S_ACTIVATE_LOGGEDIN_TITLE"), Language.GetFormatString("S_ACTIVATE_LOGGEDIN_WARNING", Bedrock.getUsername()), true);
		}
	}

	public void DoKInviteReward()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			string bodyKey = "Congrats uber tester you have just received " + GameSettings.Instance.KInviteRewardsToShow + " for buddying up with our invite system";
			string titleKey = "K-Invite Reward!";
			DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, titleKey, bodyKey, true);
			GameSettings.Instance.KInviteRewardsToShow = 0;
		}
	}

	public bool CheckActivateDialogue()
	{
		return false;
	}

	public bool CheckDailyRewardDialogue()
	{
		if (!mMessageActive)
		{
			bool flag = StatsHelper.PlayedToday();
			if ((!flag && StatsHelper.ConsecutiveDaysPlayed() >= 2 && SynchronizedClock.Instance.IsSynchronized) || (flag && SecureStorage.Instance.NeedsDailyReward))
			{
				string okAction = Language.Get("S_DAILY_REWARD_BUTTON_TEXT").ToUpper();
				MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(DailyRewardMsgBoxPrefab);
				messageBox.SetupForCustomMsg(okAction);
				messageBox.Results = SetUpResultsForOneButton();
				DoMessageBox(messageBox, this, string.Empty, string.Empty, string.Empty, string.Empty, "S_DAILY_REWARD_TITLE", string.Empty, false);
			}
			if (!flag)
			{
				DailyRewardMessageBox.ScheduleNotification();
			}
			return true;
		}
		return false;
	}

	public bool CheckAppUpdateDialogue()
	{
		if (SwrveServerVariables.Instance.IsNewAppVersionAvailable() && !m_HasSeenAppUpdateDialogueThisBoot)
		{
			Debug.Log("Showing app update dialog");
			bool flag = SwrveServerVariables.Instance.IsAllowedToPlayWithoutUpdate();
			DoAppUpdateDialogue(flag);
			m_HasSeenAppUpdateDialogueThisBoot = true;
			return flag;
		}
		return true;
	}

	public void DoAppUpdateDialogue(bool allowProgress)
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			if (allowProgress)
			{
				messageBox.SetupForCustomMsg("S_APP_UPDATE_POSITIVE", "S_APP_UPDATE_NEGATIVE");
				messageBox.Results = SetUpResultsForTwoButtons();
			}
			else
			{
				messageBox.SetupForCustomMsg("S_APP_UPDATE_POSITIVE");
				messageBox.Results = SetUpResultsForOneButton();
			}
			DoMessageBox(messageBox, this, "MessageBoxResultUpdate", string.Empty, string.Empty, string.Empty, "S_APP_UPDATE_TITLE", "S_APP_UPDATE_BODY", false);
		}
	}

	public void DoInAppPurchaseDisabledDialogue()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_INAPP_DISABLED_TITLE", "S_INAPP_DISABLED_BODY", false);
		}
	}

	public void DoAttachmentsCommingSoonDialogue()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_ATTACHMENTS_TITLE", "S_ATTACHMENTS_BODY", false);
		}
	}

	public void DoSupportShopCommingSoonDialogue()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_SUPPORT_SHOP_TITLE", "S_SUPPORT_SHOP_BODY", false);
		}
	}

	public void DoFPPOnlyDialogue()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_MOVABLEFIREBUTTON_MUSTBEINFPPTITLE", "S_MOVABLEFIREBUTTON_MUSTBEINFPP", false);
		}
	}

	public bool MakeGoodMessage(Bedrock.MakeGoodRewardInfo info, MonoBehaviour callbackScript, string onOk)
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			string bodyKey = "Unknown";
			switch (info.RewardType)
			{
			case 1:
				bodyKey = Language.GetFormatString("S_MAKE_GOOD_CONTENT", CommonHelper.HardCurrencySymbol(), info.Value.ToString());
				break;
			case 2:
				bodyKey = Language.GetFormatString("S_MAKE_GOOD_CONTENT", info.Value.ToString(), Language.Get("S_RESULT_XP"));
				break;
			}
			DoMessageBox(messageBox, callbackScript, onOk, string.Empty, string.Empty, string.Empty, Language.Get("S_MAKE_GOOD_TITLE"), bodyKey, true);
			return true;
		}
		return false;
	}

	public bool EmergencyMessage(string content, MonoBehaviour callbackScript, string onOk)
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, callbackScript, onOk, string.Empty, string.Empty, string.Empty, Language.Get("S_EMERGENCY_MESSAGE_TITLE"), content, true);
			return true;
		}
		return false;
	}

	public void NeedToBeOnline()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_ELITE_LINK_ERROR_TITLE", "S_ELITE_LINK_ERROR_BODY", false);
		}
	}

	public void DoFailedSendFriendMessageDialogue()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_CHALLENGE_FRIEND_MESSAGE_FAILED_TITLE", "S_CHALLENGE_FRIEND_MESSAGE_FAILED_BODY", false);
		}
	}

	public void DoNoLeaderboardsDialog()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_NO_LEADERBOARDS_TITLE", "S_NO_LEADERBOARDS_CONNECTION_BODY", false);
		}
	}

	public void DoNoConnectionShareDialog()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_NET_NONETWORK_TITLE", "S_NET_NONETWORK_SOCIAL_BODY", false);
		}
	}

	public void DoLevelUpTutorialDialogue()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_LEVEL_UP_DIALOGUE_TUTORIAL_TITLE", "S_LEVEL_UP_DIALOGUE_TUTORIAL_BODY", false);
		}
	}

	public void DoLoadoutTutorialDialogue()
	{
		if (GameSettings.Instance.TimesInLoadoutScreen <= 0)
		{
			string empty = string.Empty;
			if (GameSettings.Instance.TimesInWeaponScreen == 0)
			{
				GameSettings.Instance.PlayerCash().AwardHardCashFreebie(SwrveServerVariables.Instance.InitialCurrency, "NewGame");
				empty = string.Format(Language.Get("S_BODY_LOADOUT"), CommonHelper.HardCurrencySymbol(), CommonHelper.HardCurrencySymbol(), SwrveServerVariables.Instance.InitialCurrency);
			}
			else
			{
				empty = string.Format(Language.Get("S_BODY_LOADOUT_2"), CommonHelper.HardCurrencySymbol());
			}
			GameSettings.Instance.TimesInLoadoutScreen++;
			SecureStorage.Instance.SaveGameSettings();
			if (!mMessageActive)
			{
				MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(UnsupportedMsgBoxPrefab);
				messageBox.SetupForCustomMsg("S_OKAY");
				messageBox.Results = SetUpResultsForOneButton();
				DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_HEADER_LOADOUT", empty, true);
			}
		}
	}

	public void DoGlobeEntryDialogue()
	{
		SecureStorage.Instance.TimesInGlobeScreen++;
		if (SecureStorage.Instance.TimesInGlobeScreen <= 1)
		{
			StartCoroutine(ShowGlobeEntryMessageBox());
		}
	}

	private IEnumerator ShowGlobeEntryMessageBox()
	{
		while (mMessageActive)
		{
			yield return new WaitForEndOfFrame();
		}
		HintMessageBox messageBox = (HintMessageBox)UnityEngine.Object.Instantiate(HintMsgBoxPrefab);
		messageBox.SetupForCustomMsg("S_OKAY");
		messageBox.LoadImageAndLayoutComponents(HintMessageBox.ImageLayout.Left, "Tutorial_Images/GMG_Globe_Image");
		messageBox.Results = SetUpResultsForOneButton();
		DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_HEADER_GLOBE", Language.Get("S_BODY_GLOBE"), true);
	}

	public void DoLoadoutWeaponDialogue()
	{
		if (GameSettings.Instance.TimesInWeaponScreen <= 0)
		{
			GameSettings.Instance.TimesInWeaponScreen++;
			SecureStorage.Instance.SaveGameSettings();
			if (!mMessageActive)
			{
				MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
				messageBox.SetupForCustomMsg("S_OKAY");
				messageBox.Results = SetUpResultsForOneButton();
				DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_HEADER_WEAP", "S_BODY_WEAP", false);
			}
		}
	}

	public void DoLoadoutPerkDialogue()
	{
		if (GameSettings.Instance.TimesInPerkScreen <= 0)
		{
			GameSettings.Instance.TimesInPerkScreen++;
			SecureStorage.Instance.SaveGameSettings();
			if (!mMessageActive)
			{
				MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
				messageBox.SetupForCustomMsg("S_OKAY");
				messageBox.Results = SetUpResultsForOneButton();
				DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_HEADER_PERK", "S_BODY_PERK", false);
			}
		}
	}

	public void DoNewDownloadDialogue()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_HEADER_DOWNLOAD", "S_BODY_DOWNLOAD", false);
		}
	}

	public void DoGMGUnlockedDialogue()
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_HEADER_UNLOCK", "S_BODY_UNLOCK", false);
		}
	}

	public void DoHintDialogue(string hintTitleKey, string hintBodyKey, HintMessageBox.ImageLayout layout, string pathToResourcesImage, GameObject callbackScript, string onOk)
	{
		if (!mMessageActive)
		{
			HintMessageBox hintMessageBox = (HintMessageBox)UnityEngine.Object.Instantiate(HintMsgBoxPrefab);
			hintMessageBox.SetupForCustomMsg("S_OKAY");
			hintMessageBox.LoadImageAndLayoutComponents(layout, pathToResourcesImage);
			hintMessageBox.Results = SetUpResultsForOneButton();
			mMessageScript = callbackScript;
			mMessage = onOk;
			DoMessageBox(hintMessageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, hintTitleKey, hintBodyKey, false, true);
		}
	}

	public void DoFrontendHintDialogue(string hintTitleKey, string hintBodyKey, HintMessageBox.ImageLayout layout, string pathToResourcesImage, GameObject callbackScript, string onOk)
	{
		if (!mMessageActive)
		{
			HintMessageBox hintMessageBox = (HintMessageBox)UnityEngine.Object.Instantiate(HintMsgBoxPrefab);
			hintMessageBox.SetupForCustomMsg("S_OKAY");
			hintMessageBox.LoadImageAndLayoutComponents(layout, pathToResourcesImage);
			hintMessageBox.Results = SetUpResultsForOneButton();
			mMessageScript = callbackScript;
			mMessage = onOk;
			DoMessageBox(hintMessageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, hintTitleKey, hintBodyKey, false, false);
		}
	}

	public void DoOptionsHintDialogue(string hintTitleKey, string hintBodyKey, HintMessageBox.ImageLayout layout, string pathToResourcesImage, MonoBehaviour caller, string gyroOn, string gyroOff)
	{
		if (!mMessageActive)
		{
			HintMessageBox hintMessageBox = (HintMessageBox)UnityEngine.Object.Instantiate(HintMsgBoxPrefab);
			hintMessageBox.SetupForCustomMsg("S_YES", "S_NO");
			hintMessageBox.LoadImageAndLayoutComponents(layout, pathToResourcesImage);
			hintMessageBox.Results = SetUpResultsForTwoButtons();
			DoMessageBox(hintMessageBox, caller, gyroOn, gyroOff, string.Empty, string.Empty, hintTitleKey, hintBodyKey, false, true);
		}
	}

	public void DoContinueFromSaveDialogue(MonoBehaviour caller, string continueAction, string cancelAction)
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_YES", "S_NO");
			messageBox.Results = SetUpResultsForTwoButtons();
			DoMessageBox(messageBox, caller, continueAction, cancelAction, string.Empty, string.Empty, "S_CONTINUE_TITLE", "S_CONTINUE_BODY", false);
		}
	}

	public void DoEliteAccountLinkDialogue(MonoBehaviour caller, string okAction)
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			string formatString = Language.GetFormatString("S_ELITE_LINK_BODY", CommonHelper.HardCurrencySymbol(), SwrveServerVariables.Instance.EliteLinkReward.ToString());
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, caller, okAction, string.Empty, string.Empty, string.Empty, "S_ELITE_LINK_TITLE", formatString, true);
		}
	}

	public void DoEliteAppInstalledDialogue(MonoBehaviour caller, string okAction)
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_OKAY");
			string formatString = Language.GetFormatString("S_ELITE_APP_BODY", CommonHelper.HardCurrencySymbol(), SwrveServerVariables.Instance.EliteAppInstalledReward.ToString());
			messageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(messageBox, caller, okAction, string.Empty, string.Empty, string.Empty, "S_ELITE_APP_TITLE", formatString, true);
		}
	}

	public void DoCollectChallengeRewardDialogue(uint rewardAmount, string challengeName, ChallengeMedalType medal, MonoBehaviour caller, string okAction)
	{
		if (!mMessageActive)
		{
			ChallengeMessageBox challengeMessageBox = (ChallengeMessageBox)UnityEngine.Object.Instantiate(ChallengeMsgBoxPrefab);
			challengeMessageBox.SetupForCustomMsg("S_OKAY");
			challengeMessageBox.Setup(medal, rewardAmount);
			string text = Language.Get("S_CHALLENGE_REWARD_" + medal.ToString().ToUpper());
			string bodyKey = ((medal != 0) ? Language.GetFormatString("S_CHALLENGE_REWARD_BODY", text, challengeName) : Language.GetFormatString("S_CHALLENGE_REWARD_BODY_NO_MEDAL", challengeName));
			challengeMessageBox.Results = SetUpResultsForOneButton();
			DoMessageBox(challengeMessageBox, caller, okAction, string.Empty, string.Empty, string.Empty, "S_CHALLENGE_REWARD_TITLE", bodyKey, true);
		}
	}

	public void DoChallengeFriendMessageDialogue(MonoBehaviour caller, string okAction, string cancelAction, string recipientName, string message)
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_SEND", "S_CANCEL");
			messageBox.Results = SetUpResultsForTwoButtons();
			DoMessageBox(messageBox, caller, okAction, cancelAction, string.Empty, string.Empty, Language.GetFormatString("S_CHALLENGE_FRIEND_MESSAGE_TITLE", recipientName), message, true);
		}
	}

	public void ShowMigrateDialog(MonoBehaviour caller, string yesAction, string noAction)
	{
		if (mMessageActive && mCurrentMessageBox != null)
		{
			UnityEngine.Object.Destroy(mCurrentMessageBox.gameObject);
			mCurrentMessageBox = null;
			mMessageActive = false;
		}
		ClearMessageQueue();
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_YES", "S_NO");
			messageBox.Results = SetUpResultsForTwoButtons();
			DoMessageBox(messageBox, caller, yesAction, noAction, string.Empty, string.Empty, Language.Get("S_MIGRATE_TITLE"), Language.Get("S_MIGRATE_BODY"), true);
		}
	}

	public void DoCloudConflictDialog(MonoBehaviour caller, string localAction, string onlineAction, SecureStorageMetadata localData, SecureStorageMetadata onlineData)
	{
		if (!mMessageActive)
		{
			CloudConflictMessageBox cloudConflictMessageBox = (CloudConflictMessageBox)UnityEngine.Object.Instantiate(CloudConflictMsgBoxPrefab);
			cloudConflictMessageBox.SetupForCustomMsg("S_CLOUD_CONFLICT_ONLINE_BUTTON", "S_CLOUD_CONFLICT_LOCAL_BUTTON");
			cloudConflictMessageBox.SetupData(localData, onlineData);
			cloudConflictMessageBox.Results = SetUpResultsForTwoButtons();
			string bodyKey = Language.Get("S_CLOUD_CONFLICT_BODY");
			DoMessageBox(cloudConflictMessageBox, caller, localAction, onlineAction, string.Empty, string.Empty, Language.Get("S_CLOUD_CONFLICT_TITLE"), bodyKey, true);
		}
	}

	public void DoConfirmQuitDialogue(MonoBehaviour caller, string quitAction, string cancelAction)
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForDestructiveActionMsg("S_YES", "S_NO");
			messageBox.Results = SetUpResultsForTwoButtons();
			DoMessageBox(messageBox, caller, cancelAction, quitAction, string.Empty, string.Empty, "S_CONFIRM_QUIT_TITLE", "S_CONFIRM_QUIT_BODY", false);
		}
	}

	public void DoConfirmCloseGameDialogue(MonoBehaviour caller, string quitAction, string cancelAction)
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForDestructiveActionMsg("S_YES", "S_NO");
			messageBox.Results = SetUpResultsForTwoButtons();
			DoMessageBox(messageBox, caller, cancelAction, quitAction, string.Empty, string.Empty, "S_CONFIRM_CLOSE_GAME_TITLE", "S_CONFIRM_CLOSE_GAME_BODY", false);
		}
	}

	public void DoConfirmRestartDialogue(MonoBehaviour caller, string restartAction, string cancelAction)
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForDestructiveActionMsg("S_YES", "S_NO");
			messageBox.Results = SetUpResultsForTwoButtons();
			DoMessageBox(messageBox, caller, cancelAction, restartAction, string.Empty, string.Empty, "S_CONFIRM_RESTART_TITLE", "S_CONFIRM_RESTART_BODY", false);
		}
	}

	public void DoLevelUpDialogue(MonoBehaviour caller, string dismissAction, string shareAction, int oldLevel, int newLevel, int prestigeLevel, int maxLevel)
	{
		if (!mMessageActive)
		{
			LevelUpMessageBox levelUpMessageBox = (LevelUpMessageBox)UnityEngine.Object.Instantiate(LevelUpMsgBoxPrefab);
			if (OptimisationManager.CanUseOptmisation(OptimisationManager.OptimisationType.GByteDevice))
			{
				levelUpMessageBox.SetupForSharableMsg("S_CONTINUE");
				levelUpMessageBox.Results = SetUpResultWithShareOption();
			}
			else
			{
				levelUpMessageBox.SetupForStandardMsg();
				levelUpMessageBox.Results = SetUpResultsForOneButton();
			}
			levelUpMessageBox.SetNewLevel(oldLevel, newLevel, prestigeLevel, maxLevel);
			DoMessageBox(levelUpMessageBox, caller, dismissAction, shareAction, string.Empty, string.Empty, "S_LEVEL_UP_TITLE", string.Empty, false);
		}
	}

	public void DoPrestigeDialogue(MonoBehaviour caller, string dismissAction, string shareAction, int oldLevel, int newLevel, int prestigeLevel, int maxLevel)
	{
		if (!mMessageActive)
		{
			LevelUpMessageBox levelUpMessageBox = (LevelUpMessageBox)UnityEngine.Object.Instantiate(LevelUpMsgBoxPrefab);
			if (OptimisationManager.CanUseOptmisation(OptimisationManager.OptimisationType.GByteDevice))
			{
				levelUpMessageBox.SetupForSharableMsg("S_CONTINUE");
				levelUpMessageBox.Results = SetUpResultWithShareOption();
			}
			else
			{
				levelUpMessageBox.SetupForStandardMsg();
				levelUpMessageBox.Results = SetUpResultsForOneButton();
			}
			levelUpMessageBox.SetPrestigeLevel(oldLevel, newLevel, prestigeLevel, maxLevel);
			DoMessageBox(levelUpMessageBox, caller, dismissAction, shareAction, string.Empty, string.Empty, "S_LEVEL_UP_TITLE", string.Empty, false);
		}
	}

	public void DoProPerkDialogue(MonoBehaviour caller, string shareAction, Perk[] perks)
	{
		if (!mMessageActive && perks.Length > 0)
		{
			ImageListMessageBox imageListMessageBox = (ImageListMessageBox)UnityEngine.Object.Instantiate(ImageListMessageBoxPrefab);
			if (OptimisationManager.CanUseOptmisation(OptimisationManager.OptimisationType.GByteDevice))
			{
				imageListMessageBox.SetupForSharableMsg("S_CONTINUE");
				imageListMessageBox.Results = SetUpResultWithShareOption();
			}
			else
			{
				imageListMessageBox.SetupForStandardMsg();
				imageListMessageBox.Results = SetUpResultsForOneButton();
			}
			imageListMessageBox.SetupWithProPerk(perks);
			string titleKey = ((perks.Length <= 1) ? "S_PRO_PERK_UNLOCK_TITLE_PLURAL" : "S_PRO_PERK_UNLOCK_TITLE");
			DoMessageBox(imageListMessageBox, caller, string.Empty, shareAction, string.Empty, string.Empty, titleKey, string.Empty, false);
		}
	}

	public void DoBundleDialogue(MonoBehaviour caller, string shareAction, BundleDescriptor[] bundles)
	{
		if (!mMessageActive)
		{
			ImageListMessageBox imageListMessageBox = (ImageListMessageBox)UnityEngine.Object.Instantiate(ImageListMessageBoxPrefab);
			if (OptimisationManager.CanUseOptmisation(OptimisationManager.OptimisationType.GByteDevice))
			{
				imageListMessageBox.SetupForSharableMsg("S_CONTINUE");
				imageListMessageBox.Results = SetUpResultWithShareOption();
			}
			else
			{
				imageListMessageBox.SetupForStandardMsg();
				imageListMessageBox.Results = SetUpResultsForOneButton();
			}
			imageListMessageBox.SetupWithBundles(bundles);
			DoMessageBox(imageListMessageBox, caller, string.Empty, shareAction, string.Empty, string.Empty, "S_BUNDLE_PURCHASE_TITLE", string.Empty, false);
		}
	}

	public void DoPurchaseDialogue(MonoBehaviour caller, string confirmAction, string cancelAction, string equipment, int price, int numItems, int currencyTotal)
	{
		if (!mMessageActive)
		{
			char c = CommonHelper.HardCurrencySymbol();
			string format = AutoLocalize.Get("S_MID_GAME_PURCHASE_BODY");
			string arg = string.Format("{0}{1}", c, currencyTotal.ToString("N", mNfi));
			string okAction = string.Format("{0}{1}", c, price.ToString("N", mNfi));
			string bodyKey = string.Format(format, Language.Get(equipment).ToUpper(), numItems, arg);
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg(okAction, "S_NO");
			messageBox.Results = SetUpResultsForTwoButtons();
			DoMessageBox(messageBox, caller, confirmAction, cancelAction, string.Empty, string.Empty, "S_MID_GAME_PURCHASE_TITLE", bodyKey, true);
		}
	}

	public void DoNotEnoughSoftCurrencyDialogue(MonoBehaviour caller, string positiveAction)
	{
		if (!mMessageActive)
		{
			MenuSFX.Instance.BuyInsufficient.Play2D();
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_YES", "S_NO");
			messageBox.Results = SetUpResultsForTwoButtons();
			DoMessageBox(messageBox, caller, positiveAction, string.Empty, string.Empty, string.Empty, "S_NO_SOFT_CURRENCY_TITLE", "S_NO_SOFT_CURRENCY_BODY", false);
		}
	}

	public void DoNotEnoughHardCurrencyDialogue(MonoBehaviour caller, string positiveAction)
	{
		if (!mMessageActive)
		{
			MenuSFX.Instance.BuyInsufficient.Play2D();
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_YES", "S_NO");
			messageBox.Results = SetUpResultsForTwoButtons();
			string formatString = Language.GetFormatString("S_NO_HARD_CURRENCY_TITLE", CommonHelper.HardCurrencySymbol());
			string formatString2 = Language.GetFormatString("S_NO_HARD_CURRENCY_BODY", CommonHelper.HardCurrencySymbol());
			DoMessageBox(messageBox, caller, positiveAction, string.Empty, string.Empty, string.Empty, formatString, formatString2, true);
		}
	}

	public void DoNotEnoughHardCurrencyInGameDialogue(MonoBehaviour caller, string positiveAction, string equipment, int price, int numItems, int currencyTotal)
	{
		if (!mMessageActive)
		{
			MenuSFX.Instance.BuyInsufficient.Play2D();
			char c = CommonHelper.HardCurrencySymbol();
			string format = AutoLocalize.Get("S_NO_HARD_CURRENCY_IN_GAME_BODY");
			string arg = string.Format("{0}{1}", c, (price - currencyTotal).ToString("N", mNfi));
			string bodyKey = string.Format(format, Language.Get(equipment).ToUpper(), (numItems <= 1) ? string.Empty : (numItems + " "), arg);
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_YES", "S_NO");
			messageBox.Results = SetUpResultsForTwoButtons();
			DoMessageBox(messageBox, caller, positiveAction, string.Empty, string.Empty, string.Empty, "S_NO_HARD_CURRENCY_IN_GAME_TITLE", bodyKey, true);
		}
	}

	public void DoNotEnoughCurrencyDialogue(MonoBehaviour caller, string positiveAction)
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_YES", "S_NO");
			messageBox.Results = SetUpResultsForTwoButtons();
			DoMessageBox(messageBox, caller, positiveAction, string.Empty, string.Empty, string.Empty, "S_NO_CURRENCY_TITLE", "S_NO_CURRENCY_BODY", false);
		}
	}

	public void DoSocialBroadcastDialogue(string message, MonoBehaviour caller, string facebookAction, string twitterAction)
	{
		if (!mMessageActive)
		{
			if (!mDoingShareDialogue)
			{
				mShareOptionDoneFacebook = false;
				mShareOptionDoneTwitter = false;
				mDoingShareDialogue = true;
			}
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForSocialBroadcastMsg(!mShareOptionDoneFacebook, !mShareOptionDoneTwitter);
			messageBox.Results = SetUpResultsForSocial();
			DoMessageBox(messageBox, caller, string.Empty, string.Empty, facebookAction, twitterAction, Language.Get("S_SHARE_TITLE"), message, true);
		}
	}

	public void DoPurchaseNowDialogue(MonoBehaviour caller, string itemName, int price, string positiveAction)
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_YES", "S_NO");
			messageBox.Results = SetUpResultsForTwoButtons();
			string text = ((!itemName.StartsWith("S_")) ? itemName : AutoLocalize.Get(itemName.ToUpper()));
			string format = AutoLocalize.Get("S_PURCHASE_NOW_BODY");
			char c = CommonHelper.HardCurrencySymbol();
			string arg = string.Format("{0}{1}", c, price.ToString("N", mNfi));
			format = string.Format(format, text.ToUpper(), arg);
			DoMessageBox(messageBox, caller, positiveAction, string.Empty, string.Empty, string.Empty, "S_PURCHASE_NOW_TITLE", format, true);
		}
	}

	public void DoUnlockNowDialogue(MonoBehaviour caller, string itemName, int price, string positiveAction)
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForCustomMsg("S_YES", "S_NO");
			messageBox.Results = SetUpResultsForTwoButtons();
			string text = ((!itemName.StartsWith("S_")) ? itemName : AutoLocalize.Get(itemName.ToUpper()));
			string format = AutoLocalize.Get("S_UNLOCK_NOW_BODY");
			char c = CommonHelper.HardCurrencySymbol();
			string arg = string.Format("{0}{1}", c, price.ToString("N", mNfi));
			format = string.Format(format, text.ToUpper(), arg);
			DoMessageBox(messageBox, caller, positiveAction, string.Empty, string.Empty, string.Empty, "S_UNLOCK_NOW_TITLE", format, true);
		}
	}

	public void DoConfirmResetGameDialogue(MonoBehaviour caller, string action)
	{
		if (!mMessageActive)
		{
			MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(MsgBoxPrefab);
			messageBox.SetupForDestructiveActionMsg("S_YES", "S_NO");
			messageBox.Results = SetUpResultsForTwoButtons();
			DoMessageBox(messageBox, caller, string.Empty, action, string.Empty, string.Empty, "S_CONFIRM_RESTORE_DEFAULTS_TITLE", "S_CONFIRM_RESTORE_DEFAULTS_BODY", false);
		}
	}

	public void DoGlobalUnrestLeagueResetDialogue(int award, float multiplier, int lastLeague, int newLeague)
	{
		GlobalLeagueMessageBox globalLeagueMessageBox = UnityEngine.Object.Instantiate(GlobalLeagueMsgBoxPrefab) as GlobalLeagueMessageBox;
		globalLeagueMessageBox.SetupForStandardMsg();
		globalLeagueMessageBox.Setup(award, multiplier, lastLeague, newLeague);
		globalLeagueMessageBox.Results = SetUpResultsForOneButton();
		DoMessageBox(globalLeagueMessageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, "S_GLOBAL_CONFLICT", globalLeagueMessageBox.BodyKey, false);
	}

	public void DoTBFInfoDialogue(MonoBehaviour caller, string moreAction, string cancelAction)
	{
		if (!mMessageActive)
		{
			bool moreGamesEnabled = SwrveServerVariables.Instance.MoreGamesEnabled;
			TBFInfoMessageBox tBFInfoMessageBox = UnityEngine.Object.Instantiate(TBFInfoMsgBoxPrefab) as TBFInfoMessageBox;
			tBFInfoMessageBox.SetupForStandardMsg();
			if (moreGamesEnabled)
			{
				tBFInfoMessageBox.SetupForCustomMsg("S_MORE_GAMES", "S_BACK");
				tBFInfoMessageBox.Results = SetUpResultsForTwoButtons();
			}
			else
			{
				tBFInfoMessageBox.SetupForCustomMsg("S_BACK");
				tBFInfoMessageBox.Results = SetUpResultsForBackButton();
			}
			DoMessageBox(tBFInfoMessageBox, caller, moreAction, cancelAction, string.Empty, string.Empty, "S_THE_BLAST_FURNACE", "S_CALL_OF_DUTY", false);
		}
	}

	public void ForceCancel()
	{
		if (mCurrentMessageBox != null)
		{
			mCurrentMessageBox.gameObject.SendMessage("OnCancelPressed");
			if (mHintBox)
			{
				Container.SendMessage(mMessageScript, mMessage);
				TimeManager.instance.UnpauseGame();
			}
			mHintBox = false;
			mCurrentMessageBox = null;
			mMessageActive = false;
			mDoingShareDialogue = false;
		}
	}

	private void ClearMessageQueue()
	{
		if (mMessageQueue != null)
		{
			mMessageQueue.Clear();
		}
	}

	private MessageBoxResults SetUpResultsForOneButton()
	{
		MessageBoxResults messageBoxResults = new MessageBoxResults();
		messageBoxResults.MessageBoxResultsData = new MessageBoxResults.MessageBoxResultData[1];
		messageBoxResults.MessageBoxResultsData[0] = new MessageBoxResults.MessageBoxResultData();
		messageBoxResults.MessageBoxResultsData[0].ScriptWithMethodToInvoke = this;
		messageBoxResults.MessageBoxResultsData[0].MethodToInvoke = "OnOK";
		messageBoxResults.MessageBoxResultsData[0].Result = MessageBoxResults.Result.OK;
		return messageBoxResults;
	}

	private MessageBoxResults SetUpResultsForBackButton()
	{
		MessageBoxResults messageBoxResults = new MessageBoxResults();
		messageBoxResults.MessageBoxResultsData = new MessageBoxResults.MessageBoxResultData[1];
		messageBoxResults.MessageBoxResultsData[0] = new MessageBoxResults.MessageBoxResultData();
		messageBoxResults.MessageBoxResultsData[0].ScriptWithMethodToInvoke = this;
		messageBoxResults.MessageBoxResultsData[0].MethodToInvoke = "OnCancel";
		messageBoxResults.MessageBoxResultsData[0].Result = MessageBoxResults.Result.Cancel;
		return messageBoxResults;
	}

	private MessageBoxResults SetUpResultsForTwoButtons()
	{
		MessageBoxResults messageBoxResults = new MessageBoxResults();
		messageBoxResults.MessageBoxResultsData = new MessageBoxResults.MessageBoxResultData[2];
		messageBoxResults.MessageBoxResultsData[0] = new MessageBoxResults.MessageBoxResultData();
		messageBoxResults.MessageBoxResultsData[0].ScriptWithMethodToInvoke = this;
		messageBoxResults.MessageBoxResultsData[0].MethodToInvoke = "OnOK";
		messageBoxResults.MessageBoxResultsData[0].Result = MessageBoxResults.Result.OK;
		messageBoxResults.MessageBoxResultsData[1] = new MessageBoxResults.MessageBoxResultData();
		messageBoxResults.MessageBoxResultsData[1].ScriptWithMethodToInvoke = this;
		messageBoxResults.MessageBoxResultsData[1].MethodToInvoke = "OnCancel";
		messageBoxResults.MessageBoxResultsData[1].Result = MessageBoxResults.Result.Cancel;
		return messageBoxResults;
	}

	private MessageBoxResults SetUpResultsForSocial()
	{
		MessageBoxResults messageBoxResults = new MessageBoxResults();
		messageBoxResults.MessageBoxResultsData = new MessageBoxResults.MessageBoxResultData[3];
		messageBoxResults.MessageBoxResultsData[0] = new MessageBoxResults.MessageBoxResultData();
		messageBoxResults.MessageBoxResultsData[0].ScriptWithMethodToInvoke = this;
		messageBoxResults.MessageBoxResultsData[0].MethodToInvoke = "OnTwitter";
		messageBoxResults.MessageBoxResultsData[0].Result = MessageBoxResults.Result.Twitter;
		messageBoxResults.MessageBoxResultsData[1] = new MessageBoxResults.MessageBoxResultData();
		messageBoxResults.MessageBoxResultsData[1].ScriptWithMethodToInvoke = this;
		messageBoxResults.MessageBoxResultsData[1].MethodToInvoke = "OnFacebook";
		messageBoxResults.MessageBoxResultsData[1].Result = MessageBoxResults.Result.Facebook;
		messageBoxResults.MessageBoxResultsData[2] = new MessageBoxResults.MessageBoxResultData();
		messageBoxResults.MessageBoxResultsData[2].ScriptWithMethodToInvoke = this;
		messageBoxResults.MessageBoxResultsData[2].MethodToInvoke = "OnCancel";
		messageBoxResults.MessageBoxResultsData[2].Result = MessageBoxResults.Result.Cancel;
		return messageBoxResults;
	}

	private MessageBoxResults SetUpResultWithShareOption()
	{
		MessageBoxResults messageBoxResults = new MessageBoxResults();
		messageBoxResults.MessageBoxResultsData = new MessageBoxResults.MessageBoxResultData[2];
		messageBoxResults.MessageBoxResultsData[0] = new MessageBoxResults.MessageBoxResultData();
		messageBoxResults.MessageBoxResultsData[0].ScriptWithMethodToInvoke = this;
		messageBoxResults.MessageBoxResultsData[0].MethodToInvoke = "OnCancel";
		messageBoxResults.MessageBoxResultsData[0].Result = MessageBoxResults.Result.Share;
		messageBoxResults.MessageBoxResultsData[1] = new MessageBoxResults.MessageBoxResultData();
		messageBoxResults.MessageBoxResultsData[1].ScriptWithMethodToInvoke = this;
		messageBoxResults.MessageBoxResultsData[1].MethodToInvoke = "OnOK";
		messageBoxResults.MessageBoxResultsData[1].Result = MessageBoxResults.Result.OK;
		return messageBoxResults;
	}

	private void MessageBoxResultRateApp()
	{
		GeneralSettings.Instance.HasRatedApp = true;
		SwrveEventsUI.RatedApp();
		TBFUtils.LaunchURL(SwrveServerVariables.Instance.RateAppUrl);
	}

	private void MessageBoxResultKInvite()
	{
		GeneralSettings.Instance.HasKInvited = true;
		TBFUtils.PressKInvite();
	}

	private void MessageBoxResultKInviteDeclined()
	{
		DoKInviteDeclinedDialog();
	}

	private void SignupForActivate()
	{
		SwrveEventsUI.OpenedDialog();
		ActivateWatcher.Instance.LaunchActivate(Bedrock.brUserInterfaceScreen.BR_ACTIVATE_REGISTER_UI);
	}

	private void MessageBoxResultUpdate()
	{
		TBFUtils.LaunchURL(SwrveServerVariables.Instance.AppStoreShortUrl);
	}

	private void OnOK()
	{
		if (mMessageActive)
		{
			if (mCallbackScript != null && mOkAction != string.Empty)
			{
				mCallbackScript.Invoke(mOkAction, 0f);
			}
			FinishMessageBox();
		}
	}

	private void OnCancel()
	{
		if (mMessageActive)
		{
			if (mCallbackScript != null && mCancelAction != string.Empty)
			{
				mCallbackScript.Invoke(mCancelAction, 0f);
			}
			mDoingShareDialogue = false;
			FinishMessageBox();
		}
	}

	private void OnTwitter()
	{
		if (mMessageActive)
		{
			if (mCallbackScript != null && mTwitterAction != string.Empty)
			{
				mCallbackScript.Invoke(mTwitterAction, 0f);
			}
			FinishMessageBox();
		}
	}

	private void OnFacebook()
	{
		if (mMessageActive)
		{
			if (mCallbackScript != null && mFacebookAction != string.Empty)
			{
				mCallbackScript.Invoke(mFacebookAction, 0f);
			}
			FinishMessageBox();
		}
	}

	private void DoMessageBox(MessageBox messageBox, MonoBehaviour caller, string action, string cancelAction, string facebookAction, string twitterAction, string titleKey, string bodyKey, bool translated)
	{
		DoMessageBox(messageBox, caller, action, cancelAction, facebookAction, twitterAction, titleKey, bodyKey, translated, false);
	}

	private void DoMessageBox(MessageBox messageBox, MonoBehaviour caller, string action, string cancelAction, string facebookAction, string twitterAction, string titleKey, string bodyKey, bool translated, bool hint)
	{
		MessageBoxQueueData messageBoxQueueData = new MessageBoxQueueData();
		messageBoxQueueData.Title = titleKey;
		messageBoxQueueData.Body = bodyKey;
		messageBoxQueueData.CallbackScript = caller;
		messageBoxQueueData.OkAction = action;
		messageBoxQueueData.CancelAction = cancelAction;
		messageBoxQueueData.FacebookAction = facebookAction;
		messageBoxQueueData.TwitterAction = twitterAction;
		messageBoxQueueData.Hint = hint;
		messageBoxQueueData.Translated = translated;
		messageBoxQueueData.Box = messageBox;
		messageBoxQueueData.Box.gameObject.SetActive(false);
		mMessageQueue.Add(messageBoxQueueData);
	}

	private void DoMessageBoxFromQueue()
	{
		if (mMessageQueue != null && mMessageQueue.Count > 0)
		{
			MessageBoxQueueData messageBoxQueueData = mMessageQueue[0];
			messageBoxQueueData.Box.gameObject.SetActive(true);
			mCallbackScript = messageBoxQueueData.CallbackScript;
			mOkAction = messageBoxQueueData.OkAction;
			mCancelAction = messageBoxQueueData.CancelAction;
			mFacebookAction = messageBoxQueueData.FacebookAction;
			mTwitterAction = messageBoxQueueData.TwitterAction;
			mHintBox = messageBoxQueueData.Hint;
			mMessageActive = true;
			mCurrentMessageBox = messageBoxQueueData.Box;
			StartCoroutine(mCurrentMessageBox.Display(messageBoxQueueData.Title, messageBoxQueueData.Body, messageBoxQueueData.Translated));
			mMessageQueue.Remove(messageBoxQueueData);
		}
	}

	private void FinishMessageBox()
	{
		if (mHintBox)
		{
			Container.SendMessage(mMessageScript, mMessage);
			TimeManager.instance.UnpauseGame();
			mHintBox = false;
		}
		mCurrentMessageBox = null;
		mMessageActive = false;
		if (mDoingShareDialogue && mShareOptionDoneTwitter && mShareOptionDoneFacebook)
		{
			mDoingShareDialogue = false;
		}
	}

	private void Update()
	{
		if (mCurrentMessageBox != null)
		{
			if (mHintBox && TimeManager.instance.GlobalTimeState != TimeManager.State.IngamePaused && mCurrentMessageBox.Animator != null && mCurrentMessageBox.Animator.IsOpen)
			{
				TimeManager.instance.PauseGame();
			}
		}
		else if (!mMessageActive)
		{
			DoMessageBoxFromQueue();
		}
	}

	public void SeeIfDeviceMessageShouldBeDisplayed()
	{
		Dictionary<string, string> resourceDictionary = null;
		string text = "HardwareType." + OptimisationManager.GetCurrentHardware();
		string text2 = SystemInfo.operatingSystem.ToString();
		text2 = text2.Replace(" ", "_");
		string deviceManfacturer = TBFUtils.DeviceManfacturer;
		string deviceModel = TBFUtils.DeviceModel;
		deviceManfacturer = deviceManfacturer.Replace(" ", "_");
		deviceModel = deviceModel.Replace(" ", "_");
		int num = text2.IndexOf('/');
		if (num > 0)
		{
			text2 = text2.Substring(0, num - 1);
		}
		string text3 = "HardwareType." + deviceManfacturer + "." + deviceModel;
		string text4 = text3 + "." + text2;
		string text5 = text + "." + text2;
		Debug.Log("SeeIfDeviceMessageShouldBeDisplayed: Looking for key " + text5);
		if (!Bedrock.GetRemoteUserResources(text5, out resourceDictionary) && !Bedrock.GetRemoteUserResources(text, out resourceDictionary))
		{
			Bedrock.GetRemoteUserResources(text2, out resourceDictionary);
		}
		if (resourceDictionary == null)
		{
			Debug.Log("SeeIfDeviceMessageShouldBeDisplayed: Looking for android key " + text4);
			if (!Bedrock.GetRemoteUserResources(text4, out resourceDictionary))
			{
				Bedrock.GetRemoteUserResources(text3, out resourceDictionary);
			}
		}
		if (resourceDictionary != null)
		{
			string key = Language.CurrentLanguage().ToString();
			string fromResourceDictionaryAsString = Bedrock.GetFromResourceDictionaryAsString(resourceDictionary, key, string.Empty);
			if (fromResourceDictionaryAsString.Length > 0 && m_ShownDeviceMessage != fromResourceDictionaryAsString)
			{
				StartCoroutine(ShowDeviceMessageBox(fromResourceDictionaryAsString));
			}
		}
	}

	private IEnumerator ShowDeviceMessageBox(string text)
	{
		while (mMessageActive)
		{
			yield return new WaitForEndOfFrame();
		}
		m_ShownDeviceMessage = text;
		MessageBox messageBox = (MessageBox)UnityEngine.Object.Instantiate(UnsupportedMsgBoxPrefab);
		messageBox.SetupForCustomMsg("S_OKAY");
		messageBox.Results = SetUpResultsForOneButton();
		DoMessageBox(messageBox, null, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, text, true);
	}
}
