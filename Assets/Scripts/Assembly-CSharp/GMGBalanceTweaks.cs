using System.Collections.Generic;
using UnityEngine;

public class GMGBalanceTweaks : SingletonMonoBehaviour, iSwrveUpdatable
{
	private float m_EnemyDamageMultiplier = 0.02f;

	private float m_EnemyHealthMultiplier = 0.02f;

	private float m_EnemyMovementMultiplier = 0.02f;

	private float m_EnemyAccuracyMultiplier = 0.02f;

	private float m_ScavengerPerkMultipler = -0.02f;

	private float m_EnemyDamageMultiplierCap = 2f;

	private float m_EnemyHealthMultiplierCap = 2f;

	private float m_EnemyMovementMultiplierCap = 2f;

	private float m_EnemyAccuracyMultiplierCap = 2f;

	private float m_ScavengerPerkMultiplerCap = -2f;

	public static GMGBalanceTweaks Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<GMGBalanceTweaks>();
		}
	}

	public float GMGModifier_EnemyDamage(float inputValue)
	{
		return (!ActStructure.Instance.CurrentMissionIsSpecOps()) ? inputValue : GetModifiedValue(inputValue, m_EnemyDamageMultiplier, m_EnemyDamageMultiplierCap);
	}

	public float GMGModifier_EnemyHealth(float inputValue)
	{
		return (!ActStructure.Instance.CurrentMissionIsSpecOps()) ? inputValue : GetModifiedValue(inputValue, m_EnemyHealthMultiplier, m_EnemyHealthMultiplierCap);
	}

	public float GMGModifier_EnemyMovement(float inputValue)
	{
		return (!ActStructure.Instance.CurrentMissionIsSpecOps()) ? inputValue : GetModifiedValue(inputValue, m_EnemyMovementMultiplier, m_EnemyMovementMultiplierCap);
	}

	public float GMGModifier_EnemyAccuracy(float inputValue)
	{
		return (!ActStructure.Instance.CurrentMissionIsSpecOps()) ? inputValue : GetModifiedValue(inputValue, m_EnemyAccuracyMultiplier, m_EnemyAccuracyMultiplierCap);
	}

	public float GMGModifier_ScavengerPerk(float inputValue)
	{
		return (!ActStructure.Instance.CurrentMissionIsSpecOps()) ? inputValue : GetModifiedValue(inputValue, m_ScavengerPerkMultipler, m_ScavengerPerkMultiplerCap);
	}

	private float GetModifiedValue(float inputValue, float mod, float cap)
	{
		if (cap > 0f)
		{
			return inputValue + inputValue * Mathf.Min(mod * (float)(GMGData.Instance.CurrentWave() - 1), cap);
		}
		return inputValue + inputValue * Mathf.Max(mod * (float)(GMGData.Instance.CurrentWave() - 1), cap);
	}

	protected override void Awake()
	{
		Object.DontDestroyOnLoad(base.gameObject);
		base.Awake();
	}

	public void UpdateFromSwrve()
	{
		Dictionary<string, string> resourceDictionary;
		if (Bedrock.GetRemoteUserResources("BalanceTweaks", out resourceDictionary))
		{
			m_EnemyDamageMultiplier = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "EnemyDamageMultiplier", m_EnemyDamageMultiplier);
			m_EnemyHealthMultiplier = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "EnemyHealthMultiplier", m_EnemyHealthMultiplier);
			m_EnemyMovementMultiplier = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "EnemyMovementMultiplier", m_EnemyMovementMultiplier);
			m_EnemyAccuracyMultiplier = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "EnemyAccuracyMultiplier", m_EnemyAccuracyMultiplier);
			m_ScavengerPerkMultipler = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "ScavengerPerkMultipler", m_ScavengerPerkMultipler);
			m_EnemyDamageMultiplierCap = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "EnemyDamageMultiplierCap", m_EnemyDamageMultiplierCap);
			m_EnemyHealthMultiplierCap = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "EnemyHealthMultiplierCap", m_EnemyHealthMultiplierCap);
			m_EnemyMovementMultiplierCap = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "EnemyMovementMultiplierCap", m_EnemyMovementMultiplierCap);
			m_EnemyAccuracyMultiplierCap = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "EnemyAccuracyMultiplierCap", m_EnemyAccuracyMultiplierCap);
			m_ScavengerPerkMultiplerCap = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "ScavengerPerkMultiplerCap", m_ScavengerPerkMultiplerCap);
		}
	}
}
