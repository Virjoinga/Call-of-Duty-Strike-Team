using System.Collections.Generic;
using UnityEngine;

public class AnimatedScreenBackground : SingletonMonoBehaviour
{
	private enum State
	{
		Inactive = 0,
		Activating = 1,
		Active = 2,
		Hiding = 3,
		Hidden = 4,
		Deactivating = 5,
		Manual = 6
	}

	private const float ANIMATE_TIME = 1f;

	private const float Z_OFFSET = 9.5f;

	public Color BlendStart = Color.yellow;

	public Color BlendEnd = Color.red;

	public Color BlendMiddle = Color.yellow;

	public float MinPersistence;

	public float MaxPersistence;

	public float Multiplication = 2f;

	public int NumberOfOctaves;

	public Material BackgroundMaterial;

	private float mStartTime;

	private int mRows;

	private int mColumns;

	private State mState;

	private float mAlpha;

	private GameObject mBackgroundObject;

	private Texture2D mLookup;

	public static AnimatedScreenBackground Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<AnimatedScreenBackground>();
		}
	}

	public bool IsActive
	{
		get
		{
			return mState == State.Active;
		}
	}

	public bool IsActiveOrBecomingActive
	{
		get
		{
			return mState == State.Active || mState == State.Activating;
		}
	}

	public bool IsHidden
	{
		get
		{
			return mState == State.Hidden || mState == State.Inactive;
		}
	}

	protected override void Awake()
	{
		base.Awake();
		Object.DontDestroyOnLoad(base.gameObject);
		Create();
	}

	public void Activate()
	{
		mBackgroundObject.SetActive(true);
		mState = State.Activating;
		mStartTime = Time.realtimeSinceStartup;
	}

	public void Deactivate()
	{
		if (mState == State.Activating || mState == State.Active || mState == State.Manual)
		{
			mState = State.Deactivating;
			mStartTime = Time.realtimeSinceStartup;
		}
	}

	public void Hide()
	{
		if (mState == State.Activating || mState == State.Active || mState == State.Manual)
		{
			mState = State.Hiding;
			mStartTime = Time.realtimeSinceStartup;
		}
	}

	public void SetManualAlpha(float alpha)
	{
		if (mState == State.Inactive || mState == State.Hidden || mState == State.Manual)
		{
			mState = State.Manual;
			mAlpha = alpha;
		}
	}

	private void Update()
	{
		if (mState == State.Active)
		{
			UpdateActiveState();
		}
		else if (mState == State.Activating)
		{
			if (AnimateAlphaUp())
			{
				mState = State.Active;
				mStartTime = Time.realtimeSinceStartup;
			}
		}
		else if (mState == State.Hiding)
		{
			if (AnimateAlphaDown())
			{
				mState = State.Hidden;
				mStartTime = Time.realtimeSinceStartup;
			}
		}
		else if (mState == State.Deactivating && AnimateAlphaDown())
		{
			mState = State.Inactive;
			mStartTime = Time.realtimeSinceStartup;
		}
		mBackgroundObject.SetActive(mAlpha > 0f);
		if (mBackgroundObject.activeInHierarchy)
		{
			UpdateMaterial();
		}
	}

	private void UpdateActiveState()
	{
	}

	private bool AnimateAlphaUp()
	{
		float num = Time.realtimeSinceStartup - mStartTime;
		mAlpha = Mathf.Clamp01(num / 1f);
		return num >= 1f;
	}

	private bool AnimateAlphaDown()
	{
		float num = Time.realtimeSinceStartup - mStartTime;
		mAlpha = 1f - Mathf.Clamp01(num / 1f);
		return num >= 1f;
	}

	private void Create()
	{
		if ((bool)mBackgroundObject)
		{
			Object.Destroy(mBackgroundObject);
		}
		if ((bool)mLookup)
		{
			Object.Destroy(mLookup);
		}
		mRows = 16;
		mColumns = Mathf.CeilToInt((float)mRows * ((float)Screen.width / (float)Screen.height));
		mLookup = new Texture2D(mRows * mColumns, 16, TextureFormat.ARGB32, false, true);
		mLookup.wrapMode = TextureWrapMode.Clamp;
		for (int i = 0; i < 16; i++)
		{
			int max = mRows * mColumns;
			int num = Random.Range(0, max);
			float persistence = Random.Range(MinPersistence, MaxPersistence);
			for (int j = 0; j < mColumns; j++)
			{
				for (int k = 0; k < mRows; k++)
				{
					int x = j * mRows + k;
					float num2 = 0.5f - PerlinNoise.Get((float)k / Multiplication + (float)num, (float)j / Multiplication + (float)num, persistence, NumberOfOctaves);
					mLookup.SetPixel(x, i, new Color(num2, num2, num2, (i != 0) ? Random.Range((float)i / 15f, 1f) : 0f));
				}
			}
		}
		mLookup.Apply(false, true);
		Mesh mesh = new Mesh();
		mesh.name = "AnimatedScreenBackground";
		List<Vector3> list = new List<Vector3>();
		List<Vector2> list2 = new List<Vector2>();
		List<Vector2> list3 = new List<Vector2>();
		List<int> list4 = new List<int>();
		Camera camera = ((!(GUISystem.Instance != null)) ? Camera.main : GUISystem.Instance.m_guiCamera);
		for (int l = 0; l < mColumns; l++)
		{
			for (int m = 0; m < mRows; m++)
			{
				Vector3 item = camera.ScreenToWorldPoint(new Vector3((float)Screen.width * (float)l / (float)mColumns, (float)Screen.height * (float)m / (float)mRows, 0f));
				item.z = 9.5f;
				Vector3 item2 = camera.ScreenToWorldPoint(new Vector3((float)Screen.width * (float)(l + 1) / (float)mColumns, (float)Screen.height * (float)m / (float)mRows, 0f));
				item2.z = 9.5f;
				Vector3 item3 = camera.ScreenToWorldPoint(new Vector3((float)Screen.width * (float)l / (float)mColumns, (float)Screen.height * (float)(m + 1) / (float)mRows, 0f));
				item3.z = 9.5f;
				Vector3 item4 = camera.ScreenToWorldPoint(new Vector3((float)Screen.width * (float)(l + 1) / (float)mColumns, (float)Screen.height * (float)(m + 1) / (float)mRows, 0f));
				item4.z = 9.5f;
				list4.Add(list.Count);
				list4.Add(list.Count + 2);
				list4.Add(list.Count + 1);
				list4.Add(list.Count + 1);
				list4.Add(list.Count + 2);
				list4.Add(list.Count + 3);
				list.Add(item);
				list.Add(item2);
				list.Add(item3);
				list.Add(item4);
				list2.Add(new Vector2(0f, 0f));
				list2.Add(new Vector2(1f, 0f));
				list2.Add(new Vector2(0f, 1f));
				list2.Add(new Vector2(1f, 1f));
				float x2 = (float)(m * mRows + l) / (float)(mRows * mColumns);
				list3.Add(new Vector2(x2, 0f));
				list3.Add(new Vector2(x2, 0f));
				list3.Add(new Vector2(x2, 0f));
				list3.Add(new Vector2(x2, 0f));
			}
		}
		mesh.vertices = list.ToArray();
		mesh.uv = list2.ToArray();
		mesh.uv2 = list3.ToArray();
		mesh.triangles = list4.ToArray();
		mBackgroundObject = new GameObject("Background");
		mBackgroundObject.transform.parent = base.transform;
		mBackgroundObject.layer = base.gameObject.layer;
		mBackgroundObject.AddComponent<MeshFilter>().mesh = mesh;
		mBackgroundObject.AddComponent<MeshRenderer>().material = BackgroundMaterial;
		mBackgroundObject.SetActive(false);
		UpdateMaterial();
	}

	private void UpdateMaterial()
	{
		BackgroundMaterial.SetTexture("_PatternTex", mLookup);
		BackgroundMaterial.SetColor("_BlendStart", BlendStart);
		BackgroundMaterial.SetColor("_BlendMiddle", BlendMiddle);
		BackgroundMaterial.SetColor("_BlendEnd", BlendEnd);
		BackgroundMaterial.SetFloat("_Offset", Mathf.Repeat(1f / 64f * Time.realtimeSinceStartup, 1f));
		BackgroundMaterial.SetFloat("_Alpha", mAlpha);
	}
}
