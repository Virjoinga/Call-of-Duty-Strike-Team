using System;
using System.Collections.Generic;
using UnityEngine;

public class GameSettings : SingletonMonoBehaviour, iSwrveUpdatable, ISaveLoad
{
	public enum AutoLoadout
	{
		Balanced = 0,
		Assault = 1,
		Stealth = 2,
		Custom = 3
	}

	public const float EQUIPMENT_MULTIBUY_DISCOUNT = 1f;

	public const int MAX_SOLDIERS = 4;

	public const int NUM_EQUIPMENT_SLOTS = 4;

	public const int NUM_PERK_SLOTS = 3;

	public const int NUM_WEAPON_GLOBAL_INVENTORY_SLOTS = 30;

	public const int NUM_EQUIPMENT_GLOBAL_INVENTORY_SLOTS = 8;

	public const int NUM_PERK_GLOBAL_INVENTORY_SLOTS = 24;

	public const int NUM_ARMOUR_GLOBAL_INVENTORY_SLOTS = 4;

	private const string VersionKey = "versionNumber";

	private const string DescriptorKey = "customDescriptor";

	private const string SoldierKey = "soldier";

	private const string EquipmentKey = "equipment";

	private const string PerksKey = "perks";

	private const string ArmourKey = "armour";

	private const string GlobalEquipmentKey = "globalEquipment";

	private const string UnlockedKey = "normalunlocked";

	private const string ProUnlockedKey = "prounlocked";

	private const string LastLevelKey = "lastDifficultyLevel";

	private const string HighlightMissionKey = "highlightMission";

	private const string HighlightSectionKey = "highlightSection";

	private const string AutoLoadoutKey = "AutoLoadoutMode";

	private const string TimesOnLoadout = "timesOnLoadout";

	private const string TimesOnPerk = "timesOnPerk";

	private const string TimesOnWeapon = "timesOnWeapon";

	private const string LevelUpSeenKey = "seenLevelUp";

	private const string PerkSlotLockedKey = "perkSlotLocked";

	public static bool LaunchedFromGlobe;

	public static bool DisableLoadoutAndBriefing;

	public int PERK_SLOT_COST = 500;

	public int ALL_BUNDLE_COST = 11500;

	private int[] GrenadeIncreaseCost = new int[3] { 100, 500, 2500 };

	private int[] ClaymoreIncreaseCost = new int[3] { 100, 500, 2500 };

	private int[] MediPackIncreaseCost = new int[3] { 100, 500, 2500 };

	private Player m_PlayerSettings = new Player();

	private Cash m_PlayerCash = new Cash();

	private SoldierSettings[] mSoldiers = new SoldierSettings[4];

	private EquipmentSettings[] mEquipment = new EquipmentSettings[4];

	private PerkSettings[] mPerks = new PerkSettings[3];

	private EquipmentDescriptor mArmour;

	private bool[] mActivePerks = new bool[24];

	public WeaponDescriptor[] DefaultCustomDescriptor;

	public float VeteranEnemyHealthModifier = 1f;

	public float VeteranPlayerHealthModifier = 1f;

	private WeaponDescriptor[] CustomDescriptor;

	private WeaponDescriptor[] mCachedBalancedDescriptor;

	private WeaponDescriptor[] mCachedAssualtDescriptor;

	private WeaponDescriptor[] mCachedStealthDescriptor;

	public PerkType FreePerkSetting;

	public EquipmentDescriptor FreeEquipmentSetting;

	private List<string> mUnlockedEarly = new List<string>();

	private List<string> mProPerkUnlockedEarly = new List<string>();

	private DifficultyMode mLastKnownDifficultyMode;

	private int mTimesInLoadoutScreen;

	private int mTimesInPerkScreen;

	private int mTimesInWeaponScreen;

	private bool mLevelUpTutorialSeen;

	private bool mPerkSlotLocked = true;

	private MissionListings.eMissionID mHighlightMission;

	private MissionListings.eMissionID mLastPlayedMission = MissionListings.eMissionID.MI_MAX;

	private int mHighlightSection;

	private int mLastPlayedSection = -1;

	private int mSaveGameVersion;

	private int mKInviteRewardsToShow;

	private AutoLoadout mAutoLoadout;

	public static GameSettings Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<GameSettings>();
		}
	}

	public bool PerksEnabled { get; private set; }

	public SoldierSettings[] Soldiers
	{
		get
		{
			return mSoldiers;
		}
	}

	public EquipmentSettings[] Equipment
	{
		get
		{
			return mEquipment;
		}
	}

	public PerkSettings[] Perks
	{
		get
		{
			return mPerks;
		}
	}

	public EquipmentDescriptor Armour
	{
		get
		{
			return mArmour;
		}
	}

	public bool VtolSoldierPresent { get; set; }

	public int TimesInLoadoutScreen
	{
		get
		{
			return mTimesInLoadoutScreen;
		}
		set
		{
			mTimesInLoadoutScreen = value;
		}
	}

	public int TimesInPerkScreen
	{
		get
		{
			return mTimesInPerkScreen;
		}
		set
		{
			mTimesInPerkScreen = value;
		}
	}

	public int TimesInWeaponScreen
	{
		get
		{
			return mTimesInWeaponScreen;
		}
		set
		{
			mTimesInWeaponScreen = value;
		}
	}

	public bool LevelUpTutorialSeen
	{
		get
		{
			return mLevelUpTutorialSeen;
		}
		set
		{
			mLevelUpTutorialSeen = value;
		}
	}

	public int KInviteRewardsToShow
	{
		get
		{
			return mKInviteRewardsToShow;
		}
		set
		{
			mKInviteRewardsToShow = value;
		}
	}

	public AutoLoadout AutoLoadoutMode
	{
		get
		{
			return mAutoLoadout;
		}
	}

	public bool IsCustom
	{
		get
		{
			return mAutoLoadout == AutoLoadout.Custom;
		}
	}

	public DifficultyMode LastKnownDifficultyMode
	{
		get
		{
			return mLastKnownDifficultyMode;
		}
		set
		{
			mLastKnownDifficultyMode = value;
		}
	}

	public MissionListings.eMissionID HighlightMissionID
	{
		get
		{
			return (mLastPlayedMission != MissionListings.eMissionID.MI_MAX) ? mLastPlayedMission : mHighlightMission;
		}
		set
		{
			mHighlightMission = value;
			mLastPlayedMission = MissionListings.eMissionID.MI_MAX;
		}
	}

	public int HighlightSectionIndex
	{
		get
		{
			return (mLastPlayedSection != -1) ? mLastPlayedSection : mHighlightSection;
		}
		set
		{
			mHighlightSection = value;
			mLastPlayedSection = -1;
		}
	}

	public MissionListings.eMissionID LastPlayedID
	{
		set
		{
			mLastPlayedMission = value;
		}
	}

	public int LastPlayedSectionIndex
	{
		set
		{
			mLastPlayedSection = value;
		}
	}

	public void RestoreDefaultPlayerSettings()
	{
		m_PlayerSettings.Reset();
		m_PlayerSettings.ResetAndSaveSoundSettings();
		m_PlayerSettings.Save();
	}

	protected override void Awake()
	{
		base.Awake();
		UnityEngine.Object.DontDestroyOnLoad(base.transform.gameObject);
		for (int i = 0; i < 4; i++)
		{
			mSoldiers[i] = new SoldierSettings();
			mSoldiers[i].Name = AutoLocalize.Get("S_DEFAULT_SOLDIER_NAME_" + (i + 1));
			mSoldiers[i].Weapon = new WeaponSettings();
		}
		CustomDescriptor = new WeaponDescriptor[4];
		WeaponManager instance = WeaponManager.Instance;
		for (int j = 0; j < mEquipment.Length; j++)
		{
			mEquipment[j] = new EquipmentSettings();
			if (j < instance.LoadoutEquipment.Length)
			{
				mEquipment[j].Descriptor = instance.LoadoutEquipment[j];
			}
		}
		for (int k = 0; k < mPerks.Length; k++)
		{
			mPerks[k] = new PerkSettings();
		}
		PerksEnabled = true;
	}

	private void Start()
	{
		Reset();
	}

	public void SetupForTutorial()
	{
		mSoldiers[0].Weapon.Descriptor = WeaponManager.Instance.TutorialWeapons[0];
		mSoldiers[1].Weapon.Descriptor = WeaponManager.Instance.TutorialWeapons[1];
		for (int i = 0; i < 3; i++)
		{
			ClearPerk(i);
		}
		mAutoLoadout = AutoLoadout.Custom;
	}

	public void CacheAutoLoadouts()
	{
		WeaponManager instance = WeaponManager.Instance;
		mCachedBalancedDescriptor = new WeaponDescriptor[4];
		mCachedAssualtDescriptor = new WeaponDescriptor[4];
		mCachedStealthDescriptor = new WeaponDescriptor[4];
		WeaponDescriptor weaponDescriptor = FindBestUnlockedWeaponFrom(instance.AssaultRifles, false);
		WeaponDescriptor weaponDescriptor2 = FindBestUnlockedWeaponFrom(instance.SniperRifles, false);
		WeaponDescriptor weaponDescriptor3 = FindBestUnlockedWeaponFrom(WeaponManager.Instance.SniperRifles, true);
		WeaponDescriptor weaponDescriptor4 = FindBestUnlockedWeaponFrom(WeaponManager.Instance.LightMachineGuns, false);
		WeaponDescriptor weaponDescriptor5 = FindBestUnlockedWeaponFrom(WeaponManager.Instance.Shotguns, false);
		mCachedBalancedDescriptor[0] = weaponDescriptor;
		mCachedBalancedDescriptor[1] = weaponDescriptor2;
		mCachedBalancedDescriptor[2] = weaponDescriptor4;
		mCachedBalancedDescriptor[3] = weaponDescriptor5;
		mCachedAssualtDescriptor[0] = weaponDescriptor4;
		mCachedAssualtDescriptor[1] = weaponDescriptor5;
		mCachedAssualtDescriptor[2] = weaponDescriptor4;
		mCachedAssualtDescriptor[3] = weaponDescriptor5;
		mCachedStealthDescriptor[0] = weaponDescriptor3;
		mCachedStealthDescriptor[1] = weaponDescriptor3;
		mCachedStealthDescriptor[2] = weaponDescriptor3;
		mCachedStealthDescriptor[3] = weaponDescriptor3;
	}

	public void SetToBalanced()
	{
		SetToBalanced(false);
	}

	public void SetToBalanced(bool force)
	{
		for (int i = 0; i < 4; i++)
		{
			if (Soldiers[i].Present || force)
			{
				Soldiers[i].Weapon.Descriptor = mCachedBalancedDescriptor[i];
			}
		}
		mAutoLoadout = AutoLoadout.Balanced;
	}

	public void SetToAssault()
	{
		for (int i = 0; i < 4; i++)
		{
			if (Soldiers[i].Present)
			{
				Soldiers[i].Weapon.Descriptor = mCachedAssualtDescriptor[i];
			}
		}
		mAutoLoadout = AutoLoadout.Assault;
	}

	public void SetToStealth()
	{
		for (int i = 0; i < 4; i++)
		{
			if (Soldiers[i].Present)
			{
				Soldiers[i].Weapon.Descriptor = mCachedStealthDescriptor[i];
			}
		}
		mAutoLoadout = AutoLoadout.Stealth;
	}

	public void SetToCustom()
	{
		for (int i = 0; i < 4; i++)
		{
			if (Soldiers[i].Present)
			{
				mSoldiers[i].Weapon.Descriptor = CustomDescriptor[i];
			}
		}
		mAutoLoadout = AutoLoadout.Custom;
	}

	public void SetupForSpecOps()
	{
		for (int i = 0; i < 4; i++)
		{
			if (Soldiers[i].Present)
			{
				mSoldiers[i].Weapon.Descriptor = mCachedBalancedDescriptor[i];
			}
		}
		mAutoLoadout = AutoLoadout.Balanced;
	}

	public void SetSoldierWeapon(int soldierIndex, WeaponDescriptor descriptor)
	{
		if (soldierIndex >= 0 && soldierIndex < 4)
		{
			mSoldiers[soldierIndex].Weapon.Descriptor = descriptor;
			mAutoLoadout = AutoLoadout.Custom;
		}
		for (int i = 0; i < mSoldiers.Length; i++)
		{
			if (mSoldiers[i].Weapon != null && mSoldiers[i].Weapon.Descriptor != null)
			{
				CustomDescriptor[i] = mSoldiers[i].Weapon.Descriptor;
			}
		}
	}

	public void AddEquipment(EquipmentDescriptor equipment, int numItems)
	{
		EventHub.Instance.Report(new Events.PurchaseEquipment(equipment.Name));
		for (int i = 0; i < 4; i++)
		{
			if (mEquipment[i] != null && mEquipment[i].Descriptor == equipment && mEquipment[i].SlotSize >= mEquipment[i].NumItems + numItems)
			{
				mEquipment[i].NumItems += numItems;
				break;
			}
		}
	}

	public bool IsThereSpaceForEquipment(EquipmentDescriptor equipment, int numItems)
	{
		bool result = false;
		for (int i = 0; i < 4; i++)
		{
			if (mEquipment[i] != null && mEquipment[i].Descriptor == equipment && mEquipment[i].SlotSize >= mEquipment[i].NumItems + numItems)
			{
				result = true;
				break;
			}
		}
		return result;
	}

	public int SpaceForEquipment(EquipmentDescriptor equipment)
	{
		int result = 0;
		for (int i = 0; i < 4; i++)
		{
			if (mEquipment[i] != null && mEquipment[i].Descriptor == equipment)
			{
				result = mEquipment[i].SlotSize - mEquipment[i].NumItems;
				break;
			}
		}
		return result;
	}

	public int FindSlotForEquipment(EquipmentDescriptor equipment)
	{
		int result = -1;
		for (int i = 0; i < 4; i++)
		{
			if (mEquipment[i] != null && mEquipment[i].Descriptor == equipment)
			{
				result = i;
				break;
			}
		}
		return result;
	}

	public int CalculateCostOfEquipment(EquipmentDescriptor equipment, int numItems)
	{
		int result = 0;
		if (equipment != null)
		{
			result = ((numItems <= 1) ? (equipment.HardCost * numItems) : ((int)((float)(equipment.HardCost * numItems) * 1f)));
		}
		return result;
	}

	public int CalculateInGameCostOfEquipment(EquipmentDescriptor equipment, int numItems)
	{
		int result = 0;
		if (equipment != null)
		{
			result = ((numItems <= 1) ? (equipment.InGameHardCost * numItems) : ((equipment.Type != EquipmentIconController.EquipmentType.MediPack) ? equipment.InGameHardCost : ((int)((float)(equipment.InGameHardCost * numItems) * 1f))));
		}
		return result;
	}

	public int CurrentSlotsSizeLevel(int slot)
	{
		return mEquipment[slot].SlotSizeLevel;
	}

	public int CalculateSlotIncrease(int slot)
	{
		int result = 0;
		if (slot < 4 && mEquipment[slot].SlotSizeLevel + 1 < 4)
		{
			result = 3;
		}
		return result;
	}

	public int CalculateCostOfIncrease(string name, int slot)
	{
		if (slot < 4)
		{
			int slotSizeLevel = mEquipment[slot].SlotSizeLevel;
			TBFAssert.DoAssert(slotSizeLevel >= 0 && slotSizeLevel < 4);
			if (slotSizeLevel >= 0 && slotSizeLevel < 4)
			{
				switch (name)
				{
				case "MedPack":
					return MediPackIncreaseCost[slotSizeLevel];
				case "Grenade":
					return GrenadeIncreaseCost[slotSizeLevel];
				case "Claymore":
					return ClaymoreIncreaseCost[slotSizeLevel];
				}
			}
		}
		return 0;
	}

	public void IncreaseSpaceForEquipment(int slot)
	{
		if (slot < 4 && mEquipment[slot].SlotSizeLevel < 4)
		{
			mEquipment[slot].SlotSizeLevel++;
		}
	}

	public void IncreaseSpaceForEquipmentWithBundle(int slot, int size)
	{
		if (slot < 4)
		{
			mEquipment[slot].ExtraSlotSize += size;
		}
	}

	public bool IsEquipmentSlotOccupied(int slot)
	{
		return slot < 4 && mEquipment[slot] != null && mEquipment[slot].Descriptor != null && mEquipment[slot].NumItems > 0;
	}

	public bool IsPerkSlotOccupied(int slot)
	{
		return slot < 3 && mPerks[slot] != null && mPerks[slot].Descriptor != null && mPerks[slot].Descriptor.Identifier != PerkType.None && mPerks[slot].NumItems > 0;
	}

	public PerkType PerkSlotContents(int slot)
	{
		if (IsPerkSlotOccupied(slot))
		{
			return mPerks[slot].Descriptor.Identifier;
		}
		return PerkType.None;
	}

	public bool HasPerk(PerkType p)
	{
		if (mActivePerks != null && mActivePerks.Length > (int)p)
		{
			return mActivePerks[(int)p];
		}
		return false;
	}

	public void EnablePerks(bool OnOff)
	{
		PerksEnabled = OnOff;
	}

	public void AddPerk(int slot, Perk perk)
	{
		if (slot < 0 || slot >= 3 || PerkSlotLocked(slot))
		{
			return;
		}
		if (mPerks[slot].Descriptor != null && mPerks[slot].NumItems != 0 && (mPerks[slot].Descriptor.Identifier == PerkType.Perk1Greed || mPerks[slot].Descriptor.Identifier == PerkType.Perk2Greed || mPerks[slot].Descriptor.Identifier == PerkType.Perk3Greed) && perk.Identifier != mPerks[slot].Descriptor.Identifier)
		{
			RemoveAllButOnePerksFromTier(mPerks[slot].Descriptor.Tier);
		}
		if (perk.Identifier != PerkType.Perk1Greed && perk.Identifier != PerkType.Perk2Greed && perk.Identifier != PerkType.Perk3Greed && !HasGreed(perk.Tier))
		{
			RemoveAllButOnePerksFromTier(perk.Tier);
		}
		else
		{
			for (int i = 1; i < 5; i++)
			{
				if (perk.Tier != i)
				{
					RemoveAllButOnePerksFromTier(i);
				}
			}
		}
		RemovePerkFromOtherSlots(perk);
		if (mPerks[slot] != null && mPerks[slot].Descriptor != null && mPerks[slot].NumItems != 0)
		{
			mActivePerks[(int)mPerks[slot].Descriptor.Identifier] = false;
		}
		mActivePerks[(int)perk.Identifier] = true;
		mPerks[slot].Descriptor = perk;
		mPerks[slot].NumItems = 1;
	}

	public void ClearPerk(int slot)
	{
		if (mPerks[slot].NumItems != 0)
		{
			mActivePerks[(int)mPerks[slot].Descriptor.Identifier] = false;
			mPerks[slot].NumItems = 0;
			if (mPerks[slot].Descriptor != null && (mPerks[slot].Descriptor.Identifier == PerkType.Perk1Greed || mPerks[slot].Descriptor.Identifier == PerkType.Perk2Greed || mPerks[slot].Descriptor.Identifier == PerkType.Perk3Greed))
			{
				RemoveAllButOnePerksFromTier(mPerks[slot].Descriptor.Tier);
			}
			mPerks[slot].Descriptor = null;
		}
	}

	private void RemoveAllButOnePerksFromTier(int tier)
	{
		int num = 0;
		for (int i = 0; i < 3; i++)
		{
			if (Perks[i].Descriptor != null && Perks[i].Descriptor.Tier == tier)
			{
				num++;
				if (num > 0)
				{
					mActivePerks[(int)mPerks[i].Descriptor.Identifier] = false;
					mPerks[i].Descriptor = null;
					mPerks[i].NumItems = 0;
				}
			}
		}
	}

	private void RemovePerkFromOtherSlots(Perk perk)
	{
		if (mPerks == null)
		{
			return;
		}
		for (int i = 0; i < mPerks.Length; i++)
		{
			PerkSettings perkSettings = mPerks[i];
			if (perkSettings != null && perkSettings.Descriptor == perk && perkSettings.NumItems > 0)
			{
				perkSettings.Descriptor = null;
				perkSettings.NumItems = 0;
			}
		}
	}

	public bool HasPerk(int slot, Perk perk)
	{
		return slot >= 0 && slot < 3 && mPerks[slot].Descriptor == perk;
	}

	public int FindFirstFreePerkSlot()
	{
		for (int i = 0; i < 3; i++)
		{
			if (mPerks[i] == null || (mPerks[i].NumItems == 0 && !PerkSlotLocked(i)))
			{
				return i;
			}
		}
		return -1;
	}

	private bool HasGreed(int tier)
	{
		if ((PerksEnabled && tier == 1 && HasPerk(PerkType.Perk1Greed)) || (tier == 2 && HasPerk(PerkType.Perk2Greed)) || (tier == 3 && HasPerk(PerkType.Perk3Greed)))
		{
			return true;
		}
		return false;
	}

	public bool HasGreed()
	{
		if ((PerksEnabled && HasPerk(PerkType.Perk1Greed)) || HasPerk(PerkType.Perk2Greed) || HasPerk(PerkType.Perk3Greed))
		{
			return true;
		}
		return false;
	}

	public bool PerkSlotLocked(int slot)
	{
		if (slot == mPerks.Length - 1)
		{
			return mPerkSlotLocked;
		}
		return false;
	}

	public void UnlockPerkSlot(int slot)
	{
		if (slot == mPerks.Length - 1)
		{
			mPerkSlotLocked = false;
		}
	}

	public int PerkSlotCost()
	{
		return PERK_SLOT_COST;
	}

	public EquipmentDescriptor GetNextArmourUpgrade()
	{
		EquipmentDescriptor result = null;
		WeaponManager instance = WeaponManager.Instance;
		if (instance != null)
		{
			if (mArmour == null && instance.ArmourUpgradeOrder.Length > 0)
			{
				result = instance.ArmourUpgradeOrder[0];
			}
			else
			{
				for (int i = 0; i < instance.ArmourUpgradeOrder.Length; i++)
				{
					if (instance.ArmourUpgradeOrder[i] == mArmour && i + 1 < instance.ArmourUpgradeOrder.Length)
					{
						result = instance.ArmourUpgradeOrder[i + 1];
					}
				}
			}
		}
		return result;
	}

	public void UpgradeArmour(EquipmentDescriptor armour)
	{
		if (mArmour != armour)
		{
			mArmour = armour;
			EventHub.Instance.Report(new Events.PurchaseArmour(0, armour.Armour));
		}
	}

	public int AllBundleCost()
	{
		return ALL_BUNDLE_COST;
	}

	public void UnlockWithBundles(BundleDescriptor[] bundles)
	{
		foreach (BundleDescriptor bundleDescriptor in bundles)
		{
			if (!(bundleDescriptor != null))
			{
				continue;
			}
			UnlockEarly(bundleDescriptor.Weapon.Name);
			SwrveEventsProgression.WeaponUnlocked(bundleDescriptor.Weapon.Name);
			UnlockPerkEarly(bundleDescriptor.Perk);
			for (int j = 0; j < bundleDescriptor.Equipment.Length; j++)
			{
				int num = FindSlotForEquipment(bundleDescriptor.Equipment[j]);
				if (num != -1)
				{
					IncreaseSpaceForEquipmentWithBundle(num, bundleDescriptor.NumItemsPerEquipment);
					AddEquipment(bundleDescriptor.Equipment[j], bundleDescriptor.NumItemsPerEquipment);
				}
			}
		}
		CacheAutoLoadouts();
	}

	private WeaponDescriptor FindBestUnlockedWeaponFrom(WeaponDescriptor[] weapons, bool silencedRequired)
	{
		WeaponDescriptor weaponDescriptor = null;
		WeaponManager instance = WeaponManager.Instance;
		int num = 1;
		num = XPManager.Instance.GetXPLevelAbsolute();
		for (int i = 0; i < weapons.Length; i++)
		{
			bool flag = WeaponUtils.IsWeaponSilenced(weapons[i]);
			if (!instance.IsWeaponLocked(weapons[i], num) && (!silencedRequired || flag) && (weaponDescriptor == null || weaponDescriptor.UnlockLevel < weapons[i].UnlockLevel || weapons[i].UnlockLevel == -1))
			{
				weaponDescriptor = weapons[i];
			}
		}
		return weaponDescriptor;
	}

	public Player PlayerGameSettings()
	{
		return m_PlayerSettings;
	}

	public Cash PlayerCash()
	{
		return m_PlayerCash;
	}

	public void Save()
	{
		SecureStorage.Instance.SetInt("versionNumber", 2);
		m_PlayerSettings.Save();
		m_PlayerCash.Save();
		SaveLoadHelper.SaveArray("soldier", mSoldiers);
		SaveLoadHelper.SaveArray("equipment", mEquipment);
		SaveLoadHelper.SaveArray("perks", mPerks);
		SecureStorage.Instance.SetString("armour", (!(mArmour != null)) ? string.Empty : mArmour.Name);
		for (int i = 0; i < CustomDescriptor.Length; i++)
		{
			SecureStorage.Instance.SetString("customDescriptor" + i, CustomDescriptor[i].Name);
		}
		SaveLoadHelper.SaveStringList("normalunlocked", mUnlockedEarly);
		SaveLoadHelper.SaveStringList("prounlocked", mProPerkUnlockedEarly);
		SecureStorage.Instance.SetInt("lastDifficultyLevel", (int)mLastKnownDifficultyMode);
		SecureStorage.Instance.SetInt("highlightMission", (int)mHighlightMission);
		SecureStorage.Instance.SetInt("highlightSection", mHighlightSection);
		SecureStorage.Instance.SetInt("AutoLoadoutMode", (int)mAutoLoadout);
		SecureStorage.Instance.SetInt("AutoLoadoutMode", (int)mAutoLoadout);
		SecureStorage.Instance.SetInt("timesOnLoadout", mTimesInLoadoutScreen);
		SecureStorage.Instance.SetInt("timesOnPerk", mTimesInPerkScreen);
		SecureStorage.Instance.SetInt("timesOnWeapon", mTimesInWeaponScreen);
		SecureStorage.Instance.SetBool("seenLevelUp", mLevelUpTutorialSeen);
		SecureStorage.Instance.SetBool("perkSlotLocked", mPerkSlotLocked);
	}

	public void Load()
	{
		mSaveGameVersion = SecureStorage.Instance.GetInt("versionNumber", -1);
		if (mSaveGameVersion != 2)
		{
		}
		m_PlayerSettings.Load();
		m_PlayerCash.Load();
		SaveLoadHelper.LoadArray("soldier", mSoldiers);
		SaveLoadHelper.LoadArray("equipment", mEquipment);
		SaveLoadHelper.LoadArray("perks", mPerks);
		EquipmentDescriptor armourDescriptor = WeaponManager.Instance.GetArmourDescriptor(SecureStorage.Instance.GetString("armour"));
		mArmour = ((!(armourDescriptor != null)) ? mArmour : armourDescriptor);
		for (int i = 0; i < CustomDescriptor.Length; i++)
		{
			WeaponDescriptor weaponDescriptor = WeaponManager.Instance.GetWeaponDescriptor(SecureStorage.Instance.GetString("customDescriptor" + i, DefaultCustomDescriptor[i].Name));
			CustomDescriptor[i] = weaponDescriptor ?? CustomDescriptor[i];
		}
		SaveLoadHelper.LoadStringList("normalunlocked", mUnlockedEarly);
		SaveLoadHelper.LoadStringList("prounlocked", mProPerkUnlockedEarly);
		mLastKnownDifficultyMode = (DifficultyMode)SecureStorage.Instance.GetInt("lastDifficultyLevel", 0);
		mHighlightMission = (MissionListings.eMissionID)SecureStorage.Instance.GetInt("highlightMission", 1);
		mHighlightSection = SecureStorage.Instance.GetInt("highlightSection", 0);
		mAutoLoadout = (AutoLoadout)SecureStorage.Instance.GetInt("AutoLoadoutMode");
		mTimesInLoadoutScreen = SecureStorage.Instance.GetInt("timesOnLoadout");
		mTimesInPerkScreen = SecureStorage.Instance.GetInt("timesOnPerk");
		mTimesInWeaponScreen = SecureStorage.Instance.GetInt("timesOnWeapon");
		mLevelUpTutorialSeen = SecureStorage.Instance.GetBool("seenLevelUp");
		SecureStorage.Instance.GetBool("perkSlotLocked", ref mPerkSlotLocked);
		RefreshActivePerks();
	}

	private void RefreshActivePerks()
	{
		for (int i = 0; i < mActivePerks.Length; i++)
		{
			mActivePerks[i] = false;
		}
		for (int j = 0; j < mPerks.Length; j++)
		{
			if (mPerks[j].Descriptor != null)
			{
				mActivePerks[(int)mPerks[j].Descriptor.Identifier] = true;
			}
		}
	}

	public void Reset()
	{
		mSaveGameVersion = 2;
		m_PlayerSettings.Reset();
		m_PlayerCash.Reset();
		SaveLoadHelper.ResetArray(mSoldiers);
		SaveLoadHelper.ResetArray(mEquipment);
		SaveLoadHelper.ResetArray(mPerks);
		mArmour = null;
		for (int i = 0; i < CustomDescriptor.Length; i++)
		{
			CustomDescriptor[i] = DefaultCustomDescriptor[i];
		}
		mUnlockedEarly.Clear();
		mProPerkUnlockedEarly.Clear();
		mPerkSlotLocked = true;
		for (int j = 0; j < mEquipment.Length; j++)
		{
			if (mEquipment[j] != null && mEquipment[j].Descriptor != null)
			{
				switch (mEquipment[j].Descriptor.Type)
				{
				case EquipmentIconController.EquipmentType.Claymore:
					mEquipment[j].NumItems = SwrveServerVariables.Instance.InitialClaymores;
					break;
				case EquipmentIconController.EquipmentType.Grenade:
					mEquipment[j].NumItems = SwrveServerVariables.Instance.InitialGrenades;
					break;
				case EquipmentIconController.EquipmentType.MediPack:
					mEquipment[j].NumItems = SwrveServerVariables.Instance.InitialHealthKits;
					break;
				}
			}
		}
		CacheAutoLoadouts();
		SetToBalanced(true);
		mHighlightMission = MissionListings.eMissionID.MI_MISSION_ARCTIC;
		mLastPlayedMission = MissionListings.eMissionID.MI_MAX;
		mHighlightSection = 0;
		mTimesInLoadoutScreen = 0;
		mTimesInPerkScreen = 0;
		mTimesInWeaponScreen = 0;
		mLevelUpTutorialSeen = false;
		RefreshActivePerks();
	}

	public bool WasUnlockedEarly(string itemName)
	{
		return mUnlockedEarly.Contains(itemName);
	}

	public void UnlockEarly(string itemName)
	{
		if (!mUnlockedEarly.Contains(itemName))
		{
			mUnlockedEarly.Add(itemName);
		}
	}

	public void UnlockPerkEarly(PerkType perk)
	{
		string item = perk.ToString();
		if (!mUnlockedEarly.Contains(item))
		{
			mUnlockedEarly.Add(item);
			SwrveEventsProgression.PerkUnlocked(perk, true);
			EventHub.Instance.Report(new Events.PerkUnlocked(perk));
		}
	}

	public bool WasProPerkUnlockedEarly(PerkType identifier)
	{
		return mProPerkUnlockedEarly.Contains(identifier.ToString());
	}

	public void UnlockProPerkEarly(PerkType identifier)
	{
		if (!mProPerkUnlockedEarly.Contains(identifier.ToString()))
		{
			mProPerkUnlockedEarly.Add(identifier.ToString());
			SwrveEventsProgression.ProPerkUnlocked(identifier, true);
			EventHub.Instance.Report(new Events.PerkUnlocked(identifier));
		}
	}

	public void UpdateGameSettingsWithSoldierPresence()
	{
		for (int i = 0; i < Soldiers.Length; i++)
		{
			SoldierSettings soldierSettings = Soldiers[i];
			soldierSettings.Present = false;
		}
		VtolSoldierPresent = false;
		Spawner[] array = UnityEngine.Object.FindObjectsOfType(typeof(Spawner)) as Spawner[];
		for (int j = 0; j < array.Length; j++)
		{
			if (array[j].Spawn.PlayerControlled && array[j].Spawn.soldierIndex >= 0)
			{
				if (array[j].Spawn.soldierIndex < 4)
				{
					SoldierSettings soldierSettings2 = Soldiers[array[j].Spawn.soldierIndex];
					soldierSettings2.Present = true;
				}
				else
				{
					VtolSoldierPresent = true;
				}
			}
		}
		if (!(MissionSetup.Instance != null) || MissionSetup.Instance.InitiallyDisabledPlayers == null)
		{
			return;
		}
		for (int k = 0; k < MissionSetup.Instance.InitiallyDisabledPlayers.Length; k++)
		{
			if (MissionSetup.Instance.InitiallyDisabledPlayers[k].theObject != null && !MissionSetup.Instance.InitiallyDisabledPlayers[k].theObject.gameObject.activeInHierarchy)
			{
				MissionSetup.Instance.InitiallyDisabledPlayers[k].theObject.SetActive(true);
				Spawner componentInChildren = MissionSetup.Instance.InitiallyDisabledPlayers[k].theObject.GetComponentInChildren<Spawner>();
				if (componentInChildren != null)
				{
					SoldierSettings soldierSettings3 = Soldiers[componentInChildren.Spawn.soldierIndex];
					soldierSettings3.Present = true;
				}
				MissionSetup.Instance.InitiallyDisabledPlayers[k].theObject.SetActive(false);
			}
		}
	}

	public void UpdateFromSwrve()
	{
		string itemId = "PerkSlot";
		Dictionary<string, string> resourceDictionary = null;
		if (Bedrock.GetRemoteUserResources(itemId, out resourceDictionary) && resourceDictionary != null)
		{
			PERK_SLOT_COST = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "Cost", PERK_SLOT_COST);
		}
		ALL_BUNDLE_COST = Bedrock.GetRemoteVariableAsInt("AllBundleCost", ALL_BUNDLE_COST);
		UpdateConsumables();
		UpdateIncreaseCost("GrenadeIncrease", GrenadeIncreaseCost);
		UpdateIncreaseCost("ClaymoreIncrease", ClaymoreIncreaseCost);
		UpdateIncreaseCost("MedipackIncrease", MediPackIncreaseCost);
	}

	private void UpdateConsumables()
	{
		for (int i = 0; i < mEquipment.Length; i++)
		{
			if (mEquipment[i] != null && mEquipment[i].Descriptor != null)
			{
				Dictionary<string, string> resourceDictionary = null;
				string itemId = "Consumable_" + mEquipment[i].Descriptor.name;
				if (Bedrock.GetRemoteUserResources(itemId, out resourceDictionary) && resourceDictionary != null)
				{
					mEquipment[i].Descriptor.HardCost = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "Cost_loadout", mEquipment[i].Descriptor.HardCost);
					mEquipment[i].Descriptor.InGameHardCost = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "Cost_mission", mEquipment[i].Descriptor.InGameHardCost);
				}
			}
		}
	}

	private void UpdateIncreaseCost(string id, int[] costs)
	{
		Dictionary<string, string> resourceDictionary = null;
		if (Bedrock.GetRemoteUserResources(id, out resourceDictionary) && resourceDictionary != null)
		{
			for (int i = 0; i < costs.Length; i++)
			{
				costs[i] = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "Cost_" + (i + 1), costs[i]);
			}
		}
	}

	public void ReceivedRewardFromKInvite(string message)
	{
		try
		{
			KInviteRewardsToShow += Convert.ToInt32(message);
			PlayerCash().AwardHardCashFreebie(Convert.ToInt32(message), "KInviteReward");
			Debug.Log("Received KInvite reward = " + message);
		}
		catch (OverflowException)
		{
			Debug.Log("KInvite reward is out of range - " + message);
		}
		catch (FormatException)
		{
			Debug.Log("KInvite reward is not a recognised int format - " + message);
		}
	}
}
