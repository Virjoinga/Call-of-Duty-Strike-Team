using System;
using System.IO;
using System.Xml.Serialization;
using UnityEngine;

public class DebugLogHandler : SingletonMonoBehaviour
{
	private static string logFile = "dump.log";

	public DebugLog Log = new DebugLog();

	public int MaxLogEntries = 100;

	public int LogEntriesToCullAtOneGo = 10;

	public static DebugLogHandler Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<DebugLogHandler>();
		}
	}

	protected override void Awake()
	{
		LoadLogFile();
		RegisterCallBack();
		base.Awake();
		UnityEngine.Object.DontDestroyOnLoad(this);
	}

	public static void ShowLog()
	{
		Application.LoadLevel("DebugLogView");
	}

	private void RegisterCallBack()
	{
		Application.RegisterLogCallback(HandleLog);
	}

	private void UnRegisterCallback()
	{
		Application.RegisterLogCallback(null);
	}

	private void HandleLog(string log, string stack, LogType type)
	{
		DebugLogEntry debugLogEntry = new DebugLogEntry();
		debugLogEntry.Log = log;
		debugLogEntry.Stack = stack;
		debugLogEntry.Type = type;
		debugLogEntry.LogTime = DateTime.Now;
		Log.DebugLogEntrys.Add(debugLogEntry);
		if (type != LogType.Log && type != LogType.Warning)
		{
			SaveOutLogFile();
		}
		if (Log.DebugLogEntrys.Count > MaxLogEntries)
		{
			Log.DebugLogEntrys.RemoveRange(0, LogEntriesToCullAtOneGo);
		}
	}

	protected override void OnDestroy()
	{
		SaveOutLogFile();
	}

	public void ClearLogFile()
	{
		Log = new DebugLog();
		SaveOutLogFile();
	}

	public void SaveOutLogFile()
	{
		UnRegisterCallback();
		string path = Application.persistentDataPath + Path.DirectorySeparatorChar + logFile;
		if (File.Exists(path))
		{
			File.Delete(path);
		}
		using (FileStream fileStream = new FileStream(path, FileMode.OpenOrCreate))
		{
			try
			{
				XmlSerializer xmlSerializer = new XmlSerializer(typeof(DebugLog));
				xmlSerializer.Serialize(fileStream, Log);
			}
			catch (Exception ex)
			{
				string message = ex.Message;
				Debug.Log(ex.Message);
				Debug.Log("goodbye");
				Debug.Log(message);
			}
			fileStream.Close();
		}
		RegisterCallBack();
	}

	public void LoadLogFile()
	{
		UnRegisterCallback();
		string path = Application.persistentDataPath + Path.DirectorySeparatorChar + logFile;
		if (File.Exists(path))
		{
			using (FileStream fileStream = new FileStream(path, FileMode.Open))
			{
				try
				{
					XmlSerializer xmlSerializer = new XmlSerializer(typeof(DebugLog));
					Log = xmlSerializer.Deserialize(fileStream) as DebugLog;
				}
				catch (Exception ex)
				{
					string message = ex.Message;
					Debug.Log(ex.Message);
					Debug.Log("goodbye");
					Debug.Log(message);
				}
				fileStream.Close();
			}
			if (Log == null)
			{
				Log = new DebugLog();
			}
		}
		RegisterCallBack();
	}
}
