using System;
using System.Collections.Generic;
using UnityEngine;

public class SingletonMonoBehaviour : SafeMonoBehaviour
{
	private static Dictionary<Type, SingletonMonoBehaviour> _singletonInstances = new Dictionary<Type, SingletonMonoBehaviour>();

	protected static T GetSingletonInstance<T>() where T : SingletonMonoBehaviour
	{
		return (T)GetSingletonInstance(typeof(T));
	}

	protected static T GetAutoGeneratedSingletonInstance<T>() where T : SingletonMonoBehaviour
	{
		T singletonInstance = GetSingletonInstance<T>();
		if ((UnityEngine.Object)singletonInstance == (UnityEngine.Object)null && !SafeMonoBehaviour.IsShuttingDown)
		{
			string text = typeof(T).Name;
			GameObject gameObject = (GameObject)UnityEngine.Object.Instantiate(Resources.Load("Game Prefabs/" + text));
			if (gameObject == null)
			{
				Debug.LogError("Unable to find resource named '" + text + "' to auto-instantiate singleton object.");
				return (T)null;
			}
			T component = gameObject.GetComponent<T>();
			if ((UnityEngine.Object)component == (UnityEngine.Object)null)
			{
				Debug.LogError("Unable to find component of type '" + text + "' on auto-instantiated singleton class.");
				return (T)null;
			}
			if (!TryRegisterInstance(component))
			{
				Debug.LogError("Unable to register auto-generated game object as singleton instance.");
				return (T)null;
			}
			return component;
		}
		return singletonInstance;
	}

	private static SingletonMonoBehaviour GetSingletonInstance(Type singletonType)
	{
		SingletonMonoBehaviour value;
		if (!_singletonInstances.TryGetValue(singletonType, out value))
		{
			return null;
		}
		return value;
	}

	protected static bool TryRegisterInstance(SingletonMonoBehaviour singletonInstance)
	{
		Type type = singletonInstance.GetType();
		SingletonMonoBehaviour singletonInstance2 = GetSingletonInstance(type);
		if (singletonInstance2 == null)
		{
			_singletonInstances[type] = singletonInstance;
			return true;
		}
		return singletonInstance2 == singletonInstance;
	}

	protected virtual void Awake()
	{
		if (!TryRegisterInstance(this))
		{
			UnityEngine.Object.Destroy(base.gameObject);
		}
		else
		{
			AwakeOnce();
		}
	}

	protected virtual void AwakeOnce()
	{
	}

	protected virtual void OnDestroy()
	{
		_singletonInstances.Remove(GetType());
	}
}
