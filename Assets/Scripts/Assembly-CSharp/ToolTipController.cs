using UnityEngine;

public class ToolTipController : SingletonMonoBehaviour
{
	private const float TOOLTIP_MINIMUM_DURATION = 7f;

	public InformationPopup TooltipPrefab;

	private InformationPopup mCurrentToolTip;

	private Rect mSafeBounds;

	private float mTimeToShow;

	private bool mLimitToBounds;

	public static ToolTipController Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<ToolTipController>();
		}
	}

	public bool IsAnyTooltipActive
	{
		get
		{
			return mCurrentToolTip != null;
		}
	}

	protected override void Awake()
	{
		base.Awake();
	}

	public void DoTooltip(string text, GameObject objectToDisplayOver, Rect safeBounds)
	{
		mSafeBounds = safeBounds;
		mLimitToBounds = true;
		DoTooltip(text, objectToDisplayOver);
	}

	public void DoTooltip(string text, GameObject objectToDisplayOver)
	{
		if (text != "THIS IS A TIP" && text != string.Empty)
		{
			if (mCurrentToolTip == null || objectToDisplayOver != mCurrentToolTip.Over)
			{
				ClearToolTip();
				MenuSFX.Instance.ToolTip.Play2D();
				mCurrentToolTip = (InformationPopup)Object.Instantiate(TooltipPrefab);
				mCurrentToolTip.transform.parent = objectToDisplayOver.transform;
				StartCoroutine(mCurrentToolTip.Display(text, objectToDisplayOver));
			}
			mTimeToShow = 7f;
		}
	}

	public void ClearToolTip()
	{
		if (mCurrentToolTip != null)
		{
			StartCoroutine(mCurrentToolTip.Remove());
			mCurrentToolTip = null;
		}
	}

	private void Update()
	{
		if (!(mCurrentToolTip != null))
		{
			return;
		}
		mTimeToShow -= TimeManager.DeltaTime;
		bool flag = false;
		if (mTimeToShow <= 0f || mCurrentToolTip.Over == null || !mCurrentToolTip.Over.activeSelf || (mCurrentToolTip.Over.renderer != null && !mCurrentToolTip.Over.renderer.enabled))
		{
			flag = true;
		}
		else if (mLimitToBounds)
		{
			Vector3 point = Camera.main.WorldToScreenPoint(mCurrentToolTip.Over.transform.position);
			if (!mSafeBounds.Contains(point))
			{
				flag = true;
			}
		}
		if (flag)
		{
			StartCoroutine(mCurrentToolTip.Remove());
			mCurrentToolTip = null;
			mLimitToBounds = false;
		}
	}
}
