using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class FrontEndController : SingletonMonoBehaviour
{
	private List<ScreenID> mScreenStack;

	private FrontEndScreen[] mScreens;

	private FrontEndScreenData[] mScreenData;

	private GlobeCamera mGlobeCamera;

	private MenuScreenBlade mNewsTicker;

	private SalePromotionBanner mSalePromotion;

	private FlashpointBanner mFlashpointBanner;

	private ScreenID mTransitionedFrom;

	private bool mBusy;

	public static FrontEndController Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<FrontEndController>();
		}
	}

	public ScreenID ActiveScreen
	{
		get
		{
			if (mScreenStack != null && mScreenStack.Count > 0)
			{
				return mScreenStack[mScreenStack.Count - 1];
			}
			return ScreenID.None;
		}
	}

	public ScreenID PreviousScreen
	{
		get
		{
			return mTransitionedFrom;
		}
	}

	public bool IsBusy
	{
		get
		{
			return mBusy;
		}
	}

	public bool IsInFrontend
	{
		get
		{
			return mScreens[0] != null;
		}
	}

	public bool HasLoadout
	{
		get
		{
			return mScreens[6] != null;
		}
	}

	public bool IsLoaded
	{
		get
		{
			return mScreens[0] != null || mScreens[10] != null;
		}
	}

	public bool LastScreenIsTransitioningOff
	{
		get
		{
			if (mTransitionedFrom != ScreenID.None)
			{
				FrontEndScreen frontEndScreen = mScreens[(int)mTransitionedFrom];
				return frontEndScreen != null && frontEndScreen.IsAnyBladeTransitioningOff;
			}
			return false;
		}
	}

	public bool IsFlashpointBannerShowing
	{
		get
		{
			bool result = false;
			if (mFlashpointBanner != null)
			{
				result = mFlashpointBanner.IsActive || mFlashpointBanner.IsTransitioningOn;
			}
			return result;
		}
	}

	public int FlashpointBannerShowingIndex
	{
		get
		{
			int result = 0;
			if (mFlashpointBanner != null && (mFlashpointBanner.IsActive || mFlashpointBanner.IsTransitioningOn))
			{
				result = mFlashpointBanner.ShowingIndex;
			}
			return result;
		}
	}

	public void RegisterScreen(FrontEndScreen screen)
	{
		if (screen != null)
		{
			if (mScreens != null)
			{
				mScreens[(int)screen.ID] = screen;
			}
			if (screen.ID == ScreenID.MissionSelect)
			{
				mGlobeCamera = UnityEngine.Object.FindObjectOfType(typeof(GlobeCamera)) as GlobeCamera;
			}
		}
	}

	private void OnEnable()
	{
		if (EventHub.Instance != null)
		{
			EventHub.Instance.OnNewFlashpointActive += NewFlashpointDetected;
		}
		Bedrock.UserResourcesChanged += HandleBedrockUserResourcesChanged;
	}

	private void OnDisable()
	{
		if (EventHub.Instance != null)
		{
			EventHub.Instance.OnNewFlashpointActive -= NewFlashpointDetected;
		}
		Bedrock.UserResourcesChanged -= HandleBedrockUserResourcesChanged;
	}

	public bool TransitionTo(ScreenID id)
	{
		bool result = false;
		if (!mBusy && ActiveScreen != id)
		{
			mBusy = true;
			StartCoroutine(DoTransition(id));
			if (mScreenStack.Contains(id))
			{
				int num = mScreenStack.IndexOf(id);
				int count = mScreenStack.Count - (num + 1);
				mScreenStack.RemoveRange(num + 1, count);
			}
			else if (id != ScreenID.None)
			{
				mScreenStack.Add(id);
			}
			else
			{
				mScreenStack.Clear();
			}
			result = true;
		}
		return result;
	}

	public void ForceReturnToPrevious()
	{
		mBusy = false;
		ReturnToPrevious();
	}

	public void ReturnToGlobe()
	{
		TransitionTo(ScreenID.MissionSelect);
	}

	public bool ReturnToPrevious()
	{
		bool result = false;
		if (!mBusy && (!(PurchaseHandler.Instance != null) || !PurchaseHandler.Instance.PurchaseInProgress))
		{
			int num = mScreenStack.Count - 1;
			if (MessageBoxController.Instance.IsAnyMessageActive)
			{
				MessageBoxController.Instance.ForceCancel();
				result = true;
			}
			else if (mScreenStack[num] == ScreenID.SquadLoadOut)
			{
				MessageBoxController instance = MessageBoxController.Instance;
				if (instance != null && !instance.IsAnyMessageActive && !mBusy)
				{
					instance.DoConfirmQuitDialogue(this, "ConfirmQuit", "MessageBoxCancelled");
				}
				result = true;
			}
			else if (ActiveScreen != ScreenID.None)
			{
				ScreenID screenID = ScreenID.None;
				if (num > 0)
				{
					screenID = mScreenStack[num - 1];
				}
				mBusy = true;
				StartCoroutine(DoTransition(screenID));
				if (screenID != ScreenID.None)
				{
					mScreenStack.RemoveAt(num);
				}
				else
				{
					mScreenStack.Clear();
				}
				result = true;
			}
			else
			{
				result = false;
			}
			if (mGlobeCamera != null)
			{
				mGlobeCamera.ClearFocusMission();
			}
		}
		return result;
	}

	public void ConfirmEpilogue()
	{
		if (TransitionTo(ScreenID.None))
		{
			TimeManager.instance.UnpauseGame();
			StartCoroutine(QuitMissionDelayedEpilogue(false));
		}
	}

	public void ConfirmContinue()
	{
		if (TransitionTo(ScreenID.None))
		{
			StartCoroutine(QuitMissionDelayed(false));
		}
	}

	public void ConfirmQuit()
	{
		if (TransitionTo(ScreenID.None))
		{
			StartCoroutine(QuitMissionDelayed(true));
		}
	}

	public void ConfirmClose()
	{
		Debug.Log("QUIT!!");
		StartCoroutine(QuitAfterBlackingOutAllCameras());
	}

	private IEnumerator QuitAfterBlackingOutAllCameras()
	{
		Camera[] allCameras = Camera.allCameras;
		foreach (Camera camera in allCameras)
		{
			camera.clearFlags = CameraClearFlags.Color;
			camera.backgroundColor = Color.black;
			camera.cullingMask = 0;
		}
		for (int i = 0; i < 4; i++)
		{
			yield return null;
		}
		Application.Quit();
	}

	public void ConfirmRestart()
	{
		if (TransitionTo(ScreenID.None))
		{
			StartCoroutine(RestartMissionDelayed());
		}
	}

	public void ConfirmNextSection()
	{
		if (TransitionTo(ScreenID.None))
		{
			StartCoroutine(StartNextSectionDelayed());
		}
	}

	private bool TransitionToMTX()
	{
		return TransitionTo(ScreenID.MTXSelect);
	}

	private IEnumerator QuitMissionDelayed(bool quit)
	{
		AnimatedScreenBackground bg = AnimatedScreenBackground.Instance;
		if (bg != null)
		{
			if (!bg.IsActiveOrBecomingActive)
			{
				bg.Activate();
			}
			while (!bg.IsActive)
			{
				yield return null;
			}
		}
		while (IsBusy)
		{
			yield return null;
		}
		if (quit)
		{
			ActStructure.Instance.MissionQuit();
		}
		if (mNewsTicker != null)
		{
			NewsTicker news = mNewsTicker.GetComponentInChildren<NewsTicker>();
			if (news != null)
			{
				news.RefreshEntryList();
			}
		}
		Application.LoadLevel("GlobeSelectCore");
		TBFUtils.UberGarbageCollect();
	}

	private IEnumerator QuitMissionDelayedEpilogue(bool quit)
	{
		while (IsBusy)
		{
			yield return null;
		}
		if (quit)
		{
			ActStructure.Instance.MissionQuit();
		}
		Application.LoadLevel("EpilogueMovie");
	}

	private IEnumerator RestartMissionDelayed()
	{
		AnimatedScreenBackground bg = AnimatedScreenBackground.Instance;
		if (bg != null)
		{
			if (!bg.IsActiveOrBecomingActive)
			{
				bg.Activate();
			}
			while (!bg.IsActive)
			{
				yield return null;
			}
		}
		while (IsBusy)
		{
			yield return null;
		}
		if (ActStructure.Instance.MissionInProgress)
		{
			ActStructure.Instance.MissionQuit();
		}
		ActStructure.Instance.MissionReplay();
		SceneLoader.AsyncLoadSceneWithLoadingScreen(Application.loadedLevelName);
	}

	private IEnumerator StartNextSectionDelayed()
	{
		while (IsBusy)
		{
			yield return null;
		}
		if (ActStructure.Instance.MissionInProgress)
		{
			ActStructure.Instance.MissionQuit();
		}
		ActStructure.Instance.MissionNextSection();
		string levelName = MissionListings.Instance.Mission(ActStructure.Instance.CurrentMissionID).Sections[ActStructure.Instance.CurrentSection].SceneName;
		SceneLoader.AsyncLoadSceneWithLoadingScreen(levelName);
	}

	private void MessageBoxCancelled()
	{
	}

	protected override void Awake()
	{
		base.Awake();
		mScreenStack = new List<ScreenID>();
		mScreens = new FrontEndScreen[17];
		mScreenData = new FrontEndScreenData[17];
		bool flag = TBFUtils.IsSmallScreenDevice() || TBFUtils.IsSmallRetinaDevice();
		SetupScreen(new FrontEndScreenData(ScreenID.MissionSelect, "S_MISSION_SELECT_TITLE", false, true, false, false, true, true));
		SetupScreen(new FrontEndScreenData(ScreenID.MissionOverview, string.Empty, true, true, false, false, !flag, false));
		SetupScreen(new FrontEndScreenData(ScreenID.ChallengeSelect, "S_CHALLENGES", true, true, false, true, !flag, false));
		SetupScreen(new FrontEndScreenData(ScreenID.Settings, "S_SETTINGS", true, true, false, true, true, false));
		SetupScreen(new FrontEndScreenData(ScreenID.Statistics, "S_STATS", true, true, false, true, !flag, false));
		SetupScreen(new FrontEndScreenData(ScreenID.MTXSelect, "S_RESOURCES", true, true, false, true, true, false));
		SetupScreen(new FrontEndScreenData(ScreenID.SquadLoadOut, "S_LOADOUT", true, true, false, true, false, true));
		SetupScreen(new FrontEndScreenData(ScreenID.WeaponSelect, "S_CUSTOM_LOADOUT", true, true, false, true, false, false));
		SetupScreen(new FrontEndScreenData(ScreenID.PerkSelect, "S_CUSTOM_LOADOUT", true, true, false, true, false, false));
		SetupScreen(new FrontEndScreenData(ScreenID.EquipmentSelect, "S_CUSTOM_LOADOUT", true, true, false, true, false, false));
		SetupScreen(new FrontEndScreenData(ScreenID.Pause, string.Empty, true, true, false, false, false, false));
		SetupScreen(new FrontEndScreenData(ScreenID.MissionComplete, string.Empty, false, true, false, true, false, false));
		SetupScreen(new FrontEndScreenData(ScreenID.Leaderboards, "S_HIGH_SCORE", true, true, false, true, !flag, false));
		SetupScreen(new FrontEndScreenData(ScreenID.ArmourSelect, "S_CUSTOM_LOADOUT", true, true, false, true, false, false));
		SetupScreen(new FrontEndScreenData(ScreenID.ContinueScreen, "S_MTX_HEAL_REVIVE", false, true, false, false, false, false));
		SetupScreen(new FrontEndScreenData(ScreenID.BundleSelect, "S_CUSTOM_LOADOUT", true, true, false, true, false, false));
		SetupScreen(new FrontEndScreenData(ScreenID.HUDEditScreen, string.Empty, false, false, false, false, false, false));
		Transform transform = base.transform.Find("NewsTicker");
		if (transform != null)
		{
			mNewsTicker = transform.GetComponent<MenuScreenBlade>();
		}
		mSalePromotion = GetComponentInChildren<SalePromotionBanner>();
		mSalePromotion.gameObject.SetActive(false);
		mFlashpointBanner = GetComponentInChildren<FlashpointBanner>();
		mFlashpointBanner.gameObject.SetActive(false);
		UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
	}

	private void SetupScreen(FrontEndScreenData data)
	{
		mScreenData[(int)data.ID] = data;
	}

	private IEnumerator DoTransition(ScreenID id)
	{
		mBusy = true;
		mTransitionedFrom = ActiveScreen;
		ToolTipController.Instance.ClearToolTip();
		FrontEndScreen nextScreen = ((id == ScreenID.None) ? null : mScreens[(int)id]);
		FrontEndScreenData data = ((id == ScreenID.None) ? null : mScreenData[(int)id]);
		TitleBarController title = TitleBarController.Instance;
		if (title != null)
		{
			if (data != null)
			{
				if (data.AllowBack)
				{
					title.SetWithBackButton(data.Title, false, this, "ReturnToPrevious", "TransitionToMTX");
				}
				else
				{
					title.SetWithoutBackButton(data.Title, false, this, "TransitionToMTX");
				}
				if (!data.AllowMTX)
				{
					title.DisableMTXButton();
				}
			}
			else
			{
				title.Dismiss();
			}
		}
		AnimatedScreenBackground bg = AnimatedScreenBackground.Instance;
		if (bg != null && data != null)
		{
			if (bg.IsActiveOrBecomingActive && !data.UseBackground)
			{
				bg.Hide();
			}
			else if (!bg.IsActiveOrBecomingActive && data.UseBackground)
			{
				bg.Activate();
			}
		}
		bool bringOnFlashpointBanner = RefreshFlashpointBanner(data);
		bool bringOnSaleBanner = RefreshSaleBanner(data);
		if (mNewsTicker != null)
		{
			NewsTicker newsTicker = mNewsTicker.gameObject.GetComponentInChildren<NewsTicker>();
			bool newsTickerIsActiveOrComingOn = mNewsTicker.IsActive || mNewsTicker.IsTransitioningOn;
			if (newsTickerIsActiveOrComingOn && (data == null || !data.UseNewsTicker))
			{
				if (newsTicker != null)
				{
					newsTicker.enabled = false;
				}
				mNewsTicker.Deactivate();
			}
			else if (!newsTickerIsActiveOrComingOn && data != null && data.UseNewsTicker && IsInFrontend)
			{
				if (newsTicker != null)
				{
					newsTicker.enabled = true;
				}
				mNewsTicker.Activate();
			}
		}
		if (mTransitionedFrom != ScreenID.None)
		{
			FrontEndScreen currentScreen = mScreens[(int)mTransitionedFrom];
			currentScreen.ExitScreen();
			while (currentScreen.IsTransitioning)
			{
				yield return new WaitForEndOfFrame();
			}
			currentScreen.OffScreen();
			Screen.sleepTimeout = -1;
			currentScreen.gameObject.SetActive(false);
		}
		if (nextScreen != null)
		{
			nextScreen.gameObject.SetActive(true);
			nextScreen.EnterScreen();
			while (!nextScreen.IsActive)
			{
				yield return new WaitForEndOfFrame();
			}
			nextScreen.OnScreen();
			Screen.sleepTimeout = -2;
		}
		if (bringOnFlashpointBanner)
		{
			mFlashpointBanner.Activate();
		}
		if (bringOnSaleBanner)
		{
			mSalePromotion.Activate();
		}
		mBusy = false;
		yield return null;
	}

	public void NewFlashpointDetected(object sender, Events.NewFlashpointActive args)
	{
		if (!mBusy && mFlashpointBanner != null && !mFlashpointBanner.IsActive && !mFlashpointBanner.IsTransitioningOn && ActiveScreen == ScreenID.MissionSelect)
		{
			if (!mFlashpointBanner.gameObject.activeInHierarchy)
			{
				mFlashpointBanner.gameObject.SetActive(true);
			}
			mFlashpointBanner.Setup(this, "FlashpointBannerPressed", args.GlobalUnrestIndex);
		}
	}

	private void HandleBedrockUserResourcesChanged(object sender, EventArgs e)
	{
		ScreenID activeScreen = ActiveScreen;
		FrontEndScreenData data = ((activeScreen == ScreenID.None) ? null : mScreenData[(int)activeScreen]);
		if (RefreshFlashpointBanner(data))
		{
			mFlashpointBanner.Activate();
		}
		if (RefreshSaleBanner(data))
		{
			mSalePromotion.Activate();
		}
		if (TitleBarController.HasInstance)
		{
			TitleBarController.Instance.RefreshMTXSaleIcon();
		}
	}

	private int FindMostCriticalFlashpoint()
	{
		int result = -1;
		int num = int.MaxValue;
		GlobalUnrestController instance = GlobalUnrestController.Instance;
		if (instance != null)
		{
			for (int i = 0; i < 8; i++)
			{
				int timeRemainingInSeconds = instance.GetTimeRemainingInSeconds(i);
				if (timeRemainingInSeconds > 0 && timeRemainingInSeconds < num && timeRemainingInSeconds <= 900)
				{
					num = timeRemainingInSeconds;
					result = i;
				}
			}
		}
		return result;
	}

	private bool RefreshFlashpointBanner(FrontEndScreenData data)
	{
		bool result = false;
		if (data != null && mFlashpointBanner != null && PurchaseHandler.Instance != null)
		{
			int num = FindMostCriticalFlashpoint();
			bool flag = data.ID == ScreenID.MissionSelect && num >= 0;
			bool flag2 = mFlashpointBanner.IsActive || mFlashpointBanner.IsTransitioningOn;
			if (flag2 && (data == null || !data.CanShowBanner || !flag))
			{
				mFlashpointBanner.Deactivate();
			}
			else if (!flag2 && data != null && data.CanShowBanner && flag)
			{
				if (!mFlashpointBanner.gameObject.activeInHierarchy)
				{
					mFlashpointBanner.gameObject.SetActive(true);
				}
				mFlashpointBanner.Setup(this, "FlashpointBannerPressed", num);
				result = true;
			}
		}
		else if (mFlashpointBanner != null && (mFlashpointBanner.IsActive || mFlashpointBanner.IsTransitioningOn))
		{
			mFlashpointBanner.Deactivate();
		}
		return result;
	}

	private bool RefreshSaleBanner(FrontEndScreenData data)
	{
		bool result = false;
		if (data != null && mSalePromotion != null && PurchaseHandler.Instance != null)
		{
			bool tokenOfferInProgress = PurchaseHandler.Instance.TokenOfferInProgress;
			bool flag = mSalePromotion.IsActive || mSalePromotion.IsTransitioningOn;
			if (flag && (data == null || !data.CanShowBanner || !tokenOfferInProgress))
			{
				mSalePromotion.Deactivate();
			}
			else if (!flag && data != null && data.CanShowBanner && tokenOfferInProgress)
			{
				if (!mSalePromotion.gameObject.activeInHierarchy)
				{
					mSalePromotion.gameObject.SetActive(true);
				}
				mSalePromotion.Setup(this, "SaleBannerPressed", PurchaseHandler.Instance.TokenOfferBestPercentageExtra(), PurchaseHandler.Instance.GetTokenOfferRemainingSeconds(), SalePromotionBanner.IconType.Token);
				result = true;
			}
		}
		else if (mSalePromotion != null && (mSalePromotion.IsActive || mSalePromotion.IsTransitioningOn))
		{
			mSalePromotion.Deactivate();
		}
		return result;
	}

	private void Update()
	{
		if (Input.GetKeyDown(KeyCode.Escape))
		{
			bool flag = (ActiveScreen != ScreenID.None && mScreenData[(int)ActiveScreen].AllowBack) || MessageBoxController.Instance.IsAnyMessageActive;
			Debug.Log("backing out from - " + ActiveScreen);
			if (!flag || !ReturnToPrevious())
			{
				if (ActiveScreen == ScreenID.MissionSelect)
				{
					MessageBoxController instance = MessageBoxController.Instance;
					if (instance != null && !instance.IsAnyMessageActive && !mBusy)
					{
						instance.DoConfirmCloseGameDialogue(this, "ConfirmClose", "MessageBoxCancelled");
					}
				}
				else if (ActiveScreen == ScreenID.None && CommonHudController.Instance != null && CommonHudController.Instance.PauseButton != null && CommonHudController.Instance.PauseButton.gameObject.activeInHierarchy)
				{
					GameController.Instance.TogglePause();
				}
			}
		}
		if (ActiveScreen == ScreenID.MissionSelect && mFlashpointBanner != null && !mFlashpointBanner.IsActive)
		{
			FrontEndScreenData data = mScreenData[(int)ActiveScreen];
			if (RefreshFlashpointBanner(data))
			{
				mFlashpointBanner.Activate();
			}
		}
	}

	private void SaleBannerPressed()
	{
		ScreenID screenID = ScreenID.MTXSelect;
		if (mScreens[(int)screenID] != null)
		{
			TransitionTo(screenID);
		}
	}

	private void FlashpointBannerPressed()
	{
		if (!IsFlashpointBannerShowing)
		{
			return;
		}
		GlobalUnrestController instance = GlobalUnrestController.Instance;
		if (instance != null)
		{
			MissionData missionData = instance.GetMissionData(FlashpointBannerShowingIndex);
			if (missionData != null && mGlobeCamera != null)
			{
				mGlobeCamera.GotoMission(missionData.MissionId);
			}
		}
	}
}
