using System.Collections.Generic;
using UnityEngine;

public class WeaponManager : SingletonMonoBehaviour, iSwrveUpdatable
{
	public WeaponDescriptor[] AssaultRifles;

	public WeaponDescriptor[] LightMachineGuns;

	public WeaponDescriptor[] SniperRifles;

	public WeaponDescriptor[] Shotguns;

	public WeaponDescriptor[] SMGs;

	public WeaponDescriptor[] TutorialWeapons;

	public EquipmentDescriptor[] LoadoutEquipment;

	public EquipmentDescriptor[] SupportEquipment;

	public EquipmentDescriptor[] ArmourUpgradeOrder;

	public BundleDescriptor[] Bundles;

	public static WeaponManager Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<WeaponManager>();
		}
	}

	protected override void Awake()
	{
		Object.DontDestroyOnLoad(this);
		base.Awake();
		WeaponUtils.MuzzleList = null;
	}

	public WeaponDescriptor GetWeaponDescriptor(string name)
	{
		WeaponDescriptor[][] array = new WeaponDescriptor[5][] { AssaultRifles, LightMachineGuns, SniperRifles, Shotguns, SMGs };
		WeaponDescriptor[][] array2 = array;
		foreach (WeaponDescriptor[] array3 in array2)
		{
			for (int j = 0; j < array3.Length; j++)
			{
				if (array3[j].Name == name)
				{
					return array3[j];
				}
			}
		}
		return null;
	}

	public EquipmentDescriptor GetEquipmentDescriptor(string name)
	{
		for (int i = 0; i < LoadoutEquipment.Length; i++)
		{
			if (LoadoutEquipment[i].Name == name)
			{
				return LoadoutEquipment[i];
			}
		}
		return null;
	}

	public EquipmentDescriptor GetArmourDescriptor(string name)
	{
		for (int i = 0; i < ArmourUpgradeOrder.Length; i++)
		{
			if (ArmourUpgradeOrder[i].Name == name)
			{
				return ArmourUpgradeOrder[i];
			}
		}
		return null;
	}

	public void UpdateFromSwrve()
	{
		SwrveUpdateWeapons();
		SwrveUpdateArmour();
		SwrveUpdateBundles();
	}

	private void SwrveUpdateArmour()
	{
		Dictionary<string, string> resourceDictionary = null;
		if (Bedrock.GetRemoteUserResources("Armour", out resourceDictionary))
		{
			EquipmentDescriptor[] armourUpgradeOrder = ArmourUpgradeOrder;
			foreach (EquipmentDescriptor equipmentDescriptor in armourUpgradeOrder)
			{
				equipmentDescriptor.HardCost = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, equipmentDescriptor.name, equipmentDescriptor.HardCost);
			}
		}
	}

	private void SwrveUpdateBundles()
	{
		BundleDescriptor[] bundles = Bundles;
		foreach (BundleDescriptor bundle in bundles)
		{
			UpdateBundle(bundle);
		}
	}

	private void UpdateBundle(BundleDescriptor bundle)
	{
		string itemId = "Bundle_" + bundle.name;
		Dictionary<string, string> resourceDictionary = null;
		if (Bedrock.GetRemoteUserResources(itemId, out resourceDictionary) && resourceDictionary != null)
		{
			bundle.HardCost = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "Cost", bundle.HardCost);
		}
	}

	private void SwrveUpdateWeapons()
	{
		WeaponDescriptor[][] array = new WeaponDescriptor[5][] { AssaultRifles, LightMachineGuns, SniperRifles, Shotguns, SMGs };
		WeaponDescriptor[][] array2 = array;
		foreach (WeaponDescriptor[] array3 in array2)
		{
			for (int j = 0; j < array3.Length; j++)
			{
				UpdateWeapon(array3[j]);
			}
		}
	}

	private void UpdateWeapon(WeaponDescriptor weapon)
	{
		string itemId = "weapon." + weapon.name;
		Dictionary<string, string> resourceDictionary = null;
		if (Bedrock.GetRemoteUserResources(itemId, out resourceDictionary) && resourceDictionary != null)
		{
			weapon.UnlockLevel = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "unlocklevel", weapon.UnlockLevel);
			weapon.Capacity = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "capacity", weapon.Capacity);
			weapon.ReloadTime = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "reload", weapon.ReloadTime);
			weapon.FirstPersonAccuracy = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "firstpersonaccuracy", weapon.FirstPersonAccuracy);
			weapon.ThirdPersonAccuracy = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "thirdpersonaccuracy", weapon.ThirdPersonAccuracy);
			weapon.Range = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "range", weapon.Range);
			weapon.RunSpeed = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "runspeed", weapon.RunSpeed);
			weapon.HardCost = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "hardcost", weapon.HardCost);
			weapon.UnlockCost = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "unlockearlycost", weapon.UnlockCost);
		}
	}

	public bool IsWeaponLocked(WeaponDescriptor weapon, int xpLevel)
	{
		GameSettings instance = GameSettings.Instance;
		return (weapon.UnlockLevel > xpLevel || weapon.UnlockLevel == -1) && !instance.WasUnlockedEarly(weapon.Name);
	}

	public BundleDescriptor GetWeaponBundle(WeaponDescriptor weapon)
	{
		BundleDescriptor result = null;
		for (int i = 0; i < Bundles.Length; i++)
		{
			if (Bundles[i].Weapon == weapon)
			{
				result = Bundles[i];
				break;
			}
		}
		return result;
	}

	public BundleDescriptor GetPerkBundle(PerkType perk)
	{
		BundleDescriptor result = null;
		for (int i = 0; i < Bundles.Length; i++)
		{
			if (Bundles[i].Perk == perk)
			{
				result = Bundles[i];
				break;
			}
		}
		return result;
	}
}
