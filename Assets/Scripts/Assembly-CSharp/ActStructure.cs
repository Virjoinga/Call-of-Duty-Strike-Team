using System;
using UnityEngine;

public class ActStructure : SingletonMonoBehaviour, ISaveLoad
{
	private const string UnlockKey = "Unlock.";

	private MissionListings.eMissionID mCurrentMissionId;

	private MissionListings.eMissionID mLastMissionId;

	private int mCurrentSection;

	private bool mJustCompleted;

	private DifficultyMode mCurrentMissionMode;

	public MissionListings.eMissionID LastMissionID
	{
		get
		{
			return mLastMissionId;
		}
	}

	public MissionListings.eMissionID CurrentMissionID
	{
		get
		{
			return mCurrentMissionId;
		}
	}

	public int CurrentMissionSection
	{
		get
		{
			return mCurrentSection;
		}
	}

	public DifficultyMode CurrentMissionMode
	{
		get
		{
			return mCurrentMissionMode;
		}
		private set
		{
			mCurrentMissionMode = value;
		}
	}

	public bool GameJustCompleted
	{
		get
		{
			return mJustCompleted;
		}
		set
		{
			mJustCompleted = value;
		}
	}

	public int CurrentSection
	{
		get
		{
			return mCurrentSection;
		}
	}

	public static ActStructure Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<ActStructure>();
		}
	}

	public bool MissionInProgress
	{
		get
		{
			return mCurrentMissionId != MissionListings.eMissionID.MI_MAX;
		}
	}

	public MissionData[] AvailableMissions
	{
		get
		{
			return MissionListings.Instance.Missions;
		}
	}

	public static event EventHandler<EventArgs> OnLoad;

	public static event EventHandler<EventArgs> OnMissionStart;

	public GMGData.GameType CurrentMissionType()
	{
		MissionData missionData = MissionListings.Instance.Mission(mCurrentMissionId);
		if (missionData != null && CurrentSection >= 0 && CurrentSection < missionData.Sections.Count)
		{
			return missionData.Sections[CurrentSection].GMGGameType;
		}
		return GMGData.GameType.Total;
	}

	public bool CurrentMissionSectionIsTutorial()
	{
		MissionData missionData = MissionListings.Instance.Mission(mCurrentMissionId);
		if (missionData == null)
		{
			return false;
		}
		if (CurrentSection >= 0 && CurrentSection < missionData.Sections.Count)
		{
			return missionData.Sections[CurrentSection].IsTutorial;
		}
		return false;
	}

	public bool CurrentMissionIsSpecOps()
	{
		return MissionIsSpecOps(mCurrentMissionId, mCurrentSection);
	}

	public bool CurrentMissionIsVTOL()
	{
		if (mCurrentMissionId != MissionListings.eMissionID.MI_MAX && mCurrentSection != -1)
		{
			MissionData missionData = MissionListings.Instance.Mission(mCurrentMissionId);
			return missionData.Sections[mCurrentSection].IsVTOL;
		}
		return false;
	}

	public bool MissionIsSpecOps(MissionListings.eMissionID id, int section)
	{
		MissionData missionData = MissionListings.Instance.Mission(id);
		if (missionData != null && section >= 0 && section < missionData.Sections.Count)
		{
			return missionData.Sections[section].IsSpecOps;
		}
		return false;
	}

	public GMGData.GameType CurrentGMGGameType()
	{
		MissionData missionData = MissionListings.Instance.Mission(mCurrentMissionId);
		if (missionData != null && mCurrentSection >= 0 && mCurrentSection < missionData.Sections.Count)
		{
			return missionData.Sections[mCurrentSection].GMGGameType;
		}
		return GMGData.GameType.Total;
	}

	protected override void Awake()
	{
		UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
		mCurrentMissionId = MissionListings.eMissionID.MI_MAX;
		mCurrentSection = -1;
		mLastMissionId = MissionListings.eMissionID.MI_MAX;
		mCurrentMissionMode = DifficultyMode.None;
		SetupNewGame();
		mJustCompleted = false;
		base.Awake();
	}

	public void SetupNewGame()
	{
	}

	public void MissionQuit()
	{
		MissionFinished(false, true, 0f);
	}

	public void MissionFinished(bool passed, float timePlayed)
	{
		MissionFinished(passed, false, timePlayed);
	}

	private void MissionFinished(bool passed, bool quit, float timePlayed)
	{
		FirstPersonOnly.ClearList();
		BuildingWithInterior.ClearList();
		if (mCurrentMissionId == MissionListings.eMissionID.MI_MAX)
		{
			return;
		}
		UnlockSectionsForXpLevel();
		if (passed)
		{
			UnlockOnMissionSuccessful(mCurrentMissionId, mCurrentSection);
			EventHub.Instance.Report(new Events.EndMission(mCurrentMissionId, mCurrentSection, mCurrentMissionMode, true, false, timePlayed));
			SwrveEventsGameplay.MissionPass(mCurrentMissionId, mCurrentSection);
			if (!MissionListings.Instance.Mission(mCurrentMissionId).Sections[mCurrentSection].IsSpecOps)
			{
				SwrveEventsProgression.PassedCampaignSection(mCurrentMissionId, mCurrentSection);
			}
		}
		else
		{
			EventHub.Instance.Report(new Events.EndMission(mCurrentMissionId, mCurrentSection, mCurrentMissionMode, false, quit, timePlayed));
			SwrveEventsGameplay.MissionFail(mCurrentMissionId, mCurrentSection);
		}
		SwrveEventsGameplay.MissionComplete(mCurrentMissionId, mCurrentSection);
		if (MissionIsSpecOps(mCurrentMissionId, mCurrentSection))
		{
			SwrveEventsGameplay.SpecOpsMissionComplete(mCurrentMissionId, mCurrentSection, Instance.CurrentMissionType());
		}
		CheckpointManager.Instance.ClearCheckpointData();
		StatsManager.Instance.EndSession();
		SecureStorage.Instance.SaveAllData();
		mLastMissionId = mCurrentMissionId;
		mCurrentMissionId = MissionListings.eMissionID.MI_MAX;
		SwrveUserData.Instance.UploadAllAttributes();
		AmmoDropManager.Instance.Reset();
	}

	public void MissionNextSection()
	{
		MissionData missionData = MissionListings.Instance.Mission(LastMissionID);
		MissionListings.eMissionID eMissionID = LastMissionID;
		int num = mCurrentSection + 1;
		if (num >= missionData.NumStorySections)
		{
			switch (eMissionID)
			{
			case MissionListings.eMissionID.MI_MISSION_ARCTIC:
				eMissionID = MissionListings.eMissionID.MI_MISSION_AFGHANISTAN;
				num = 0;
				break;
			case MissionListings.eMissionID.MI_MISSION_AFGHANISTAN:
				eMissionID = MissionListings.eMissionID.MI_MISSION_KOWLOON;
				num = 0;
				break;
			case MissionListings.eMissionID.MI_MISSION_KOWLOON:
				TBFAssert.DoAssert(false, "Trying to go to the next section at the end of Kowloon, this is not possible!");
				break;
			}
		}
		MissionStart(eMissionID, mCurrentMissionMode, num);
	}

	public void MissionStart(MissionListings.eMissionID id, DifficultyMode mode, int section)
	{
		SwrveUserData.Instance.UploadAllAttributes();
		mCurrentMissionId = id;
		mCurrentMissionMode = mode;
		mCurrentSection = section;
		StatsManager.Instance.BeginSession();
		GMGData.Instance.Reset();
		WaveStats.Instance.Reset();
		TutorialToggles.Reset();
		EventHub.Instance.Report(new Events.StartMission(mCurrentMissionId, mCurrentSection, mode));
		SwrveEventsGameplay.MissionStarted(mCurrentMissionId, mCurrentSection);
		if (!MissionListings.Instance.Mission(mCurrentMissionId).Sections[mCurrentSection].IsSpecOps)
		{
			SwrveEventsProgression.StartedCampaignSection(mCurrentMissionId, mCurrentSection);
		}
		else
		{
			SwrveEventsGameplay.SpecOpsMissionStarted(mCurrentMissionId, mCurrentSection, Instance.CurrentMissionType());
		}
		if (ActStructure.OnMissionStart != null)
		{
			ActStructure.OnMissionStart(this, new EventArgs());
		}
	}

	private void LoadAndCopySectionSFX()
	{
		string[] array = new string[3] { "Arc", "Afg", "Kow" };
		MissionListings.eMissionID currentMissionID = Instance.CurrentMissionID;
		if (currentMissionID < MissionListings.eMissionID.MI_MISSION_ARCTIC || currentMissionID > MissionListings.eMissionID.MI_MISSION_KOWLOON)
		{
			return;
		}
		string text = array[(int)(currentMissionID - 1)];
		int num = 0;
		num = Instance.CurrentSection;
		string path = "SectionVO/VOData_" + text + "_S" + (num + 1).ToString("D2");
		GameObject gameObject = Resources.Load(path) as GameObject;
		if (!gameObject)
		{
			return;
		}
		MissionVOData missionVOData = gameObject.GetComponent("MissionVOData") as MissionVOData;
		if ((bool)missionVOData)
		{
			int num2 = missionVOData.DialogueData.Dialogue.Length;
			GameDialogueSFX.Instance.DialogueData.Dialogue = new SoundFXData[num2];
			int num3 = 0;
			SoundFXData[] dialogue = missionVOData.DialogueData.Dialogue;
			foreach (SoundFXData soundFXData in dialogue)
			{
				GameDialogueSFX.Instance.DialogueData.Dialogue[num3] = soundFXData;
				num3++;
			}
		}
	}

	public void MissionResume(MissionListings.eMissionID id, DifficultyMode mode, int section)
	{
		mCurrentMissionId = id;
		mCurrentMissionMode = mode;
		mCurrentSection = section;
		TutorialToggles.Reset();
	}

	public void MissionReplay()
	{
		mCurrentMissionId = mLastMissionId;
		StatsManager.Instance.BeginSession();
		GMGData.Instance.Reset();
		TutorialToggles.Reset();
		EventHub.Instance.Report(new Events.StartMission(mCurrentMissionId, mCurrentSection, mCurrentMissionMode));
		SwrveEventsGameplay.MissionStarted(mCurrentMissionId, mCurrentSection);
		if (MissionListings.Instance.Mission(mCurrentMissionId) != null && !MissionListings.Instance.Mission(mCurrentMissionId).Sections[mCurrentSection].IsSpecOps)
		{
			SwrveEventsProgression.StartedCampaignSection(mCurrentMissionId, mCurrentSection);
		}
	}

	private void UnlockMissionSection(MissionListings.eMissionID id, int section)
	{
		MissionData missionData = MissionListings.Instance.Mission(id);
		if (missionData != null && section >= 0 && section < missionData.Sections.Count && missionData.Sections[section] != null)
		{
			if (missionData.Sections[section].Locked)
			{
				EventHub.Instance.Report(new Events.MissionUnlocked());
			}
			missionData.Sections[section].Locked = false;
		}
	}

	private void UnlockGMGSection(MissionListings.eMissionID id)
	{
		MissionData missionData = MissionListings.Instance.Mission(id);
		TBFAssert.DoAssert(missionData != null, "Invalid mission data");
		if (missionData == null)
		{
			return;
		}
		for (int i = 0; i < missionData.Sections.Count; i++)
		{
			TBFAssert.DoAssert(missionData.Sections[i] != null, "Invalid section data");
			if (missionData.Sections[i] != null && missionData.Sections[i].IsSpecOps)
			{
				missionData.Sections[i].Locked = false;
			}
		}
	}

	private void UnlockSectionsForXpLevel()
	{
		int xPLevelAbsolute = XPManager.Instance.GetXPLevelAbsolute();
		MissionListings instance = MissionListings.Instance;
		if (!(instance != null))
		{
			return;
		}
		for (int i = 0; i < instance.Missions.Length; i++)
		{
			MissionData missionData = instance.Missions[i];
			for (int j = 0; j < missionData.Sections.Count; j++)
			{
				TBFAssert.DoAssert(missionData.Sections[j] != null, "Invalid section data");
				if (missionData.Sections[j] != null && missionData.Sections[j].UnlockedAtXpLevel != -1 && missionData.Sections[j].UnlockedAtXpLevel <= xPLevelAbsolute)
				{
					missionData.Sections[j].Locked = false;
				}
			}
		}
	}

	public void OnEliteAccountLinked()
	{
		GameSettings.Instance.PlayerCash().AwardHardCashFreebie(SwrveServerVariables.Instance.EliteLinkReward, "EliteLink");
	}

	private void UnlockOnMissionSuccessful(MissionListings.eMissionID id, int section)
	{
		MissionData missionData = MissionListings.Instance.Mission(id);
		MissionListings.eMissionID eMissionID = id;
		int num = section;
		if (!MissionIsSpecOps(id, section))
		{
			num++;
		}
		if (num < missionData.NumStorySections)
		{
			UnlockMissionSection(id, num);
			if (id == MissionListings.eMissionID.MI_MISSION_ARCTIC && section == 0)
			{
				UnlockGMGSection(MissionListings.eMissionID.MI_MISSION_ARCTIC_GMG);
			}
		}
		else
		{
			switch (id)
			{
			case MissionListings.eMissionID.MI_MISSION_ARCTIC:
				eMissionID = MissionListings.eMissionID.MI_MISSION_AFGHANISTAN;
				UnlockGMGSection(MissionListings.eMissionID.MI_MISSION_AFGHANISTAN_GMG);
				num = 0;
				break;
			case MissionListings.eMissionID.MI_MISSION_AFGHANISTAN:
				eMissionID = MissionListings.eMissionID.MI_MISSION_KOWLOON;
				UnlockGMGSection(MissionListings.eMissionID.MI_MISSION_KOWLOON_GMG);
				num = 0;
				break;
			case MissionListings.eMissionID.MI_MISSION_KOWLOON:
				mJustCompleted = true;
				eMissionID = MissionListings.eMissionID.MI_MAX;
				num = -1;
				break;
			}
			if (eMissionID != MissionListings.eMissionID.MI_MAX)
			{
				UnlockMissionSection(eMissionID, num);
			}
		}
		GameSettings instance = GameSettings.Instance;
		if (instance != null)
		{
			instance.HighlightMissionID = eMissionID;
			instance.HighlightSectionIndex = num;
		}
	}

	public void Reset()
	{
		for (MissionListings.eMissionID eMissionID = MissionListings.eMissionID.MI_MISSION_01; eMissionID < MissionListings.MI_MISSION_MAX; eMissionID++)
		{
			MissionData missionData = MissionListings.Instance.Mission(eMissionID);
			if (missionData != null)
			{
				for (int i = 0; i < missionData.Sections.Count; i++)
				{
					MissionListings.Instance.Mission(eMissionID).Sections[i].Locked = true;
				}
			}
		}
		UnlockStartMissions();
	}

	private void UnlockStartMissions()
	{
		UnlockMissionSection(MissionListings.eMissionID.MI_MISSION_ARCTIC, 0);
		UnlockGMGSection(MissionListings.eMissionID.MI_MISSION_ARCTIC_GMG);
		UnlockGMGSection(MissionListings.eMissionID.MI_MISSION_AFGHANISTAN_GMG);
		UnlockGMGSection(MissionListings.eMissionID.MI_MISSION_KOWLOON_GMG);
		for (MissionListings.eMissionID eMissionID = MissionListings.eMissionID.MI_MISSION_01; eMissionID < MissionListings.MI_MISSION_MAX; eMissionID++)
		{
			MissionData missionData = MissionListings.Instance.Mission(eMissionID);
			if (missionData != null && missionData.FlashPointIndex >= 0)
			{
				for (int i = 0; i < missionData.Sections.Count; i++)
				{
					MissionListings.Instance.Mission(eMissionID).Sections[i].Locked = false;
				}
			}
		}
	}

	public void UnlockAll()
	{
		for (MissionListings.eMissionID eMissionID = MissionListings.eMissionID.MI_MISSION_01; eMissionID < MissionListings.MI_MISSION_MAX; eMissionID++)
		{
			MissionData missionData = MissionListings.Instance.Mission(eMissionID);
			if (missionData != null)
			{
				for (int i = 0; i < missionData.Sections.Count; i++)
				{
					MissionListings.Instance.Mission(eMissionID).Sections[i].Locked = false;
				}
			}
		}
		SelectableMissionMarker.RefreshAllAfterUnlock();
	}

	public void Save()
	{
		for (MissionListings.eMissionID eMissionID = MissionListings.eMissionID.MI_MISSION_01; eMissionID < MissionListings.MI_MISSION_MAX; eMissionID++)
		{
			MissionData missionData = MissionListings.Instance.Mission(eMissionID);
			if (missionData != null)
			{
				string text = "Unlock." + eMissionID;
				for (int i = 0; i < missionData.Sections.Count; i++)
				{
					SecureStorage.Instance.SetBool(text + "." + i, MissionListings.Instance.Mission(eMissionID).Sections[i].Locked);
				}
			}
		}
	}

	public void Load()
	{
		for (MissionListings.eMissionID eMissionID = MissionListings.eMissionID.MI_MISSION_01; eMissionID < MissionListings.MI_MISSION_MAX; eMissionID++)
		{
			MissionData missionData = MissionListings.Instance.Mission(eMissionID);
			if (missionData != null)
			{
				string text = "Unlock." + eMissionID;
				for (int i = 0; i < missionData.Sections.Count; i++)
				{
					SecureStorage.Instance.GetBool(text + "." + i, ref MissionListings.Instance.Mission(eMissionID).Sections[i].Locked);
				}
			}
		}
		UnlockSectionsForXpLevel();
		UnlockStartMissions();
		if (ActStructure.OnLoad != null)
		{
			ActStructure.OnLoad(this, new EventArgs());
		}
	}

	public bool MissionUsesXPAsScore(MissionListings.eMissionID missionId, int section)
	{
		return !Instance.MissionIsSpecOps(missionId, section);
	}
}
