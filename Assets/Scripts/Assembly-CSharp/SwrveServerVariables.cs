using System;
using System.Collections.Generic;
using UnityEngine;

public class SwrveServerVariables : SingletonMonoBehaviour
{
	private const string baseRateAppUrl = "https://play.google.com/store/apps/details?id=com.activision.callofduty.striketeam";

	public string SaleItem = string.Empty;

	public ulong SaleStartDateUTC;

	public ulong SaleDurationInSeconds;

	public float SaleAmount;

	public float EnemyHealthMultiplierCampaign = 1f;

	public float EnemyHealthMultiplierSpecOps = 1f;

	public float PlayerHealthMultiplierCampaign = 1f;

	public float PlayerHealthMultiplierSpecops = 1f;

	private int[] LevelUpRewards = new int[51]
	{
		0, 0, 50, 0, 50, 0, 50, 0, 0, 50,
		0, 0, 50, 0, 0, 50, 0, 0, 50, 0,
		0, 50, 0, 0, 50, 0, 0, 50, 0, 0,
		0, 50, 0, 0, 0, 50, 0, 0, 0, 50,
		0, 0, 0, 50, 0, 0, 0, 50, 0, 0,
		0
	};

	private List<iSwrveUpdatable> m_SwrveUpdates = new List<iSwrveUpdatable>();

	public string AppVersion { get; private set; }

	public string MinAppVersion { get; private set; }

	public string AppStoreShortUrl { get; private set; }

	public string AppStoreUrl { get; private set; }

	public string RateAppUrl { get; private set; }

	public int RateAppFirstTrigger { get; private set; }

	public int RateAppTriggerInterval { get; private set; }

	public int CombackNotificationPeriodInDays { get; private set; }

	public int InitialCurrency { get; private set; }

	public int InitialGrenades { get; private set; }

	public int InitialClaymores { get; private set; }

	public int InitialHealthKits { get; private set; }

	public int EliteLinkReward { get; private set; }

	public int EliteAppInstalledReward { get; private set; }

	public string FacebookPictureURL { get; private set; }

	public string FacebookLinkURL { get; private set; }

	public string EliteAppURL { get; private set; }

	public string TBFFacebookURL { get; private set; }

	public string TBFTwitterURL { get; private set; }

	public string CODFacebookURL { get; private set; }

	public string CODTwitterURL { get; private set; }

	public string MoreGamesURL { get; private set; }

	public bool MoreGamesEnabled { get; private set; }

	public bool PushWarning { get; private set; }

	public bool EveryplayEnabled { get; private set; }

	public bool KInviteEnabled { get; private set; }

	public bool DisableFacebook { get; private set; }

	public int MaxXPForLeaderboards { get; private set; }

	public int KInviteFirstTrigger { get; private set; }

	public int KInviteTriggerInterval { get; private set; }

	public bool AllowGCController { get; private set; }

	public int GMGBaseReward { get; private set; }

	public int GMGIncReward { get; private set; }

	public int GMGWaveCap { get; private set; }

	public int GMGWaveStep { get; private set; }

	public int PurchaseSoliderCost { get; private set; }

	public static SwrveServerVariables Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<SwrveServerVariables>();
		}
	}

	public static event EventHandler SwrveBlipsEnabledChanged;

	public int LevelUpReward(int level)
	{
		TBFAssert.DoAssert(level >= 0 && level < 51);
		return LevelUpRewards[level];
	}

	protected override void Awake()
	{
		UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
		base.Awake();
		EliteAppURL = "elite://";
	}

	private void Start()
	{
		InitMisc();
		InitInitialItems();
		UpdateSimpleSwrveVariables();
	}

	private void OnEnable()
	{
		Bedrock.TitleParametersChanged += HandleTitleParametersChanged;
		Bedrock.UserResourcesChanged += HandleUserResourcesChanged;
	}

	private void OnDisable()
	{
		Bedrock.TitleParametersChanged -= HandleTitleParametersChanged;
		Bedrock.UserResourcesChanged -= HandleUserResourcesChanged;
	}

	public void Register(iSwrveUpdatable item)
	{
		m_SwrveUpdates.Add(item);
		item.UpdateFromSwrve();
	}

	private void HandleTitleParametersChanged(object Sender, EventArgs Args)
	{
	}

	private void HandleUserResourcesChanged(object Sender, EventArgs Args)
	{
		Debug.Log("***** SWRVE Update received *****");
		UpdateSimpleSwrveVariables();
		UpdateMisc();
		UpdateLevelUp();
		UpdateInitialItems();
		Language.UpdateLanguageFromBedrock();
		foreach (iSwrveUpdatable swrveUpdate in m_SwrveUpdates)
		{
			swrveUpdate.UpdateFromSwrve();
		}
		Debug.Log("***** SWRVE Update Complete *****");
	}

	private void UpdateSimpleSwrveVariables()
	{
		AppVersion = Bedrock.GetRemoteVariableAsString("android_appversion", TBFUtils.BundleVersion);
		MinAppVersion = Bedrock.GetRemoteVariableAsString("minappversion", "0.0");
		string defaultValue = "https://play.google.com/store/apps/details?id=com.activision.callofduty.striketeam";
		AppStoreShortUrl = Bedrock.GetRemoteVariableAsString("android_appShortURL", defaultValue);
		AppStoreUrl = Bedrock.GetRemoteVariableAsString("android_appStoreURL", defaultValue);
		RateAppUrl = Bedrock.GetRemoteVariableAsString("android_rateAppURL", "https://play.google.com/store/apps/details?id=com.activision.callofduty.striketeam");
		RateAppFirstTrigger = Bedrock.GetRemoteVariableAsInt("rateAppFirstTrigger", 2);
		RateAppTriggerInterval = Bedrock.GetRemoteVariableAsInt("rateAppTriggerInterval", 2);
		CombackNotificationPeriodInDays = Bedrock.GetRemoteVariableAsInt("comeBack", 3);
		EliteLinkReward = Bedrock.GetRemoteVariableAsInt("eliteLinkReward", 100);
		EliteAppInstalledReward = Bedrock.GetRemoteVariableAsInt("eliteAppInstalledReward", 500);
		FacebookPictureURL = Bedrock.GetRemoteVariableAsString("facebookImage", "http://att.activision.com.edgesuite.net/theblastfurnace/StrikeTeam/images/StrikeTeam_Icon.png");
		FacebookLinkURL = Bedrock.GetRemoteVariableAsString("android_facebookLink", "https://play.google.com/store/apps/details?id=com.activision.callofduty.striketeam");
		EliteAppURL = Bedrock.GetRemoteVariableAsString("eliteAppURL", EliteAppURL);
		TBFFacebookURL = Bedrock.GetRemoteVariableAsString("tbfFacebookURL", "http://www.facebook.com/TBFgames");
		TBFTwitterURL = Bedrock.GetRemoteVariableAsString("tbfTwitterURL", "http://www.twitter.com/TBFgames");
		CODFacebookURL = Bedrock.GetRemoteVariableAsString("codFacebookURL", "http://www.facebook.com/CallofDuty");
		CODTwitterURL = Bedrock.GetRemoteVariableAsString("codTwitterURL", "http://www.twitter.com/CallofDuty");
		MoreGamesURL = Bedrock.GetRemoteVariableAsString("android_moreGamesURL", "http://www.theblastfurnace.com/games");
		MoreGamesEnabled = Bedrock.GetRemoteVariableAsInt("moreGamesEnabled", 1) == 1;
		EveryplayEnabled = Bedrock.GetRemoteVariableAsInt("EveryplayEnabled", 1) == 1;
		KInviteEnabled = Bedrock.GetRemoteVariableAsInt("KInviteEnabled", 1) == 1;
		DisableFacebook = Bedrock.GetRemoteVariableAsInt("DisableFacebook", 0) == 1;
		MaxXPForLeaderboards = Bedrock.GetRemoteVariableAsInt("MaxXPForLeaderboards", 100000000);
		KInviteFirstTrigger = Bedrock.GetRemoteVariableAsInt("KInviteFirstTrigger", 2);
		KInviteTriggerInterval = Bedrock.GetRemoteVariableAsInt("KInviteTriggerInterval", 2);
		AllowGCController = Bedrock.GetRemoteVariableAsInt("AllowGCController", 1) == 1;
		if (SwrveServerVariables.SwrveBlipsEnabledChanged != null)
		{
			SwrveServerVariables.SwrveBlipsEnabledChanged(this, new EventArgs());
		}
	}

	private void InitInitialItems()
	{
		InitialCurrency = 250;
		InitialGrenades = 3;
		InitialClaymores = 3;
		InitialHealthKits = 3;
	}

	private void UpdateInitialItems()
	{
		Dictionary<string, string> resourceDictionary = null;
		if (Bedrock.GetRemoteUserResources("initialHardCurrency", out resourceDictionary) && resourceDictionary != null)
		{
			InitialCurrency = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "currency", InitialCurrency);
			InitialGrenades = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "grenades", InitialGrenades);
			InitialClaymores = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "claymores", InitialClaymores);
			InitialHealthKits = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "healthkits", InitialHealthKits);
			Debug.Log("Initial currency updated to: " + InitialCurrency);
		}
		PushWarning = Bedrock.GetRemoteVariableAsInt("PushWarning", 1) == 1;
		UpdateSaleData();
	}

	private void UpdateSaleData()
	{
		Dictionary<string, string> resourceDictionary = null;
		if (Bedrock.GetRemoteUserResources("Sale", out resourceDictionary) && resourceDictionary != null)
		{
			SaleItem = Bedrock.GetFromResourceDictionaryAsString(resourceDictionary, "item", string.Empty);
			SaleStartDateUTC = (ulong)Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "startDate", 0);
			SaleDurationInSeconds = (ulong)Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "duration", 0);
			SaleAmount = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "saleAmount", 0f);
			Debug.Log("Swrve: Sale Item = " + SaleItem + " Amount " + SaleAmount);
		}
	}

	private void InitMisc()
	{
		PurchaseSoliderCost = 10;
		EnemyHealthMultiplierCampaign = 1f;
		EnemyHealthMultiplierSpecOps = 1f;
		PlayerHealthMultiplierCampaign = 1f;
		PlayerHealthMultiplierSpecops = 1f;
	}

	private void UpdateMisc()
	{
		Dictionary<string, string> resourceDictionary;
		if (Bedrock.GetRemoteUserResources("XPRetrieve", out resourceDictionary))
		{
			PurchaseSoliderCost = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "Cost", PurchaseSoliderCost);
		}
		if (Bedrock.GetRemoteUserResources("PlayerHealthMultipler", out resourceDictionary))
		{
			PlayerHealthMultiplierCampaign = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "campaign", PlayerHealthMultiplierCampaign);
			PlayerHealthMultiplierSpecops = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "specOps", PlayerHealthMultiplierSpecops);
			Debug.Log("Swrve: PlayerHealthMultipler Campaign = " + PlayerHealthMultiplierCampaign + " SpecOps " + PlayerHealthMultiplierSpecops);
		}
		if (Bedrock.GetRemoteUserResources("EnemyHealthMultipler", out resourceDictionary))
		{
			EnemyHealthMultiplierCampaign = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "campaign", EnemyHealthMultiplierCampaign);
			EnemyHealthMultiplierSpecOps = Bedrock.GetFromResourceDictionaryAsFloat(resourceDictionary, "specOps", EnemyHealthMultiplierSpecOps);
			Debug.Log("Swrve: EnemyHealthMultipler Campaign = " + EnemyHealthMultiplierCampaign + " SpecOps " + EnemyHealthMultiplierSpecOps);
		}
	}

	private void UpdateLevelUp()
	{
		Dictionary<string, string> resourceDictionary;
		if (Bedrock.GetRemoteUserResources("LevelUpReward", out resourceDictionary))
		{
			for (int i = 0; i < 51; i++)
			{
				LevelUpRewards[i] = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, "Level_" + i, LevelUpRewards[i]);
			}
		}
	}

	private bool ParseAppVersionNumbers(string versionString, out int versionNumber, out int revisionNumber)
	{
		bool result = false;
		versionNumber = 0;
		revisionNumber = 0;
		char[] separator = new char[1] { '.' };
		string[] array = versionString.Split(separator, StringSplitOptions.RemoveEmptyEntries);
		if (array.Length >= 2)
		{
			result = int.TryParse(array[0], out versionNumber);
			result = int.TryParse(array[1], out revisionNumber) && result;
		}
		return result;
	}

	public bool IsNewAppVersionAvailable()
	{
		Debug.Log("appVersionString: '" + StartGameSettings.Instance.VERSION + "' serverAppVersion: '" + AppVersion);
		string appVersion = AppVersion;
		int versionNumber = 0;
		int revisionNumber = 0;
		ParseAppVersionNumbers(appVersion, out versionNumber, out revisionNumber);
		string vERSION = StartGameSettings.Instance.VERSION;
		int versionNumber2 = 0;
		int revisionNumber2 = 0;
		ParseAppVersionNumbers(vERSION, out versionNumber2, out revisionNumber2);
		if (versionNumber > versionNumber2 || (versionNumber == versionNumber2 && revisionNumber > revisionNumber2))
		{
			return true;
		}
		return false;
	}

	public bool IsAllowedToPlayWithoutUpdate()
	{
		Debug.Log("appVersionString: '" + StartGameSettings.Instance.VERSION + "' serverMinAppVersion: '" + MinAppVersion);
		int versionNumber = 0;
		int revisionNumber = 0;
		ParseAppVersionNumbers(MinAppVersion, out versionNumber, out revisionNumber);
		int versionNumber2 = 0;
		int revisionNumber2 = 0;
		ParseAppVersionNumbers(StartGameSettings.Instance.VERSION, out versionNumber2, out revisionNumber2);
		if (versionNumber > versionNumber2 || (versionNumber == versionNumber2 && revisionNumber > revisionNumber2))
		{
			Debug.Log("Not Allowed To Play Without Update");
			return false;
		}
		return true;
	}
}
