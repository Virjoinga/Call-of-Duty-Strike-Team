using System;
using UnityEngine;

public class MaterialTextureSwitcher : SingletonMonoBehaviour
{
	public enum Available
	{
		Frontend = 0,
		LoadoutAndResults = 1,
		Always = 2
	}

	[Serializable]
	public class MaterialSettings
	{
		public Material Mat;

		public string x1Texture;

		public string x2Texture;

		public string rgbTexture;

		public string alphaTexture;

		public string Main;

		public string Alpha;

		public Available Availability;

		public bool Loaded;
	}

	private enum Area
	{
		Frontend = 0,
		Loadout = 1,
		InGame = 2,
		Results = 3
	}

	public MaterialSettings[] MaterialData;

	public Material vertexColouredFast;

	public Material vertexColoured;

	private Area mLastKnownArea;

	public static MaterialTextureSwitcher Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<MaterialTextureSwitcher>();
		}
	}

	public static bool HasInstance
	{
		get
		{
			return SingletonMonoBehaviour.GetSingletonInstance<MaterialTextureSwitcher>() != null;
		}
	}

	protected override void AwakeOnce()
	{
		UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
		mLastKnownArea = Area.Frontend;
		for (int i = 0; i < MaterialData.Length; i++)
		{
			MaterialSettings materialSettings = MaterialData[i];
			if (materialSettings == null)
			{
				continue;
			}
			if (TBFUtils.IsRetinaHdDevice())
			{
				materialSettings.Main = materialSettings.x2Texture;
			}
			else
			{
				materialSettings.Main = materialSettings.x1Texture;
				materialSettings.Alpha = string.Empty;
				if (!string.IsNullOrEmpty(materialSettings.rgbTexture) && !string.IsNullOrEmpty(materialSettings.alphaTexture))
				{
					if (materialSettings.Mat.HasProperty("_Color"))
					{
						materialSettings.Mat.shader = vertexColoured.shader;
					}
					else
					{
						materialSettings.Mat.shader = vertexColouredFast.shader;
					}
					materialSettings.Main = "Split/" + materialSettings.rgbTexture;
					materialSettings.Alpha = "Split/" + materialSettings.alphaTexture;
				}
			}
			Load(materialSettings);
		}
	}

	private Area GetCurrentArea()
	{
		Area result = mLastKnownArea;
		FrontEndController instance = FrontEndController.Instance;
		if (instance != null && !instance.LastScreenIsTransitioningOff)
		{
			if (!instance.IsLoaded || instance.IsInFrontend)
			{
				result = Area.Frontend;
			}
			else if (instance.HasLoadout)
			{
				result = Area.Loadout;
			}
			else if (instance.ActiveScreen == ScreenID.ContinueScreen || instance.ActiveScreen == ScreenID.MissionComplete)
			{
				result = Area.Results;
			}
			else if (GameController.Instance != null && !GameController.Instance.MissionEnding)
			{
				result = Area.InGame;
			}
		}
		return result;
	}

	private void RefreshMaterials(Area newArea)
	{
		for (int i = 0; i < MaterialData.Length; i++)
		{
			MaterialSettings materialSettings = MaterialData[i];
			if (materialSettings == null || materialSettings.Availability == Available.Always)
			{
				continue;
			}
			if (materialSettings.Availability == Available.LoadoutAndResults)
			{
				if (newArea == Area.Frontend || newArea == Area.Loadout || newArea == Area.Results)
				{
					Load(materialSettings);
				}
				else
				{
					Unload(materialSettings);
				}
			}
			else if (newArea == Area.Frontend)
			{
				Load(materialSettings);
			}
			else
			{
				Unload(materialSettings);
			}
		}
	}

	private void Load(MaterialSettings data)
	{
		if (data != null && data.Mat != null && !data.Loaded)
		{
			if (!string.IsNullOrEmpty(data.Main))
			{
				Texture2D texture = Resources.Load(data.Main, typeof(Texture2D)) as Texture2D;
				data.Mat.SetTexture("_MainTex", texture);
			}
			if (!string.IsNullOrEmpty(data.Alpha))
			{
				Texture2D texture2 = Resources.Load(data.Alpha, typeof(Texture2D)) as Texture2D;
				data.Mat.SetTexture("_AlphaTex", texture2);
			}
			data.Loaded = true;
		}
	}

	private void Unload(MaterialSettings data)
	{
		if (data != null && data.Mat != null && data.Mat.mainTexture != null && data.Loaded)
		{
			Resources.UnloadAsset(data.Mat.mainTexture);
			data.Mat.mainTexture = null;
			Texture texture = data.Mat.GetTexture("_AlphaTex");
			if (texture != null)
			{
				Resources.UnloadAsset(texture);
			}
			data.Loaded = false;
		}
	}

	private void Update()
	{
		Area currentArea = GetCurrentArea();
		if (currentArea != mLastKnownArea)
		{
			RefreshMaterials(currentArea);
			mLastKnownArea = currentArea;
		}
	}
}
