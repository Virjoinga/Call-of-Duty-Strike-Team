using System;
using System.Globalization;
using UnityEngine;

public class TitleBarController : SingletonMonoBehaviour
{
	private const float PULSE_MOVE_TIME = 1f;

	private const float ANIMATION_LENGTH = 0.8f;

	private const float BORDER = 10f;

	private const float Z_OFFSET = -1.5f;

	private const float Z = -1.8f;

	private const int GAP = 10;

	public RankIconController RankIcon;

	public BackgroundBoxHeader TitleBarBackground;

	public PackedSprite Pixie;

	public PackedSprite LeftBracket;

	public PackedSprite RightBracket;

	public PackedSprite TokenIconGlow;

	public PackedSprite MTXSaleIcon;

	public SpriteText TitleText;

	public SpriteText SubtitleText;

	public SpriteText LevelText;

	public SpriteText XPText;

	public SpriteText CurrentLevel;

	public SpriteText NextLevel;

	public SpriteText HardCurrencyText;

	public SpriteText SoftCurrencyText;

	public UIButton MTXButton;

	public UIButton BackButton;

	public ActivateButton ActivateButtonCtrl;

	public ProgressBar LevelProgress;

	private Collider[] mColliders;

	private Vector3 mOnScreenPosition;

	private Vector3 mOffScreenPosition;

	private Vector3 mToPosition;

	private Vector3 mFromPosition;

	private float mBorderInWorldSpace;

	private float mGapInPixels;

	private float mAnimationTime;

	private int mLastKnownSoftCurrency;

	private int mLastKnownHardCurrency;

	private int mLastKnownPlayerXp = -1;

	private int mLastKnownAnimFrame = -1;

	private ActivateWatcher.ActivateCloudSaveStatus mLastKnownCloudStatus = ActivateWatcher.ActivateCloudSaveStatus.CLOUD_SAVE_UNKNOWN;

	private bool mLastKnownCloudSuccess;

	private bool mHasBackButton = true;

	private bool mSetup;

	public static TitleBarController Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<TitleBarController>();
		}
	}

	public static bool HasInstance
	{
		get
		{
			return SingletonMonoBehaviour.GetSingletonInstance<TitleBarController>() != null;
		}
	}

	protected override void Awake()
	{
		base.Awake();
		UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
		mSetup = false;
		if (TokenIconGlow != null)
		{
			TokenIconGlow.gameObject.FadeUpdate(0f, 0f);
		}
	}

	private void Start()
	{
		if (SoftCurrencyText != null)
		{
			SoftCurrencyText.gameObject.SetActive(false);
		}
	}

	private void OnEnable()
	{
		Bedrock.UserConnectionStatusChanged += OnlineStatusChanged;
	}

	private void OnDisable()
	{
		Bedrock.UserConnectionStatusChanged -= OnlineStatusChanged;
	}

	public void SetCustomTitle(string title)
	{
		if (TitleText != null)
		{
			TitleText.Text = title ?? string.Empty;
			SetupCommon();
		}
	}

	public void SetWithBackButton(string title, bool translate, MonoBehaviour scriptToCall, string methodToCall, string mtxBegin)
	{
		string text = title;
		if (translate)
		{
			text = AutoLocalize.Get(title);
		}
		if (TitleText != null && SubtitleText != null)
		{
			TitleText.Text = text ?? TitleText.Text;
			SubtitleText.Text = string.Empty;
		}
		mHasBackButton = true;
		if (BackButton != null)
		{
			BackButton.scriptWithMethodToInvoke = scriptToCall;
			BackButton.methodToInvoke = methodToCall;
			HighlightBackButton(false);
		}
		if (MTXButton != null)
		{
			MTXButton.scriptWithMethodToInvoke = scriptToCall;
			MTXButton.methodToInvoke = mtxBegin;
			EnableMTXButton();
		}
		SetupCommon();
	}

	public void SetWithoutBackButton(string title, bool translate, MonoBehaviour scriptToCall, string mtxBegin)
	{
		string text = title;
		if (translate)
		{
			text = AutoLocalize.Get(title);
		}
		if (TitleText != null && SubtitleText != null)
		{
			TitleText.Text = text ?? string.Empty;
			SubtitleText.Text = string.Empty;
		}
		mHasBackButton = false;
		if (MTXButton != null)
		{
			MTXButton.scriptWithMethodToInvoke = scriptToCall;
			MTXButton.methodToInvoke = mtxBegin;
			EnableMTXButton();
		}
		if (ActivateButtonCtrl != null)
		{
			ActivateButtonCtrl.UpdateStatus();
		}
		SetupCommon();
	}

	public void Dismiss()
	{
		mToPosition = mOffScreenPosition;
		mFromPosition = base.transform.position;
		mAnimationTime = 0f;
	}

	public void EnableMTXButton()
	{
		if (MTXButton != null)
		{
			MTXButton.SetControlState(UIButton.CONTROL_STATE.NORMAL, true);
			FrontEndButton component = MTXButton.GetComponent<FrontEndButton>();
			if (component != null)
			{
				component.CurrentState = FrontEndButton.State.Normal;
			}
			if (TokenIconGlow != null)
			{
				TokenIconGlow.gameObject.FadeTo(1f, 1f, 0f, LoopType.pingPong);
			}
			RefreshMTXSaleIcon();
		}
	}

	public void RefreshMTXSaleIcon()
	{
		if (MTXButton != null && MTXButton.controlState != UIButton.CONTROL_STATE.DISABLED && MTXSaleIcon != null && PurchaseHandler.Instance != null)
		{
			bool tokenOfferInProgress = PurchaseHandler.Instance.TokenOfferInProgress;
			if (MTXSaleIcon.gameObject == null)
			{
				Debug.Log("I'm going to crash!!!!");
			}
			else
			{
				MTXSaleIcon.gameObject.SetActive(tokenOfferInProgress);
			}
		}
	}

	public void DisableMTXButton()
	{
		if (MTXButton != null)
		{
			MTXButton.SetControlState(UIButton.CONTROL_STATE.DISABLED, true);
			FrontEndButton component = MTXButton.GetComponent<FrontEndButton>();
			if (component != null)
			{
				component.CurrentState = FrontEndButton.State.Disabled;
			}
			if (TokenIconGlow != null)
			{
				TokenIconGlow.gameObject.FadeTo(0f, 0.5f, 0f);
			}
			if (MTXSaleIcon != null)
			{
				MTXSaleIcon.gameObject.SetActive(false);
			}
		}
	}

	public void HighlightBackButton(bool highlight)
	{
		if (BackButton != null)
		{
			FrontEndButton component = BackButton.GetComponent<FrontEndButton>();
			if (component != null)
			{
				component.CurrentState = (highlight ? FrontEndButton.State.Highlighted : FrontEndButton.State.Normal);
			}
		}
	}

	private void SetupCommon()
	{
		if (!mSetup)
		{
			mColliders = GetComponentsInChildren<Collider>();
			LayoutComponents();
			mSetup = true;
		}
		else
		{
			LayoutDynamicComponents();
		}
		mToPosition = mOnScreenPosition;
		mFromPosition = base.transform.position;
		mAnimationTime = 0f;
		if (ActivateButtonCtrl != null)
		{
			ActivateButtonCtrl.UpdateStatus();
		}
	}

	private void OnlineStatusChanged(object sender, EventArgs args)
	{
		int hardFunds = GameSettings.Instance.PlayerCash().HardCash();
		int softFunds = GameSettings.Instance.PlayerCash().SoftCash();
		int xp = StatsHelper.PlayerXP();
		UpdateData(xp, hardFunds, softFunds, mLastKnownAnimFrame, mLastKnownCloudStatus, mLastKnownCloudSuccess);
	}

	private void Update()
	{
		Cash cash = GameSettings.Instance.PlayerCash();
		ActivateWatcher instance = ActivateWatcher.Instance;
		int num = cash.HardCash();
		int num2 = cash.SoftCash();
		int num3 = StatsHelper.PlayerXP();
		int num4 = (int)(Time.realtimeSinceStartup % 4f) / 2;
		ActivateWatcher.ActivateCloudSaveStatus cloudSaveSatus = instance.CloudSaveSatus;
		bool flag = instance.ShowCloudSaveSuccess();
		if (num != mLastKnownHardCurrency || num2 != mLastKnownSoftCurrency || num3 != mLastKnownPlayerXp || num4 != mLastKnownAnimFrame || cloudSaveSatus != mLastKnownCloudStatus || flag != mLastKnownCloudSuccess || Bedrock.getUserConnectionStatus() != ActivateWatcher.Instance.LastUserConnectionStatus)
		{
			UpdateData(num3, num, num2, num4, cloudSaveSatus, flag);
			mLastKnownHardCurrency = num;
			mLastKnownSoftCurrency = num2;
			mLastKnownPlayerXp = num3;
			mLastKnownAnimFrame = num4;
			mLastKnownCloudStatus = cloudSaveSatus;
			mLastKnownCloudSuccess = flag;
		}
		if (!(mAnimationTime < 0.8f))
		{
			return;
		}
		mAnimationTime += TimeManager.DeltaTime;
		float num5 = Mathf.Clamp(mAnimationTime / 0.8f, 0f, 1f);
		base.transform.position = Vector3.Lerp(mFromPosition, mToPosition, num5);
		if (!(num5 >= 1f))
		{
			return;
		}
		for (int i = 0; i < mColliders.Length; i++)
		{
			Collider collider = mColliders[i];
			if (collider != null)
			{
				collider.enabled = !collider.enabled;
				collider.enabled = !collider.enabled;
			}
		}
	}

	private void UpdateData(int xp, int hardFunds, int softFunds, int animframe, ActivateWatcher.ActivateCloudSaveStatus cloudStatus, bool cloudSuccess)
	{
		XPManager instance = XPManager.Instance;
		int level = 0;
		int prestigeLevel = 0;
		float percent = 0f;
		int xpToNextLevel = 0;
		instance.ConvertXPToLevel(xp, out level, out prestigeLevel, out xpToNextLevel, out percent);
		int next = 1;
		if (level < instance.m_XPLevels.Count - 1)
		{
			next = level + 1;
		}
		else if (prestigeLevel == instance.m_MaxPrestigeLevels)
		{
			next = instance.m_XPLevels.Count - 1;
		}
		int absoluteLevel = level + prestigeLevel * (instance.m_XPLevels.Count - 1);
		UpdateData(xp, hardFunds, softFunds, animframe, level, next, absoluteLevel, percent, cloudStatus, cloudSuccess);
	}

	private void UpdateData(int xp, int hardFunds, int softFunds, int animFrame, int level, int next, int absoluteLevel, float progress, ActivateWatcher.ActivateCloudSaveStatus cloudStatus, bool cloudSuccess)
	{
		if (!(LevelText != null) || !(XPText != null) || !(HardCurrencyText != null) || !(RankIcon != null) || !(CurrentLevel != null) || !(NextLevel != null) || !(LevelProgress != null))
		{
			return;
		}
		NumberFormatInfo numberFormat = GlobalizationUtils.GetNumberFormat(0);
		string text = XPManager.Instance.XPLevelName(level);
		RankIcon.SetRank(absoluteLevel);
		string text2 = Language.Get("S_RESULT_XP");
		string arg = hardFunds.ToString("N", numberFormat);
		string text3 = xp.ToString("N", numberFormat);
		char c = CommonHelper.HardCurrencySymbol();
		HardCurrencyText.Text = string.Format("{0}{1}", c, arg);
		CurrentLevel.Text = level.ToString();
		NextLevel.Text = next.ToString();
		LevelProgress.SetValue(progress);
		Bedrock.brUserConnectionStatus userConnectionStatus = Bedrock.getUserConnectionStatus();
		Bedrock.brUserConnectionStatus lastNonTransitionConnectionStatus = ActivateWatcher.Instance.LastNonTransitionConnectionStatus;
		if ((userConnectionStatus == Bedrock.brUserConnectionStatus.BR_LOGGING_IN_REGISTERED && lastNonTransitionConnectionStatus != Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_ONLINE) || (userConnectionStatus == Bedrock.brUserConnectionStatus.BR_LOGGING_IN_ANONYMOUSLY && lastNonTransitionConnectionStatus != Bedrock.brUserConnectionStatus.BR_LOGGED_IN_ANONYMOUSLY_ONLINE))
		{
			LevelText.Text = string.Empty;
			XPText.Text = string.Empty;
		}
		else if (userConnectionStatus == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_ONLINE || userConnectionStatus == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_OFFLINE || userConnectionStatus == Bedrock.brUserConnectionStatus.BR_LOGGING_IN_REGISTERED)
		{
			string username = Bedrock.getUsername();
			if (username != null)
			{
				LevelText.Text = username.ToUpper();
			}
			if (animFrame == 0)
			{
				XPText.Text = text;
			}
			else
			{
				XPText.Text = text3 + text2;
			}
		}
		else
		{
			LevelText.Text = text;
			XPText.Text = text3 + text2;
		}
	}

	private void LayoutComponents()
	{
		float num = CommonHelper.CalculatePixelSizeInWorldSpace(base.transform);
		float num2 = 0f;
		float num3 = 0f;
		Vector3 position = default(Vector3);
		int num4 = 1;
		if (TBFUtils.IsRetinaHdDevice())
		{
			num4 = 2;
		}
		mBorderInWorldSpace = 10f * (float)num4 * num;
		mGapInPixels = 10 * num4;
		if (TitleBarBackground != null)
		{
			num2 = Screen.width;
			num3 = TitleBarBackground.Mat.mainTexture.height;
			TitleBarBackground.size = new Vector2(num2, num3);
			TitleBarBackground.Resize(num);
			position.x = (float)Screen.width * 0.5f;
			position.y = (float)Screen.height - num3 * 0.5f;
			Vector3 position2 = Camera.main.ScreenToWorldPoint(position);
			TitleBarBackground.transform.position = position2;
		}
		if (TitleBarBackground != null)
		{
			CommonBackgroundBoxPlacement[] componentsInChildren = GetComponentsInChildren<CommonBackgroundBoxPlacement>();
			Vector2 size = TitleBarBackground.size;
			size.y -= mGapInPixels;
			CommonBackgroundBoxPlacement[] array = componentsInChildren;
			foreach (CommonBackgroundBoxPlacement commonBackgroundBoxPlacement in array)
			{
				commonBackgroundBoxPlacement.Position(TitleBarBackground.transform.position, size);
			}
			mOffScreenPosition = new Vector3(0f, ((float)Screen.height * 0.5f + num2) * num, -1.5f);
			mOnScreenPosition = new Vector3(0f, 0f, -1.5f);
		}
		LayoutDynamicComponents();
	}

	private void LayoutDynamicComponents()
	{
		Vector3 position = base.transform.position;
		base.transform.position = Vector3.zero;
		float num = 0f;
		float num2 = 0f;
		if (TitleBarBackground != null)
		{
			num = Screen.width;
			num2 = TitleBarBackground.Mat.mainTexture.height;
		}
		float num3 = CommonHelper.CalculatePixelSizeInWorldSpace(base.transform);
		float num4 = num * -0.49f * num3;
		float num5 = ((float)Screen.height * 0.5f - (num2 - mGapInPixels) * 0.5f) * num3;
		if (BackButton != null)
		{
			if (mHasBackButton)
			{
				Vector2 spritePixelSize = CommonHelper.GetSpritePixelSize(BackButton);
				BackButton.gameObject.SetActive(true);
				num4 = BackButton.transform.position.x;
				num4 += spritePixelSize.x * num3 * 0.5f + mBorderInWorldSpace;
			}
			else
			{
				BackButton.gameObject.SetActive(false);
				num4 += mBorderInWorldSpace;
			}
		}
		if (LeftBracket != null && RightBracket != null && TitleText != null && SubtitleText != null && Pixie != null)
		{
			LeftBracket.transform.position = new Vector3(num4, num5, -1.8f);
			num4 += LeftBracket.width + mBorderInWorldSpace;
			float num6 = TitleText.BaseHeight * 0.55f;
			num5 -= num6;
			TitleText.transform.position = new Vector3(num4, num5, -1.8f);
			num4 += TitleText.GetWidth(TitleText.Text) + mBorderInWorldSpace;
			SubtitleText.transform.position = new Vector3(num4, num5, -1.8f);
			num4 += SubtitleText.GetWidth(SubtitleText.Text) + mBorderInWorldSpace;
			num5 += num6;
			RightBracket.transform.position = new Vector3(num4, num5, -1.8f);
			num4 += RightBracket.width + mBorderInWorldSpace;
			num5 += RightBracket.height * 0.5f - Pixie.height * 0.5f;
			Pixie.transform.position = new Vector3(num4, num5, -1.8f);
		}
		base.transform.position = position;
	}

	private void OnActivateButtonPressed()
	{
		if (!MessageBoxController.Instance.IsAnyMessageActive)
		{
			MenuSFX.Instance.SelectConfirm.Play2D();
			if (ActivateFriendInviteWatcher.Instance.NumFriendInvites != 0)
			{
				ActivateWatcher.Instance.LaunchActivate(Bedrock.brUserInterfaceScreen.BR_FRIENDS_UI);
			}
			else
			{
				ActivateWatcher.Instance.LaunchActivate(Bedrock.brUserInterfaceScreen.BR_LOG_ON_UI);
			}
		}
	}
}
