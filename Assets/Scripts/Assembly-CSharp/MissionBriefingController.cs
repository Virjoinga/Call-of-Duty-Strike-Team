using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MissionBriefingController : SingletonMonoBehaviour
{
	public enum Layer
	{
		Back = 0,
		Middle = 1,
		Front = 2
	}

	private const float TIME_TO_MOVE_CAMERA = 0.5f;

	public MissionBriefingInstructionsPanel InstructionsPanelPrefab;

	public MissionBriefingFocusItem FocusItemPrefab;

	public MissionBriefingImageItem ImageItemPrefab;

	public InsertionPointBlip InsertionBlipPrefab;

	public UIButton SkipMessage;

	public string AltTexturePath;

	public string AltTexturePathx2;

	private List<LookAtCamera> mCameraList;

	private List<MissionBriefingImageItem> mImageItems;

	private MissionBriefingInstructionsPanel mInstructionsPanel;

	private MissionBriefingFocusItem mFocusItem;

	private InsertionPointBlip mInsertionBlip;

	private LookAtCamera mLastLookAtCamera;

	private StrategyViewCamera mStratergyCamera;

	private Texture2D mAlternativeFrameTexture;

	private GameObject mBlipTarget;

	private GameObject mCommonHud;

	private GameObject mStrategyHud;

	private GameObject mEntireLevelModel;

	private MissionListings.eMissionID mMissionId;

	private int mWaitOnId;

	private int mCurrentStageId;

	private int mOldCullingMask;

	private bool mEnded;

	public static MissionBriefingController Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<MissionBriefingController>();
		}
	}

	public static bool HasInstance
	{
		get
		{
			return SingletonMonoBehaviour.GetSingletonInstance<TitleBarController>() != null;
		}
	}

	public int WaitID
	{
		get
		{
			return mWaitOnId;
		}
	}

	public int CurrentID
	{
		get
		{
			return mCurrentStageId;
		}
	}

	public GameObject EntireLevelModel
	{
		set
		{
			mEntireLevelModel = value;
		}
	}

	public MissionListings.eMissionID CurrentMissionID
	{
		get
		{
			return mMissionId;
		}
	}

	public void Start()
	{
		mAlternativeFrameTexture = null;
		if (TBFUtils.UseAlternativeLayout())
		{
			bool flag = TBFUtils.IsRetinaHdDevice();
			mAlternativeFrameTexture = Resources.Load((!flag) ? AltTexturePath : AltTexturePathx2) as Texture2D;
		}
		HideButtons();
	}

	public void BeginSequence()
	{
		ShowButtons();
		SoundManager.Instance.ActivateMissionBriefingSFX();
		MusicManager.Instance.PlayBriefingMusic();
		mEnded = false;
		CameraManager instance = CameraManager.Instance;
		if (instance != null)
		{
			Camera strategyCamera = instance.StrategyCamera;
			mOldCullingMask = strategyCamera.cullingMask;
			strategyCamera.cullingMask = 1 << LayerMask.NameToLayer("StrategyViewModel");
			instance.AllowInput(false);
			mStratergyCamera = instance.StrategyCameraController.CurrentCameraBase as StrategyViewCamera;
		}
		GameController instance2 = GameController.Instance;
		if (instance2 != null)
		{
			instance2.SuppressHud(true);
			TimeManager.instance.ResumeNormalTime();
		}
		if (mInstructionsPanel == null)
		{
			mInstructionsPanel = Object.Instantiate(InstructionsPanelPrefab) as MissionBriefingInstructionsPanel;
			mInstructionsPanel.transform.parent = base.transform;
		}
		if (mFocusItem == null)
		{
			mFocusItem = Object.Instantiate(FocusItemPrefab) as MissionBriefingFocusItem;
			mFocusItem.transform.parent = base.transform;
		}
		if (mInsertionBlip == null)
		{
			mInsertionBlip = Object.Instantiate(InsertionBlipPrefab) as InsertionPointBlip;
			mInsertionBlip.transform.parent = base.transform;
			mBlipTarget = new GameObject("BlipTarget");
			mBlipTarget.transform.parent = base.transform;
			mBlipTarget.transform.position = FindInsertionPoint();
			mInsertionBlip.Target = mBlipTarget.transform;
		}
		mCameraList = new List<LookAtCamera>();
		mImageItems = new List<MissionBriefingImageItem>();
		if (SkipMessage != null)
		{
			SkipMessage.Hide(false);
		}
		mMissionId = ActStructure.Instance.CurrentMissionID;
		mWaitOnId = 1;
		mCurrentStageId = 0;
	}

	public void EndSequence()
	{
		SoundManager.Instance.DeactivateMissionBriefingSFX();
		if (mEnded)
		{
			return;
		}
		mEnded = true;
		if (SkipMessage != null)
		{
			SkipMessage.Hide(true);
		}
		if (mInstructionsPanel != null)
		{
			mInstructionsPanel.Deactivate();
		}
		if (mFocusItem != null)
		{
			Object.Destroy(mFocusItem.gameObject);
		}
		if (mInsertionBlip != null)
		{
			Object.Destroy(mInsertionBlip.gameObject);
		}
		if (mBlipTarget != null)
		{
			Object.Destroy(mBlipTarget);
		}
		if (mImageItems != null)
		{
			for (int i = 0; i < mImageItems.Count; i++)
			{
				if (mImageItems[i] != null)
				{
					Object.Destroy(mImageItems[i].gameObject);
				}
			}
			mImageItems.Clear();
		}
		if (mAlternativeFrameTexture != null)
		{
			Resources.UnloadAsset(mAlternativeFrameTexture);
			mAlternativeFrameTexture = null;
		}
		StartCoroutine(CleanUp());
	}

	public bool UpdateInstructions(string instructions, int narrationId, int stageid, bool translated)
	{
		bool result = false;
		if (!mEnded)
		{
			string instructions2 = instructions;
			if (!translated)
			{
				instructions2 = AutoLocalize.Get(instructions);
			}
			if (mInstructionsPanel != null)
			{
				mInstructionsPanel.SetInstructions(instructions2);
				BriefingSFX.Instance.PlayNarration(mMissionId, narrationId);
				mCurrentStageId = stageid;
				result = true;
			}
			else
			{
				Debug.LogError("Called to update the Mission Briefing Instructions before BeginSequence was called");
			}
		}
		return result;
	}

	public void ClearInstructions()
	{
		if (!mEnded)
		{
			if (mInstructionsPanel != null)
			{
				mInstructionsPanel.ClearInstructions();
			}
			else
			{
				Debug.LogError("Called to clear the Mission Briefing Instructions before BeginSequence was called");
			}
		}
	}

	public bool FocusOnItem(Texture texture, Transform focus, Vector2 size, Layer z, float duration, MissionBriefingHelper.FocusDirection direction)
	{
		bool result = false;
		if (!mEnded)
		{
			if (mFocusItem != null)
			{
				float z2 = (float)z * -0.2f;
				CameraManager instance = CameraManager.Instance;
				if (instance != null)
				{
					GameObject gameObject = new GameObject("LookAt - " + focus.name + " - CameraTransition");
					gameObject.transform.parent = base.transform;
					Vector3 position = focus.position;
					position.y = mStratergyCamera.transform.position.y;
					mLastLookAtCamera = gameObject.AddComponent<LookAtCamera>();
					mLastLookAtCamera.LookAt = focus;
					mLastLookAtCamera.transform.position = position;
					mLastLookAtCamera.transform.up = mStratergyCamera.transform.up;
					mCameraList.Add(mLastLookAtCamera);
					CameraTransitionData ctd = new CameraTransitionData(mLastLookAtCamera, TweenFunctions.TweenType.easeInOutCubic, 0.5f);
					instance.StrategyCameraController.BlendTo(ctd);
				}
				mFocusItem.DisplayItem(texture, size, duration - 0.5f, 0.5f, z2, direction, mAlternativeFrameTexture);
				result = true;
			}
			else
			{
				Debug.LogError("Called to focus on an item before BeginSequence was called");
			}
		}
		else
		{
			Resources.UnloadAsset(texture);
		}
		return result;
	}

	public bool ShowImage(Texture texture, Vector2 position, Vector2 size, Layer z, float duration)
	{
		bool result = false;
		if (!mEnded && ImageItemPrefab != null)
		{
			float z2 = (float)z * -0.2f;
			Vector3 position2 = new Vector3(position.x, position.y, z2);
			MissionBriefingImageItem missionBriefingImageItem = Object.Instantiate(ImageItemPrefab) as MissionBriefingImageItem;
			missionBriefingImageItem.transform.parent = base.transform;
			missionBriefingImageItem.DisplayItem(texture, position2, size, duration, mAlternativeFrameTexture);
			mImageItems.Add(missionBriefingImageItem);
			result = true;
		}
		else
		{
			Resources.UnloadAsset(texture);
		}
		return result;
	}

	private IEnumerator CleanUp()
	{
		AnimatedScreenBackground bg = AnimatedScreenBackground.Instance;
		if (bg != null)
		{
			bg.Activate();
			while (!bg.IsActive)
			{
				yield return null;
			}
		}
		CameraManager cameras = CameraManager.Instance;
		if (cameras != null)
		{
			if (mLastLookAtCamera != null && mStratergyCamera != null)
			{
				CameraTransitionData cameraTransition = new CameraTransitionData(mStratergyCamera, TweenFunctions.TweenType.easeInOutCubic, 0.5f);
				cameras.StrategyCameraController.BlendTo(cameraTransition);
				mStratergyCamera.AllowInput(true);
				Invoke("DestroyCameras", 0.5f);
			}
			Camera strategy = cameras.StrategyCamera.GetComponent<Camera>();
			strategy.cullingMask = mOldCullingMask;
		}
		GameController game = GameController.Instance;
		MissionSetup missionSetup = MissionSetup.Instance;
		if (game != null)
		{
			bool bDoLoadout = false;
			if (!GameSettings.DisableLoadoutAndBriefing && missionSetup != null && (missionSetup.DoLoadoutOnStart || GameSettings.LaunchedFromGlobe) && !ActStructure.Instance.CurrentMissionSectionIsTutorial())
			{
				bDoLoadout = true;
			}
			if (bDoLoadout)
			{
				game.Loadout.StartLoadout();
			}
			else
			{
				StartCoroutine(DeactivateBackgroundAfterTime(2f));
			}
		}
		StopAllBriefingAudio();
		if (mEntireLevelModel != null)
		{
			Object.Destroy(mEntireLevelModel);
			mEntireLevelModel = null;
		}
		yield return null;
	}

	private void DestroyCameras()
	{
		foreach (LookAtCamera mCamera in mCameraList)
		{
			Object.DestroyObject(mCamera.gameObject);
		}
	}

	private Vector3 FindInsertionPoint()
	{
		Vector3 result = default(Vector3);
		Spawner[] array = Object.FindObjectsOfType(typeof(Spawner)) as Spawner[];
		int num = 0;
		for (int i = 0; i < array.Length; i++)
		{
			if (array[i].Spawn.PlayerControlled)
			{
				result += array[i].transform.position;
				num++;
			}
		}
		if (num > 0 && MissionSetup.Instance.InitiallyDisabledPlayers != null)
		{
			for (int j = 0; j < MissionSetup.Instance.InitiallyDisabledPlayers.Length; j++)
			{
				if (MissionSetup.Instance.InitiallyDisabledPlayers[j].theObject != null && !MissionSetup.Instance.InitiallyDisabledPlayers[j].theObject.gameObject.activeInHierarchy)
				{
					MissionSetup.Instance.InitiallyDisabledPlayers[j].theObject.SetActive(true);
					Spawner componentInChildren = MissionSetup.Instance.InitiallyDisabledPlayers[j].theObject.GetComponentInChildren<Spawner>();
					if (componentInChildren != null)
					{
						result += componentInChildren.transform.position;
						num++;
					}
					MissionSetup.Instance.InitiallyDisabledPlayers[j].theObject.SetActive(false);
				}
			}
		}
		if (num > 0)
		{
			result /= (float)num;
		}
		return result;
	}

	public void SkipSequence()
	{
		MissionSetup instance = MissionSetup.Instance;
		if (!mEnded && instance != null && instance.MissionBriefSequence != null)
		{
			EndSequence();
			mWaitOnId = int.MaxValue;
		}
	}

	public void NextInstructionInSequence()
	{
		mWaitOnId = mCurrentStageId + 1;
		if (mFocusItem != null && mFocusItem.Waiting)
		{
			mFocusItem.ReleaseFromWait();
		}
		for (int i = 0; i < mImageItems.Count; i++)
		{
			MissionBriefingImageItem missionBriefingImageItem = mImageItems[i];
			if (missionBriefingImageItem != null && missionBriefingImageItem.Waiting)
			{
				missionBriefingImageItem.ReleaseFromWait();
			}
		}
	}

	private void StopAllBriefingAudio()
	{
		BriefingSFX.Instance.BoxStatic.Stop2D();
		BriefingSFX.Instance.StopAllNarration(mMissionId);
	}

	public void HideButtons()
	{
		SkipMessage.Hide(true);
	}

	public void ShowButtons()
	{
		SkipMessage.gameObject.MoveFrom(SkipMessage.transform.position - new Vector3(0f, 3f, 0f), 0.4f, 0f, EaseType.easeOutSine);
		SkipMessage.Hide(false);
	}

	private IEnumerator DeactivateBackgroundAfterTime(float waitTime)
	{
		float time2 = Time.realtimeSinceStartup + waitTime;
		while (Time.realtimeSinceStartup < time2)
		{
			yield return null;
		}
		GameController.Instance.PostLoadoutBeginGameplay();
		time2 = Time.realtimeSinceStartup + waitTime;
		while (Time.realtimeSinceStartup < time2)
		{
			yield return null;
		}
		MissionDescriptor MissionDesc = MissionDescriptor.Instance;
		if (MissionDesc != null)
		{
			MissionDesc.StartIntroSequence();
		}
		AnimatedScreenBackground bg = AnimatedScreenBackground.Instance;
		if (bg != null)
		{
			bg.Deactivate();
		}
	}
}
