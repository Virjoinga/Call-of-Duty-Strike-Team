using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DailyRewards : SingletonMonoBehaviour, iSwrveUpdatable
{
	public List<DailyReward> rewards = new List<DailyReward>();

	public bool AllowNormalNotification = true;

	public bool AllowBoostNotification = true;

	private bool IsCheckingConditions;

	public static DailyRewards Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<DailyRewards>();
		}
	}

	protected override void Awake()
	{
		UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
		base.Awake();
	}

	public void UpdateFromSwrve()
	{
		Dictionary<string, string> resourceDictionary;
		if (!Bedrock.GetRemoteUserResources("DailyReward", out resourceDictionary))
		{
			return;
		}
		for (int i = 0; i < rewards.Count; i++)
		{
			string text = "Day_" + i;
			rewards[i].amount = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, text + "_amount", rewards[i].amount);
			int defaultValue = (rewards[i].addTokensInstead ? 1 : 0);
			rewards[i].addTokensInstead = Bedrock.GetFromResourceDictionaryAsInt(resourceDictionary, text + "_tokens", defaultValue) == 1;
			string fromResourceDictionaryAsString = Bedrock.GetFromResourceDictionaryAsString(resourceDictionary, text + "_reward", string.Empty);
			foreach (int value in Enum.GetValues(typeof(EquipmentIconController.EquipmentType)))
			{
				if (((EquipmentIconController.EquipmentType)value).ToString() == fromResourceDictionaryAsString)
				{
					rewards[i].item = (EquipmentIconController.EquipmentType)value;
				}
			}
			AllowNormalNotification = Bedrock.GetFromResourceDictionaryAsBool(resourceDictionary, "allowNormalNotification", AllowNormalNotification);
			AllowBoostNotification = Bedrock.GetFromResourceDictionaryAsBool(resourceDictionary, "allowBoostNotification", AllowBoostNotification);
		}
	}

	public void CheckDailyReward()
	{
		if (!IsCheckingConditions)
		{
			StartCoroutine(DailyRewardCheck());
		}
	}

	private IEnumerator DailyRewardCheck()
	{
		if (GameSettings.Instance.KInviteRewardsToShow != 0)
		{
			while (MessageBoxController.Instance.IsAnyMessageActive)
			{
				yield return null;
			}
			MessageBoxController.Instance.DoKInviteReward();
			while (MessageBoxController.Instance.IsAnyMessageActive)
			{
				yield return null;
			}
		}
		if (IsCheckingConditions)
		{
			yield break;
		}
		IsCheckingConditions = true;
		float i = 0f;
		float serverTimeOut = 60f;
		while (!SynchronizedClock.Instance.IsSynchronized && i < serverTimeOut)
		{
			i += Time.deltaTime;
			yield return null;
		}
		if (SynchronizedClock.Instance.IsSynchronized)
		{
			while (!MessageBoxController.Instance.CheckDailyRewardDialogue())
			{
				yield return null;
			}
		}
		IsCheckingConditions = false;
	}
}
