using System.Collections.Generic;
using System.Reflection;
using UnityEngine;

public class MusicManager : SingletonMonoBehaviour
{
	public class StackedTrack
	{
		public SoundFXData Track;

		public float Volume;

		public float FadeInTime;

		public float FadeOutTime;

		public float Priority;

		public string TrackString;

		public bool ScriptTriggered;
	}

	private class MusicFader
	{
		public SoundFXData mMusicTrack;

		private float mTimeToFade;

		private float mTimePassed;

		private float mStartVolume;

		private float mEndVolume;

		public bool mFadingIn;

		private SoundManager.SoundInstance mSndInst;

		public bool IsFinished
		{
			get
			{
				return mTimePassed >= mTimeToFade;
			}
		}

		public MusicFader(SoundFXData track, float fadeTime, bool fadeIn, float volume)
		{
			mMusicTrack = track;
			mTimeToFade = fadeTime;
			mTimePassed = 0f;
			mFadingIn = fadeIn;
			mSndInst = null;
			if (mFadingIn)
			{
				mStartVolume = 0f;
				mEndVolume = volume;
				SoundManager instance = SoundManager.Instance;
				if (instance != null)
				{
					mSndInst = instance.Play2D(mMusicTrack);
					if (mSndInst != SoundManager.SoundInstance.Null)
					{
						mSndInst.Volume = mStartVolume;
						Instance.CurrentlyPlaying = mSndInst.SampleName;
					}
				}
			}
			else
			{
				SoundManager instance2 = SoundManager.Instance;
				if (instance2 != null)
				{
					mSndInst = instance2.FindSoundInstance2D(track);
				}
				mStartVolume = mMusicTrack.m_volume;
				mEndVolume = 0f;
			}
		}

		public void Update()
		{
			mTimePassed += TimeManager.DeltaTime;
			if (mTimePassed > mTimeToFade)
			{
				mTimePassed = mTimeToFade;
			}
			float num = mTimePassed / mTimeToFade;
			if (mFadingIn)
			{
				if (mSndInst != null)
				{
					mSndInst.Volume = mStartVolume + (mEndVolume - mStartVolume) * num;
				}
			}
			else if (IsFinished)
			{
				if (mSndInst != null)
				{
					mSndInst.Stop();
					mSndInst = null;
				}
			}
			else if (mSndInst != null)
			{
				mSndInst.Volume = mEndVolume + (mStartVolume - mEndVolume) * (1f - num);
			}
		}

		public void FinishNow()
		{
			if (mSndInst != null)
			{
				mSndInst.Stop();
				mSndInst = null;
			}
		}
	}

	public string CurrentlyPlaying = "None";

	private bool ScriptOverrideTrigger;

	public float StandardCrossFadeInTime = 1f;

	public float StandardCrossFadeOutTime = 1f;

	public float RapidCrossFadeOutTime = 0.5f;

	public float DefaultTensionVolumeLevel = 0.7f;

	public float DefaultMusicVolumeLevel = 1f;

	public float StandardPriority = 128f;

	public float HighPriority = 256f;

	public SoundFXData TitleMusic;

	public SoundFXData StrategyMapMusic;

	public SoundFXData AmbientRainMusic;

	public SoundFXData AmbientArcticMusic;

	public SoundFXData AmbientMiddleEastMusic;

	public SoundFXData LoadOutMusic;

	public SoundFXData MissionFailMusic;

	public SoundFXData MissionPassMusic;

	public SoundFXData TensionThemeMusic;

	public SoundFXData CombatThemeMusic;

	public SoundFXData HighDramaThemeMusic;

	public SoundFXData MortallyWoundedThemeMusic;

	public SoundFXData AfgIntro;

	public SoundFXData AfgOutro;

	public SoundFXData ArcIntro;

	public SoundFXData ArcOutro;

	public SoundFXData KowIntro;

	public SoundFXData KowOutro;

	public SoundFXData Silence;

	public SoundFXData CombatTheme1;

	public SoundFXData CombatTheme2;

	public SoundFXData HighDrama1;

	public SoundFXData HighDrama2;

	private float m_currentMusicVolume;

	private int m_currentMusicHC;

	private SoundFXData m_currentMusic;

	private SoundFXData m_ambientMusic;

	public List<StackedTrack> mStackedTracks = new List<StackedTrack>();

	private List<MusicFader> mFaders = new List<MusicFader>();

	public static MusicManager Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<MusicManager>();
		}
	}

	public static bool HasInstance
	{
		get
		{
			return SingletonMonoBehaviour.GetSingletonInstance<MusicManager>() != null;
		}
	}

	private void Start()
	{
		Object.DontDestroyOnLoad(this);
	}

	public void SetMusicScriptOverride(bool value)
	{
		ScriptOverrideTrigger = value;
	}

	public void FlushMusicStack()
	{
		if (mStackedTracks.Count > 0)
		{
			ScriptOverrideTrigger = false;
			for (int i = 0; i < mStackedTracks.Count; i++)
			{
				mStackedTracks.Remove(mStackedTracks[i]);
			}
		}
	}

	public void RefreshVolumeAfterSettingsChange()
	{
		if (m_currentMusic != null)
		{
			SoundManager.Instance.SetVolume(m_currentMusic, null, m_currentMusic.m_volume);
		}
	}

	public void FadeOutCurrentMusic(float time)
	{
		if (m_currentMusicHC != 0 && m_currentMusic != null)
		{
			mFaders.Add(new MusicFader(m_currentMusic, time, false, m_currentMusicVolume));
			m_currentMusicHC = 0;
			m_currentMusicVolume = 0f;
		}
	}

	public void PopMusicStack(SoundFXData musicToStop, float priority)
	{
		if (!(SoundManager.Instance != null))
		{
			return;
		}
		if (mStackedTracks != null && mStackedTracks.Count > 1)
		{
			if (m_currentMusic == musicToStop)
			{
				StackedTrack stackedTrack = mStackedTracks[mStackedTracks.Count - 1];
				StackedTrack stackedTrack2 = mStackedTracks[mStackedTracks.Count - 2];
				CrossFadeTo(stackedTrack2.Track, stackedTrack2.Volume, stackedTrack2.FadeInTime, stackedTrack.FadeOutTime);
				mStackedTracks.RemoveAt(mStackedTracks.Count - 1);
				return;
			}
			bool flag = false;
			for (int i = 0; i < mStackedTracks.Count; i++)
			{
				if (mStackedTracks[i].Track == musicToStop && mStackedTracks[i].Priority == priority)
				{
					flag = true;
					mStackedTracks.RemoveAt(i);
					break;
				}
			}
			if (flag)
			{
			}
		}
		else
		{
			FadeOutCurrentMusic(RapidCrossFadeOutTime);
		}
	}

	private void FadeInNewMusic(SoundFXData musicToPlay, float volume, float time)
	{
		mFaders.Add(new MusicFader(musicToPlay, time, true, volume));
		m_currentMusicHC = musicToPlay.m_audioSourceData.ToString().GetHashCode();
		m_currentMusic = musicToPlay;
		m_currentMusicVolume = volume;
	}

	private void CrossFadeTo(SoundFXData musicToPlay, float volume, float fadeInTime, float fadeOutTime)
	{
		FadeOutCurrentMusic(fadeOutTime);
		FadeInNewMusic(musicToPlay, volume, fadeInTime);
	}

	public bool IsPlayingTrack(string trackName)
	{
		if (mStackedTracks == null || mStackedTracks.Count == 0)
		{
			return false;
		}
		return mStackedTracks[mStackedTracks.Count - 1].TrackString.GetHashCode() == trackName.GetHashCode();
	}

	public void Play(string trackName)
	{
		Play(trackName, DefaultMusicVolumeLevel, StandardCrossFadeInTime, StandardCrossFadeOutTime, StandardPriority, false);
	}

	public void Play(SoundFXData trackToPlay)
	{
		Play(trackToPlay, DefaultMusicVolumeLevel, StandardCrossFadeInTime, StandardCrossFadeOutTime, StandardPriority, false);
	}

	public void ScriptStopMusic(string trackName, float priority, float fadeOutTime)
	{
		if (m_currentMusic != MissionPassMusic && m_currentMusic != MissionFailMusic)
		{
			FieldInfo field = GetType().GetField(trackName);
			SoundFXData soundFXData = field.GetValue(this) as SoundFXData;
			if (soundFXData != null)
			{
				PopMusicStack(soundFXData, priority);
			}
		}
	}

	public void StopCurrentMusic()
	{
		FadeOutCurrentMusic(StandardCrossFadeOutTime);
	}

	public void ScriptPlay(string trackName, float volume, float fadeInTime, float fadeOutTime, float priority)
	{
		SoundFXData soundFXData = null;
		if (trackName.Length > 0)
		{
			FieldInfo field = GetType().GetField(trackName);
			if (field != null)
			{
				soundFXData = field.GetValue(this) as SoundFXData;
			}
		}
		if (soundFXData != null)
		{
			ScriptOverrideTrigger = true;
			Play(soundFXData, volume, fadeInTime, fadeOutTime, priority, true);
		}
	}

	public void Play(string trackName, float volume, float fadeInTime, float fadeOutTime, float priority, bool bScript)
	{
		FieldInfo field = GetType().GetField(trackName);
		SoundFXData soundFXData = field.GetValue(this) as SoundFXData;
		if (soundFXData != null)
		{
			Play(soundFXData, volume, fadeInTime, fadeOutTime, priority, bScript);
		}
	}

	public void Play(SoundFXData trackToPlay, float volume, float fadeInTime, float fadeOutTime, float priority, bool bScript)
	{
		if (trackToPlay == null || ((!ScriptOverrideTrigger || m_currentMusic == trackToPlay) && m_currentMusicHC != 0 && (m_currentMusicHC == 0 || m_currentMusic == trackToPlay)))
		{
			return;
		}
		MusicFader musicFader = null;
		foreach (MusicFader mFader in mFaders)
		{
			if (mFader.mMusicTrack == trackToPlay && !mFader.mFadingIn)
			{
				musicFader = mFader;
			}
		}
		if (musicFader != null)
		{
			musicFader.FinishNow();
			mFaders.Remove(musicFader);
		}
		List<MusicFader> list = new List<MusicFader>();
		foreach (MusicFader mFader2 in mFaders)
		{
			if (mFader2.mFadingIn)
			{
				list.Add(mFader2);
			}
		}
		foreach (MusicFader item in list)
		{
			item.FinishNow();
			mFaders.Remove(item);
		}
		list.Clear();
		if (mStackedTracks == null)
		{
			return;
		}
		bool flag = mStackedTracks.Count == 0;
		if (mStackedTracks.Count > 0)
		{
			flag = priority >= mStackedTracks[mStackedTracks.Count - 1].Priority;
		}
		if ((flag && ScriptOverrideTrigger) || !ScriptOverrideTrigger || mStackedTracks.Count == 0)
		{
			float num = 0f;
			StackedTrack stackedTrack = new StackedTrack();
			stackedTrack.Track = trackToPlay;
			stackedTrack.Volume = volume;
			stackedTrack.FadeInTime = fadeInTime;
			stackedTrack.FadeOutTime = fadeOutTime;
			stackedTrack.Priority = priority;
			stackedTrack.TrackString = trackToPlay.ToString();
			stackedTrack.ScriptTriggered = bScript;
			mStackedTracks.Add(stackedTrack);
			if (mStackedTracks.Count == 1)
			{
				FadeOutCurrentMusic(StandardCrossFadeOutTime);
				FadeInNewMusic(trackToPlay, volume, fadeInTime);
			}
			else
			{
				num = mStackedTracks[mStackedTracks.Count - 2].FadeOutTime;
				CrossFadeTo(trackToPlay, volume, fadeInTime, num);
			}
		}
	}

	public void PlayMissionPassMusic()
	{
		if (m_currentMusicHC == 0 || (m_currentMusicHC != 0 && m_currentMusic != MissionPassMusic))
		{
			PlayHighPriorityMusic(MissionPassMusic);
		}
	}

	public void PlayMissionFailMusic()
	{
		if (m_currentMusicHC == 0 || (m_currentMusicHC != 0 && m_currentMusic != MissionFailMusic))
		{
			PlayHighPriorityMusic(MissionFailMusic);
		}
	}

	public void PlayLoadOutMusic()
	{
		if (m_currentMusicHC == 0 || (m_currentMusicHC != 0 && m_currentMusic != LoadOutMusic))
		{
			Play(LoadOutMusic);
		}
	}

	public void PlayTitleMusic()
	{
		if (m_currentMusicHC == 0 || (m_currentMusicHC != 0 && m_currentMusic != TitleMusic))
		{
			FlushMusicStack();
			Play(TitleMusic);
		}
	}

	public void PlayStrategyMapMusic()
	{
		if (m_currentMusicHC == 0 || (m_currentMusicHC != 0 && m_currentMusic != StrategyMapMusic))
		{
			Play(StrategyMapMusic);
		}
	}

	public void PlayAmbientMusic(string trackName)
	{
		FieldInfo field = GetType().GetField(trackName);
		SoundFXData soundFXData = field.GetValue(this) as SoundFXData;
		if (soundFXData != null)
		{
			PlayAmbientMusic(soundFXData);
		}
	}

	public void PlayAmbientMusic(SoundFXData trackToPlay)
	{
		if (trackToPlay != null)
		{
			m_ambientMusic = trackToPlay;
			Play(trackToPlay, trackToPlay.m_volume, StandardCrossFadeInTime, StandardCrossFadeOutTime, StandardPriority, false);
		}
		else
		{
			m_ambientMusic = null;
		}
	}

	public void PlayAmbientMusic()
	{
		if (m_ambientMusic != null)
		{
			PlayAmbientMusic(m_ambientMusic);
		}
		else
		{
			PlayAmbientMusic(AmbientRainMusic);
		}
	}

	public void PlayAmbientRainMusic()
	{
		if (m_currentMusicHC == 0 || (m_currentMusicHC != 0 && m_currentMusic != AmbientRainMusic))
		{
			PlayAmbientMusic(AmbientRainMusic);
		}
	}

	public void PlayMortallyWoundedThemeMusic()
	{
		if (m_currentMusicHC == 0 || (m_currentMusicHC != 0 && m_currentMusic != MortallyWoundedThemeMusic))
		{
			PlayHighPriorityMusic(MortallyWoundedThemeMusic);
		}
	}

	public void StopMortallyWoundedThemeMusic()
	{
		if (m_currentMusicHC != 0 && m_currentMusic == MortallyWoundedThemeMusic)
		{
			if (ScriptOverrideTrigger)
			{
				PopMusicStack(m_currentMusic, HighPriority);
			}
			else
			{
				FadeOutCurrentMusic(StandardCrossFadeOutTime);
			}
		}
	}

	public void PlayTensionThemeMusic()
	{
		if (m_currentMusicHC == 0 || (m_currentMusicHC != 0 && m_currentMusic != TensionThemeMusic))
		{
			PlayTensionMusic(TensionThemeMusic);
		}
	}

	public void PlayCombatThemeMusic()
	{
		if (m_currentMusicHC == 0 || (m_currentMusicHC != 0 && m_currentMusic != CombatThemeMusic))
		{
			PlayTensionMusic(CombatThemeMusic);
		}
	}

	public void PlayHighDramaThemeMusic()
	{
		if (m_currentMusicHC == 0 || (m_currentMusicHC != 0 && m_currentMusic != HighDramaThemeMusic))
		{
			PlayTensionMusic(HighDramaThemeMusic);
		}
	}

	public void PlayBriefingMusic()
	{
		if (m_currentMusicHC == 0 || (m_currentMusicHC != 0 && m_currentMusic != HighDramaThemeMusic))
		{
			Play(HighDramaThemeMusic, 0.5f, 1f, 1f, StandardPriority, false);
		}
	}

	public void PlayTensionMusic(SoundFXData trackToPlay)
	{
		Play(trackToPlay, DefaultTensionVolumeLevel, StandardCrossFadeInTime, StandardCrossFadeOutTime, StandardPriority, false);
	}

	private void PlayHighPriorityMusic(SoundFXData hpTracktoPlay)
	{
		Play(hpTracktoPlay, hpTracktoPlay.m_volume, StandardCrossFadeInTime, StandardCrossFadeOutTime, HighPriority, false);
	}

	private void Update()
	{
		if (mFaders.Count <= 0)
		{
			return;
		}
		for (int num = mFaders.Count - 1; num >= 0; num--)
		{
			mFaders[num].Update();
			if (mFaders[num].IsFinished)
			{
				mFaders.RemoveAt(num);
			}
		}
	}
}
